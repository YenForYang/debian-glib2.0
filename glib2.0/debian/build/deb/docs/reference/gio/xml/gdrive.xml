<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GDrive">
<refmeta>
<refentrytitle role="top_of_page" id="GDrive.top_of_page">GDrive</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GDrive</refname>
<refpurpose>Drive management</refpurpose>
</refnamediv>

<refsect1 id="GDrive.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-drive-get-name">g_drive_get_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-drive-get-icon">g_drive_get_icon</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-drive-get-symbolic-icon">g_drive_get_symbolic_icon</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-has-volumes">g_drive_has_volumes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-drive-get-volumes">g_drive_get_volumes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-can-eject">g_drive_can_eject</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GDriveStartStopType"><returnvalue>GDriveStartStopType</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-get-start-stop-type">g_drive_get_start_stop_type</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-can-start">g_drive_can_start</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-can-start-degraded">g_drive_can_start_degraded</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-can-stop">g_drive_can_stop</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-can-poll-for-media">g_drive_can_poll_for_media</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-poll-for-media">g_drive_poll_for_media</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-poll-for-media-finish">g_drive_poll_for_media_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-has-media">g_drive_has_media</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-is-media-check-automatic">g_drive_is_media_check_automatic</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-is-removable">g_drive_is_removable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-is-media-removable">g_drive_is_media_removable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-eject">g_drive_eject</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-eject-finish">g_drive_eject_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-eject-with-operation">g_drive_eject_with_operation</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-eject-with-operation-finish">g_drive_eject_with_operation_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-start">g_drive_start</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-start-finish">g_drive_start_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-stop">g_drive_stop</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-drive-stop-finish">g_drive_stop_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-drive-enumerate-identifiers">g_drive_enumerate_identifiers</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-drive-get-identifier">g_drive_get_identifier</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-drive-get-sort-key">g_drive_get_sort_key</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GDrive.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="signals_return" colwidth="150px"/>
<colspec colname="signals_name" colwidth="300px"/>
<colspec colname="signals_flags" colwidth="200px"/>
<tbody>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GDrive-changed">changed</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GDrive-disconnected">disconnected</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GDrive-eject-button">eject-button</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GDrive-stop-button">stop-button</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GDrive.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GDrive-struct">GDrive</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GDriveIface">GDriveIface</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GDriveStartFlags">GDriveStartFlags</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GDriveStartStopType">GDriveStartStopType</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="G-DRIVE-IDENTIFIER-KIND-UNIX-DEVICE:CAPS">G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GDrive.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GEnum">GEnum</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GDriveStartStopType
    <link linkend="GFlags">GFlags</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GDriveStartFlags
    <link linkend="GInterface">GInterface</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GDrive
</screen>
</refsect1>
<refsect1 id="GDrive.prerequisites" role="prerequisites">
<title role="prerequisites.title">Prerequisites</title>
<para>
GDrive requires
 <link linkend="GObject">GObject</link>.</para>

</refsect1>

<refsect1 id="GDrive.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GDrive.description" role="desc">
<title role="desc.title">Description</title>
<para><link linkend="GDrive"><type>GDrive</type></link> - this represent a piece of hardware connected to the machine.
It's generally only created for removable hardware or hardware with
removable media.</para>
<para><link linkend="GDrive"><type>GDrive</type></link> is a container class for <link linkend="GVolume"><type>GVolume</type></link> objects that stem from
the same piece of media. As such, <link linkend="GDrive"><type>GDrive</type></link> abstracts a drive with
(or without) removable media and provides operations for querying
whether media is available, determining whether media change is
automatically detected and ejecting the media.</para>
<para>If the <link linkend="GDrive"><type>GDrive</type></link> reports that media isn't automatically detected, one
can poll for media; typically one should not do this periodically
as a poll for media operation is potententially expensive and may
spin up the drive creating noise.</para>
<para><link linkend="GDrive"><type>GDrive</type></link> supports starting and stopping drives with authentication
support for the former. This can be used to support a diverse set
of use cases including connecting/disconnecting iSCSI devices,
powering down external disk enclosures and starting/stopping
multi-disk devices such as RAID devices. Note that the actual
semantics and side-effects of starting/stopping a <link linkend="GDrive"><type>GDrive</type></link> may vary
according to implementation. To choose the correct verbs in e.g. a
file manager, use <link linkend="g-drive-get-start-stop-type"><function>g_drive_get_start_stop_type()</function></link>.</para>
<para>For porting from GnomeVFS note that there is no equivalent of
<link linkend="GDrive"><type>GDrive</type></link> in that API.</para>

</refsect1>
<refsect1 id="GDrive.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-drive-get-name" role="function">
<title>g_drive_get_name&#160;()</title>
<indexterm zone="g-drive-get-name"><primary sortas="drive_get_name">g_drive_get_name</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_drive_get_name (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Gets the name of <parameter>drive</parameter>
.</para>
<refsect3 id="g-drive-get-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-get-name.returns" role="returns">
<title>Returns</title>
<para> a string containing <parameter>drive</parameter>
's name. The returned
string should be freed when no longer needed.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-get-icon" role="function">
<title>g_drive_get_icon&#160;()</title>
<indexterm zone="g-drive-get-icon"><primary sortas="drive_get_icon">g_drive_get_icon</primary></indexterm>
<programlisting language="C"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
g_drive_get_icon (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Gets the icon for <parameter>drive</parameter>
.</para>
<refsect3 id="g-drive-get-icon.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-get-icon.returns" role="returns">
<title>Returns</title>
<para><link linkend="GIcon"><type>GIcon</type></link> for the <parameter>drive</parameter>
.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-drive-get-symbolic-icon" role="function" condition="since:2.34">
<title>g_drive_get_symbolic_icon&#160;()</title>
<indexterm zone="g-drive-get-symbolic-icon" role="2.34"><primary sortas="drive_get_symbolic_icon">g_drive_get_symbolic_icon</primary></indexterm>
<programlisting language="C"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
g_drive_get_symbolic_icon (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Gets the icon for <parameter>drive</parameter>
.</para>
<refsect3 id="g-drive-get-symbolic-icon.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-get-symbolic-icon.returns" role="returns">
<title>Returns</title>
<para>symbolic <link linkend="GIcon"><type>GIcon</type></link> for the <parameter>drive</parameter>
.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.34">2.34</link></para></refsect2>
<refsect2 id="g-drive-has-volumes" role="function">
<title>g_drive_has_volumes&#160;()</title>
<indexterm zone="g-drive-has-volumes"><primary sortas="drive_has_volumes">g_drive_has_volumes</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_has_volumes (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Check if <parameter>drive</parameter>
 has any mountable volumes.</para>
<refsect3 id="g-drive-has-volumes.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-has-volumes.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>drive</parameter>
contains volumes, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-get-volumes" role="function">
<title>g_drive_get_volumes&#160;()</title>
<indexterm zone="g-drive-get-volumes"><primary sortas="drive_get_volumes">g_drive_get_volumes</primary></indexterm>
<programlisting language="C"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
g_drive_get_volumes (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Get a list of mountable volumes for <parameter>drive</parameter>
.</para>
<para>The returned list should be freed with <link linkend="g-list-free"><function>g_list_free()</function></link>, after
its elements have been unreffed with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.</para>
<refsect3 id="g-drive-get-volumes.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-get-volumes.returns" role="returns">
<title>Returns</title>
<para><link linkend="GList"><type>GList</type></link> containing any <link linkend="GVolume"><type>GVolume</type></link> objects on the given <parameter>drive</parameter>
. </para>
<para><emphasis role="annotation">[<acronym>element-type</acronym> GVolume][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-drive-can-eject" role="function">
<title>g_drive_can_eject&#160;()</title>
<indexterm zone="g-drive-can-eject"><primary sortas="drive_can_eject">g_drive_can_eject</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_can_eject (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if a drive can be ejected.</para>
<refsect3 id="g-drive-can-eject.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-can-eject.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>drive</parameter>
can be ejected, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-get-start-stop-type" role="function" condition="since:2.22">
<title>g_drive_get_start_stop_type&#160;()</title>
<indexterm zone="g-drive-get-start-stop-type" role="2.22"><primary sortas="drive_get_start_stop_type">g_drive_get_start_stop_type</primary></indexterm>
<programlisting language="C"><link linkend="GDriveStartStopType"><returnvalue>GDriveStartStopType</returnvalue></link>
g_drive_get_start_stop_type (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Gets a hint about how a drive can be started/stopped.</para>
<refsect3 id="g-drive-get-start-stop-type.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-get-start-stop-type.returns" role="returns">
<title>Returns</title>
<para> A value from the <link linkend="GDriveStartStopType"><type>GDriveStartStopType</type></link> enumeration.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-can-start" role="function" condition="since:2.22">
<title>g_drive_can_start&#160;()</title>
<indexterm zone="g-drive-can-start" role="2.22"><primary sortas="drive_can_start">g_drive_can_start</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_can_start (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if a drive can be started.</para>
<refsect3 id="g-drive-can-start.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-can-start.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>drive</parameter>
can be started, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-can-start-degraded" role="function" condition="since:2.22">
<title>g_drive_can_start_degraded&#160;()</title>
<indexterm zone="g-drive-can-start-degraded" role="2.22"><primary sortas="drive_can_start_degraded">g_drive_can_start_degraded</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_can_start_degraded (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if a drive can be started degraded.</para>
<refsect3 id="g-drive-can-start-degraded.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-can-start-degraded.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>drive</parameter>
can be started degraded, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-can-stop" role="function" condition="since:2.22">
<title>g_drive_can_stop&#160;()</title>
<indexterm zone="g-drive-can-stop" role="2.22"><primary sortas="drive_can_stop">g_drive_can_stop</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_can_stop (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if a drive can be stopped.</para>
<refsect3 id="g-drive-can-stop.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-can-stop.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>drive</parameter>
can be stopped, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-can-poll-for-media" role="function">
<title>g_drive_can_poll_for_media&#160;()</title>
<indexterm zone="g-drive-can-poll-for-media"><primary sortas="drive_can_poll_for_media">g_drive_can_poll_for_media</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_can_poll_for_media (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if a drive can be polled for media changes.</para>
<refsect3 id="g-drive-can-poll-for-media.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-can-poll-for-media.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>drive</parameter>
can be polled for media changes,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-poll-for-media" role="function">
<title>g_drive_poll_for_media&#160;()</title>
<indexterm zone="g-drive-poll-for-media"><primary sortas="drive_poll_for_media">g_drive_poll_for_media</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_drive_poll_for_media (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                        <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously polls <parameter>drive</parameter>
 to see if media has been inserted or removed.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-drive-poll-for-media-finish"><function>g_drive_poll_for_media_finish()</function></link> to obtain the
result of the operation.</para>
<refsect3 id="g-drive-poll-for-media.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data to pass to <parameter>callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-drive-poll-for-media-finish" role="function">
<title>g_drive_poll_for_media_finish&#160;()</title>
<indexterm zone="g-drive-poll-for-media-finish"><primary sortas="drive_poll_for_media_finish">g_drive_poll_for_media_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_poll_for_media_finish (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
                               <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an operation started with <link linkend="g-drive-poll-for-media"><function>g_drive_poll_for_media()</function></link> on a drive.</para>
<refsect3 id="g-drive-poll-for-media-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-poll-for-media-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the drive has been poll_for_mediaed successfully,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-has-media" role="function">
<title>g_drive_has_media&#160;()</title>
<indexterm zone="g-drive-has-media"><primary sortas="drive_has_media">g_drive_has_media</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_has_media (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if the <parameter>drive</parameter>
 has media. Note that the OS may not be polling
the drive for media changes; see <link linkend="g-drive-is-media-check-automatic"><function>g_drive_is_media_check_automatic()</function></link>
for more details.</para>
<refsect3 id="g-drive-has-media.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-has-media.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>drive</parameter>
has media, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-is-media-check-automatic" role="function">
<title>g_drive_is_media_check_automatic&#160;()</title>
<indexterm zone="g-drive-is-media-check-automatic"><primary sortas="drive_is_media_check_automatic">g_drive_is_media_check_automatic</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_is_media_check_automatic (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if <parameter>drive</parameter>
 is capabable of automatically detecting media changes.</para>
<refsect3 id="g-drive-is-media-check-automatic.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-is-media-check-automatic.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>drive</parameter>
is capabable of automatically detecting
media changes, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-is-removable" role="function" condition="since:2.50">
<title>g_drive_is_removable&#160;()</title>
<indexterm zone="g-drive-is-removable" role="2.50"><primary sortas="drive_is_removable">g_drive_is_removable</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_is_removable (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if the <link linkend="GDrive"><type>GDrive</type></link> and/or its media is considered removable by the user.
See <link linkend="g-drive-is-media-removable"><function>g_drive_is_media_removable()</function></link>.</para>
<refsect3 id="g-drive-is-removable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-is-removable.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>drive</parameter>
and/or its media is considered removable, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.50">2.50</link></para></refsect2>
<refsect2 id="g-drive-is-media-removable" role="function">
<title>g_drive_is_media_removable&#160;()</title>
<indexterm zone="g-drive-is-media-removable"><primary sortas="drive_is_media_removable">g_drive_is_media_removable</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_is_media_removable (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Checks if the <parameter>drive</parameter>
 supports removable media.</para>
<refsect3 id="g-drive-is-media-removable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-is-media-removable.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>drive</parameter>
supports removable media, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-eject" role="function" condition="deprecated:2.22: Use g_drive_eject_with_operation() instead.">
<title>g_drive_eject&#160;()</title>
<indexterm zone="g-drive-eject" role="deprecated"><primary sortas="drive_eject">g_drive_eject</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_drive_eject (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
               <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
               <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
               <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<warning><para><literal>g_drive_eject</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-drive-eject-with-operation"><function>g_drive_eject_with_operation()</function></link> instead.</para>
</warning>
<para>Asynchronously ejects a drive.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-drive-eject-finish"><function>g_drive_eject_finish()</function></link> to obtain the
result of the operation.</para>
<refsect3 id="g-drive-eject.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the unmount if required for eject</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data to pass to <parameter>callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-drive-eject-finish" role="function" condition="deprecated:2.22: Use g_drive_eject_with_operation_finish() instead.">
<title>g_drive_eject_finish&#160;()</title>
<indexterm zone="g-drive-eject-finish" role="deprecated"><primary sortas="drive_eject_finish">g_drive_eject_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_eject_finish (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
                      <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<warning><para><literal>g_drive_eject_finish</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-drive-eject-with-operation-finish"><function>g_drive_eject_with_operation_finish()</function></link> instead.</para>
</warning>
<para>Finishes ejecting a drive.</para>
<refsect3 id="g-drive-eject-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-eject-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the drive has been ejected successfully,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-drive-eject-with-operation" role="function" condition="since:2.22">
<title>g_drive_eject_with_operation&#160;()</title>
<indexterm zone="g-drive-eject-with-operation" role="2.22"><primary sortas="drive_eject_with_operation">g_drive_eject_with_operation</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_drive_eject_with_operation (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
                              <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                              <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                              <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                              <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                              <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Ejects a drive. This is an asynchronous operation, and is
finished by calling <link linkend="g-drive-eject-with-operation-finish"><function>g_drive_eject_with_operation_finish()</function></link> with the <parameter>drive</parameter>

and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> data returned in the <parameter>callback</parameter>
.</para>
<refsect3 id="g-drive-eject-with-operation.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the unmount if required for eject</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid
user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-eject-with-operation-finish" role="function" condition="since:2.22">
<title>g_drive_eject_with_operation_finish&#160;()</title>
<indexterm zone="g-drive-eject-with-operation-finish" role="2.22"><primary sortas="drive_eject_with_operation_finish">g_drive_eject_with_operation_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_eject_with_operation_finish (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
                                     <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes ejecting a drive. If any errors occurred during the operation,
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<refsect3 id="g-drive-eject-with-operation-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-eject-with-operation-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the drive was successfully ejected. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-start" role="function" condition="since:2.22">
<title>g_drive_start&#160;()</title>
<indexterm zone="g-drive-start" role="2.22"><primary sortas="drive_start">g_drive_start</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_drive_start (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
               <parameter><link linkend="GDriveStartFlags"><type>GDriveStartFlags</type></link> flags</parameter>,
               <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
               <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
               <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously starts a drive.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-drive-start-finish"><function>g_drive_start_finish()</function></link> to obtain the
result of the operation.</para>
<refsect3 id="g-drive-start.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the start operation.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid
user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data to pass to <parameter>callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-start-finish" role="function" condition="since:2.22">
<title>g_drive_start_finish&#160;()</title>
<indexterm zone="g-drive-start-finish" role="2.22"><primary sortas="drive_start_finish">g_drive_start_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_start_finish (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
                      <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes starting a drive.</para>
<refsect3 id="g-drive-start-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-start-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the drive has been started successfully,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-stop" role="function" condition="since:2.22">
<title>g_drive_stop&#160;()</title>
<indexterm zone="g-drive-stop" role="2.22"><primary sortas="drive_stop">g_drive_stop</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_drive_stop (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
              <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
              <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
              <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
              <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
              <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously stops a drive.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-drive-stop-finish"><function>g_drive_stop_finish()</function></link> to obtain the
result of the operation.</para>
<refsect3 id="g-drive-stop.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the unmount if required for stopping.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid
user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data to pass to <parameter>callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-stop-finish" role="function" condition="since:2.22">
<title>g_drive_stop_finish&#160;()</title>
<indexterm zone="g-drive-stop-finish" role="2.22"><primary sortas="drive_stop_finish">g_drive_stop_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_drive_stop_finish (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
                     <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes stopping a drive.</para>
<refsect3 id="g-drive-stop-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-stop-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the drive has been stopped successfully,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-drive-enumerate-identifiers" role="function">
<title>g_drive_enumerate_identifiers&#160;()</title>
<indexterm zone="g-drive-enumerate-identifiers"><primary sortas="drive_enumerate_identifiers">g_drive_enumerate_identifiers</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;**
g_drive_enumerate_identifiers (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Gets the kinds of identifiers that <parameter>drive</parameter>
 has. 
Use <link linkend="g-drive-get-identifier"><function>g_drive_get_identifier()</function></link> to obtain the identifiers
themselves.</para>
<refsect3 id="g-drive-enumerate-identifiers.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-enumerate-identifiers.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated
array of strings containing kinds of identifiers. Use <link linkend="g-strfreev"><function>g_strfreev()</function></link>
to free. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>array</acronym> zero-terminated=1]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-drive-get-identifier" role="function">
<title>g_drive_get_identifier&#160;()</title>
<indexterm zone="g-drive-get-identifier"><primary sortas="drive_get_identifier">g_drive_get_identifier</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_drive_get_identifier (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>,
                        <parameter>const <link linkend="char"><type>char</type></link> *kind</parameter>);</programlisting>
<para>Gets the identifier of the given kind for <parameter>drive</parameter>
. The only
identifier currently available is
<link linkend="G-DRIVE-IDENTIFIER-KIND-UNIX-DEVICE:CAPS"><type>G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE</type></link>.</para>
<refsect3 id="g-drive-get-identifier.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>kind</para></entry>
<entry role="parameter_description"><para>the kind of identifier to return</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-get-identifier.returns" role="returns">
<title>Returns</title>
<para>a newly allocated string containing the
requested identifier, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the <link linkend="GDrive"><type>GDrive</type></link>
doesn't have this kind of identifier. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-drive-get-sort-key" role="function" condition="since:2.32">
<title>g_drive_get_sort_key&#160;()</title>
<indexterm zone="g-drive-get-sort-key" role="2.32"><primary sortas="drive_get_sort_key">g_drive_get_sort_key</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
g_drive_get_sort_key (<parameter><link linkend="GDrive"><type>GDrive</type></link> *drive</parameter>);</programlisting>
<para>Gets the sort key for <parameter>drive</parameter>
, if any.</para>
<refsect3 id="g-drive-get-sort-key.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>A <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-drive-get-sort-key.returns" role="returns">
<title>Returns</title>
<para>Sorting key for <parameter>drive</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such key is available. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>

</refsect1>
<refsect1 id="GDrive.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GDrive-struct" role="struct">
<title>GDrive</title>
<indexterm zone="GDrive-struct"><primary sortas="Drive">GDrive</primary></indexterm>
<programlisting language="C">typedef struct _GDrive GDrive;</programlisting>
<para>Opaque drive object.</para>
</refsect2>
<refsect2 id="GDriveIface" role="struct">
<title>struct GDriveIface</title>
<indexterm zone="GDriveIface"><primary sortas="DriveIface">GDriveIface</primary></indexterm>
<programlisting language="C">struct GDriveIface {
  GTypeInterface g_iface;

  /* signals */
  void     (* changed)                  (GDrive              *drive);
  void     (* disconnected)             (GDrive              *drive);
  void     (* eject_button)             (GDrive              *drive);

  /* Virtual Table */
  char *   (* get_name)                 (GDrive              *drive);
  GIcon *  (* get_icon)                 (GDrive              *drive);
  gboolean (* has_volumes)              (GDrive              *drive);
  GList *  (* get_volumes)              (GDrive              *drive);
  gboolean (* is_media_removable)       (GDrive              *drive);
  gboolean (* has_media)                (GDrive              *drive);
  gboolean (* is_media_check_automatic) (GDrive              *drive);
  gboolean (* can_eject)                (GDrive              *drive);
  gboolean (* can_poll_for_media)       (GDrive              *drive);
  void     (* eject)                    (GDrive              *drive,
                                         GMountUnmountFlags   flags,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean (* eject_finish)             (GDrive              *drive,
                                         GAsyncResult        *result,
                                         GError             **error);
  void     (* poll_for_media)           (GDrive              *drive,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean (* poll_for_media_finish)    (GDrive              *drive,
                                         GAsyncResult        *result,
                                         GError             **error);

  char *   (* get_identifier)           (GDrive              *drive,
                                         const char          *kind);
  char **  (* enumerate_identifiers)    (GDrive              *drive);

  GDriveStartStopType (* get_start_stop_type) (GDrive        *drive);

  gboolean (* can_start)                (GDrive              *drive);
  gboolean (* can_start_degraded)       (GDrive              *drive);
  void     (* start)                    (GDrive              *drive,
                                         GDriveStartFlags     flags,
                                         GMountOperation     *mount_operation,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean (* start_finish)             (GDrive              *drive,
                                         GAsyncResult        *result,
                                         GError             **error);

  gboolean (* can_stop)                 (GDrive              *drive);
  void     (* stop)                     (GDrive              *drive,
                                         GMountUnmountFlags   flags,
                                         GMountOperation     *mount_operation,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean (* stop_finish)              (GDrive              *drive,
                                         GAsyncResult        *result,
                                         GError             **error);
  /* signal, not VFunc */
  void     (* stop_button)              (GDrive              *drive);

  void        (* eject_with_operation)      (GDrive              *drive,
                                             GMountUnmountFlags   flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* eject_with_operation_finish) (GDrive            *drive,
                                             GAsyncResult        *result,
                                             GError             **error);

  const gchar * (* get_sort_key)        (GDrive              *drive);
  GIcon *       (* get_symbolic_icon)   (GDrive              *drive);
  gboolean      (* is_removable)        (GDrive              *drive);
};
</programlisting>
<para>Interface for creating <link linkend="GDrive"><type>GDrive</type></link> implementations.</para>
<refsect3 id="GDriveIface.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.changed">changed</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Signal emitted when the drive is changed.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.disconnected">disconnected</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>The removed signal that is emitted when the <link linkend="GDrive"><type>GDrive</type></link> have been disconnected. If the recipient is holding references to the object they should release them so the object can be finalized.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.eject-button">eject_button</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Signal emitted when the physical eject button (if any) of a drive have been pressed.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.get-name">get_name</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns the name for the given <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.get-icon">get_icon</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns a <link linkend="GIcon"><type>GIcon</type></link> for the given <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.has-volumes">has_volumes</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GDrive"><type>GDrive</type></link> has mountable volumes.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.get-volumes">get_volumes</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns a list <link linkend="GList"><type>GList</type></link> of <link linkend="GVolume"><type>GVolume</type></link> for the <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.is-media-removable">is_media_removable</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GDrive"><type>GDrive</type></link> supports removal and insertion of media.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.has-media">has_media</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GDrive"><type>GDrive</type></link> has media inserted.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.is-media-check-automatic">is_media_check_automatic</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GDrive"><type>GDrive</type></link> is capabable of automatically detecting media changes.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.can-eject">can_eject</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GDrive"><type>GDrive</type></link> can eject media.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.can-poll-for-media">can_poll_for_media</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GDrive"><type>GDrive</type></link> is capable of manually polling for media change.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.eject">eject</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Ejects a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.eject-finish">eject_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an eject operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.poll-for-media">poll_for_media</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Poll for media insertion/removal on a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.poll-for-media-finish">poll_for_media_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes a media poll operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.get-identifier">get_identifier</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns the identifier of the given kind, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
the <link linkend="GDrive"><type>GDrive</type></link> doesn't have one.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.enumerate-identifiers">enumerate_identifiers</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns an array strings listing the kinds
of identifiers which the <link linkend="GDrive"><type>GDrive</type></link> has.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.get-start-stop-type">get_start_stop_type</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GDriveStartStopType"><type>GDriveStartStopType</type></link> with details about starting/stopping the drive. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.can-start">can_start</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a <link linkend="GDrive"><type>GDrive</type></link> can be started. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.can-start-degraded">can_start_degraded</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a <link linkend="GDrive"><type>GDrive</type></link> can be started degraded. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.start">start</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts a <link linkend="GDrive"><type>GDrive</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.start-finish">start_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes a start operation. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.can-stop">can_stop</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a <link linkend="GDrive"><type>GDrive</type></link> can be stopped. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.stop">stop</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Stops a <link linkend="GDrive"><type>GDrive</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.stop-finish">stop_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes a stop operation. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.stop-button">stop_button</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Signal emitted when the physical stop button (if any) of a drive have been pressed. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.eject-with-operation">eject_with_operation</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts ejecting a <link linkend="GDrive"><type>GDrive</type></link> using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.eject-with-operation-finish">eject_with_operation_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an eject operation using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.get-sort-key">get_sort_key</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a key used for sorting <link linkend="GDrive"><type>GDrive</type></link> instances or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such key exists. Since 2.32.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.get-symbolic-icon">get_symbolic_icon</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns a symbolic <link linkend="GIcon"><type>GIcon</type></link> for the given <link linkend="GDrive"><type>GDrive</type></link>. Since 2.34.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GDriveIface.is-removable">is_removable</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GDrive"><type>GDrive</type></link> and/or its media is considered removable by the user. Since 2.50.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="GDriveStartFlags" role="enum" condition="since:2.22">
<title>enum GDriveStartFlags</title>
<indexterm zone="GDriveStartFlags" role="2.22"><primary sortas="DriveStartFlags">GDriveStartFlags</primary></indexterm>
<para>Flags used when starting a drive.</para>
<refsect3 id="GDriveStartFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-DRIVE-START-NONE:CAPS">G_DRIVE_START_NONE</para></entry>
<entry role="enum_member_description"><para>No flags set.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="GDriveStartStopType" role="enum" condition="since:2.22">
<title>enum GDriveStartStopType</title>
<indexterm zone="GDriveStartStopType" role="2.22"><primary sortas="DriveStartStopType">GDriveStartStopType</primary></indexterm>
<para>Enumeration describing how a drive can be started/stopped.</para>
<refsect3 id="GDriveStartStopType.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-DRIVE-START-STOP-TYPE-UNKNOWN:CAPS">G_DRIVE_START_STOP_TYPE_UNKNOWN</para></entry>
<entry role="enum_member_description"><para>Unknown or drive doesn't support
   start/stop.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-DRIVE-START-STOP-TYPE-SHUTDOWN:CAPS">G_DRIVE_START_STOP_TYPE_SHUTDOWN</para></entry>
<entry role="enum_member_description"><para>The stop method will physically
   shut down the drive and e.g. power down the port the drive is
   attached to.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-DRIVE-START-STOP-TYPE-NETWORK:CAPS">G_DRIVE_START_STOP_TYPE_NETWORK</para></entry>
<entry role="enum_member_description"><para>The start/stop methods are used
   for connecting/disconnect to the drive over the network.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-DRIVE-START-STOP-TYPE-MULTIDISK:CAPS">G_DRIVE_START_STOP_TYPE_MULTIDISK</para></entry>
<entry role="enum_member_description"><para>The start/stop methods will
   assemble/disassemble a virtual drive from several physical
   drives.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-DRIVE-START-STOP-TYPE-PASSWORD:CAPS">G_DRIVE_START_STOP_TYPE_PASSWORD</para></entry>
<entry role="enum_member_description"><para>The start/stop methods will
   unlock/lock the disk (for example using the ATA &lt;quote>SECURITY
   UNLOCK DEVICE&lt;/quote> command)</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="G-DRIVE-IDENTIFIER-KIND-UNIX-DEVICE:CAPS" role="macro" condition="since:2.58">
<title>G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE</title>
<indexterm zone="G-DRIVE-IDENTIFIER-KIND-UNIX-DEVICE:CAPS" role="2.58"><primary sortas="DRIVE_IDENTIFIER_KIND_UNIX_DEVICE">G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE</primary></indexterm>
<programlisting language="C">#define G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE "unix-device"
</programlisting>
<para>The string used to obtain a Unix device path with <link linkend="g-drive-get-identifier"><function>g_drive_get_identifier()</function></link>.</para>
<para role="since">Since: <link linkend="api-index-2.58">2.58</link></para></refsect2>

</refsect1>
<refsect1 id="GDrive.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GDrive-changed" role="signal"><title>The <literal>“changed”</literal> signal</title>
<indexterm zone="GDrive-changed"><primary sortas="Drive::changed">GDrive::changed</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GDrive"><type>GDrive</type></link>  *drive,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>Emitted when the drive's state has changed.</para>
<refsect3 id="GDrive-changed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2><refsect2 id="GDrive-disconnected" role="signal"><title>The <literal>“disconnected”</literal> signal</title>
<indexterm zone="GDrive-disconnected"><primary sortas="Drive::disconnected">GDrive::disconnected</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GDrive"><type>GDrive</type></link>  *drive,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>This signal is emitted when the <link linkend="GDrive"><type>GDrive</type></link> have been
disconnected. If the recipient is holding references to the
object they should release them so the object can be
finalized.</para>
<refsect3 id="GDrive-disconnected.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2><refsect2 id="GDrive-eject-button" role="signal"><title>The <literal>“eject-button”</literal> signal</title>
<indexterm zone="GDrive-eject-button"><primary sortas="Drive::eject-button">GDrive::eject-button</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GDrive"><type>GDrive</type></link>  *drive,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>Emitted when the physical eject button (if any) of a drive has
been pressed.</para>
<refsect3 id="GDrive-eject-button.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2><refsect2 id="GDrive-stop-button" role="signal"><title>The <literal>“stop-button”</literal> signal</title>
<indexterm zone="GDrive-stop-button" role="2.22"><primary sortas="Drive::stop-button">GDrive::stop-button</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GDrive"><type>GDrive</type></link>  *drive,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>Emitted when the physical stop button (if any) of a drive has
been pressed.</para>
<refsect3 id="GDrive-stop-button.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>drive</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
<para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
</refsect1>

</refentry>
