<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GVolume">
<refmeta>
<refentrytitle role="top_of_page" id="GVolume.top_of_page">GVolume</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GVolume</refname>
<refpurpose>Volume management</refpurpose>
</refnamediv>

<refsect1 id="GVolume.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-name">g_volume_get_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-uuid">g_volume_get_uuid</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-icon">g_volume_get_icon</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-symbolic-icon">g_volume_get_symbolic_icon</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GDrive"><returnvalue>GDrive</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-drive">g_volume_get_drive</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GMount"><returnvalue>GMount</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-mount">g_volume_get_mount</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-can-mount">g_volume_can_mount</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-should-automount">g_volume_should_automount</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-activation-root">g_volume_get_activation_root</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-mount">g_volume_mount</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-mount-finish">g_volume_mount_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-can-eject">g_volume_can_eject</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-eject">g_volume_eject</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-eject-finish">g_volume_eject_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-eject-with-operation">g_volume_eject_with_operation</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-volume-eject-with-operation-finish">g_volume_eject_with_operation_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-volume-enumerate-identifiers">g_volume_enumerate_identifiers</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-identifier">g_volume_get_identifier</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-volume-get-sort-key">g_volume_get_sort_key</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GVolume.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="signals_return" colwidth="150px"/>
<colspec colname="signals_name" colwidth="300px"/>
<colspec colname="signals_flags" colwidth="200px"/>
<tbody>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GVolume-changed">changed</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GVolume-removed">removed</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GVolume.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GVolume-struct">GVolume</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GVolumeIface">GVolumeIface</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="G-VOLUME-IDENTIFIER-KIND-HAL-UDI:CAPS">G_VOLUME_IDENTIFIER_KIND_HAL_UDI</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="G-VOLUME-IDENTIFIER-KIND-LABEL:CAPS">G_VOLUME_IDENTIFIER_KIND_LABEL</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="G-VOLUME-IDENTIFIER-KIND-NFS-MOUNT:CAPS">G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="G-VOLUME-IDENTIFIER-KIND-UNIX-DEVICE:CAPS">G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="G-VOLUME-IDENTIFIER-KIND-UUID:CAPS">G_VOLUME_IDENTIFIER_KIND_UUID</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="G-VOLUME-IDENTIFIER-KIND-CLASS:CAPS">G_VOLUME_IDENTIFIER_KIND_CLASS</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GVolume.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GInterface">GInterface</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GVolume
</screen>
</refsect1>
<refsect1 id="GVolume.prerequisites" role="prerequisites">
<title role="prerequisites.title">Prerequisites</title>
<para>
GVolume requires
 <link linkend="GObject">GObject</link>.</para>

</refsect1>

<refsect1 id="GVolume.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GVolume.description" role="desc">
<title role="desc.title">Description</title>
<para>The <link linkend="GVolume"><type>GVolume</type></link> interface represents user-visible objects that can be
mounted. Note, when porting from GnomeVFS, <link linkend="GVolume"><type>GVolume</type></link> is the moral
equivalent of <link linkend="GnomeVFSDrive"><type>GnomeVFSDrive</type></link>.</para>
<para>Mounting a <link linkend="GVolume"><type>GVolume</type></link> instance is an asynchronous operation. For more
information about asynchronous operations, see <link linkend="GAsyncResult"><type>GAsyncResult</type></link> and
<link linkend="GTask"><type>GTask</type></link>. To mount a <link linkend="GVolume"><type>GVolume</type></link>, first call <link linkend="g-volume-mount"><function>g_volume_mount()</function></link> with (at
least) the <link linkend="GVolume"><type>GVolume</type></link> instance, optionally a <link linkend="GMountOperation"><type>GMountOperation</type></link> object
and a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>.</para>
<para>Typically, one will only want to pass <link linkend="NULL:CAPS"><literal>NULL</literal></link> for the
<link linkend="GMountOperation"><type>GMountOperation</type></link> if automounting all volumes when a desktop session
starts since it's not desirable to put up a lot of dialogs asking
for credentials.</para>
<para>The callback will be fired when the operation has resolved (either
with success or failure), and a <link linkend="GAsyncReady"><type>GAsyncReady</type></link> structure will be
passed to the callback.  That callback should then call
<link linkend="g-volume-mount-finish"><function>g_volume_mount_finish()</function></link> with the <link linkend="GVolume"><type>GVolume</type></link> instance and the
<link linkend="GAsyncReady"><type>GAsyncReady</type></link> data to see if the operation was completed
successfully.  If an <parameter>error</parameter>
 is present when <link linkend="g-volume-mount-finish"><function>g_volume_mount_finish()</function></link>
is called, then it will be filled with any error information.</para>
<refsect3 id="volume-identifier"><title>Volume Identifiers</title><para>It is sometimes necessary to directly access the underlying
operating system object behind a volume (e.g. for passing a volume
to an application via the commandline). For this purpose, GIO
allows to obtain an 'identifier' for the volume. There can be
different kinds of identifiers, such as Hal UDIs, filesystem labels,
traditional Unix devices (e.g. <literal>/dev/sda2</literal>), UUIDs. GIO uses predefined
strings as names for the different kinds of identifiers:
<link linkend="G-VOLUME-IDENTIFIER-KIND-UUID:CAPS"><type>G_VOLUME_IDENTIFIER_KIND_UUID</type></link>, <link linkend="G-VOLUME-IDENTIFIER-KIND-LABEL:CAPS"><type>G_VOLUME_IDENTIFIER_KIND_LABEL</type></link>, etc.
Use <link linkend="g-volume-get-identifier"><function>g_volume_get_identifier()</function></link> to obtain an identifier for a volume.</para>
<para>Note that <link linkend="G-VOLUME-IDENTIFIER-KIND-HAL-UDI:CAPS"><type>G_VOLUME_IDENTIFIER_KIND_HAL_UDI</type></link> will only be available
when the gvfs hal volume monitor is in use. Other volume monitors
will generally be able to provide the <link linkend="G-VOLUME-IDENTIFIER-KIND-UNIX-DEVICE:CAPS"><type>G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE</type></link>
identifier, which can be used to obtain a hal device by means of
<link linkend="libhal-manager-find-device-string-match"><function>libhal_manager_find_device_string_match()</function></link>.</para>
</refsect3>

</refsect1>
<refsect1 id="GVolume.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-volume-get-name" role="function">
<title>g_volume_get_name&#160;()</title>
<indexterm zone="g-volume-get-name"><primary sortas="volume_get_name">g_volume_get_name</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_volume_get_name (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the name of <parameter>volume</parameter>
.</para>
<refsect3 id="g-volume-get-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-name.returns" role="returns">
<title>Returns</title>
<para> the name for the given <parameter>volume</parameter>
. The returned string should
be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer needed.</para>
</refsect3></refsect2>
<refsect2 id="g-volume-get-uuid" role="function">
<title>g_volume_get_uuid&#160;()</title>
<indexterm zone="g-volume-get-uuid"><primary sortas="volume_get_uuid">g_volume_get_uuid</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_volume_get_uuid (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the UUID for the <parameter>volume</parameter>
. The reference is typically based on
the file system UUID for the volume in question and should be
considered an opaque string. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> if there is no UUID
available.</para>
<refsect3 id="g-volume-get-uuid.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-uuid.returns" role="returns">
<title>Returns</title>
<para>the UUID for <parameter>volume</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no UUID
can be computed.
The returned string should be freed with <link linkend="g-free"><function>g_free()</function></link>
when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-volume-get-icon" role="function">
<title>g_volume_get_icon&#160;()</title>
<indexterm zone="g-volume-get-icon"><primary sortas="volume_get_icon">g_volume_get_icon</primary></indexterm>
<programlisting language="C"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
g_volume_get_icon (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the icon for <parameter>volume</parameter>
.</para>
<refsect3 id="g-volume-get-icon.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-icon.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GIcon"><type>GIcon</type></link>.
The returned object should be unreffed with <link linkend="g-object-unref"><function>g_object_unref()</function></link>
when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-volume-get-symbolic-icon" role="function" condition="since:2.34">
<title>g_volume_get_symbolic_icon&#160;()</title>
<indexterm zone="g-volume-get-symbolic-icon" role="2.34"><primary sortas="volume_get_symbolic_icon">g_volume_get_symbolic_icon</primary></indexterm>
<programlisting language="C"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
g_volume_get_symbolic_icon (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the symbolic icon for <parameter>volume</parameter>
.</para>
<refsect3 id="g-volume-get-symbolic-icon.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-symbolic-icon.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GIcon"><type>GIcon</type></link>.
The returned object should be unreffed with <link linkend="g-object-unref"><function>g_object_unref()</function></link>
when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.34">2.34</link></para></refsect2>
<refsect2 id="g-volume-get-drive" role="function">
<title>g_volume_get_drive&#160;()</title>
<indexterm zone="g-volume-get-drive"><primary sortas="volume_get_drive">g_volume_get_drive</primary></indexterm>
<programlisting language="C"><link linkend="GDrive"><returnvalue>GDrive</returnvalue></link>&#160;*
g_volume_get_drive (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the drive for the <parameter>volume</parameter>
.</para>
<refsect3 id="g-volume-get-drive.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-drive.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GDrive"><type>GDrive</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>volume</parameter>
is not
associated with a drive. The returned object should be unreffed
with <link linkend="g-object-unref"><function>g_object_unref()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-volume-get-mount" role="function">
<title>g_volume_get_mount&#160;()</title>
<indexterm zone="g-volume-get-mount"><primary sortas="volume_get_mount">g_volume_get_mount</primary></indexterm>
<programlisting language="C"><link linkend="GMount"><returnvalue>GMount</returnvalue></link>&#160;*
g_volume_get_mount (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the mount for the <parameter>volume</parameter>
.</para>
<refsect3 id="g-volume-get-mount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-mount.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GMount"><type>GMount</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>volume</parameter>
isn't mounted.
The returned object should be unreffed with <link linkend="g-object-unref"><function>g_object_unref()</function></link>
when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-volume-can-mount" role="function">
<title>g_volume_can_mount&#160;()</title>
<indexterm zone="g-volume-can-mount"><primary sortas="volume_can_mount">g_volume_can_mount</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_volume_can_mount (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Checks if a volume can be mounted.</para>
<refsect3 id="g-volume-can-mount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-can-mount.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>volume</parameter>
can be mounted. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise</para>
</refsect3></refsect2>
<refsect2 id="g-volume-should-automount" role="function">
<title>g_volume_should_automount&#160;()</title>
<indexterm zone="g-volume-should-automount"><primary sortas="volume_should_automount">g_volume_should_automount</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_volume_should_automount (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Returns whether the volume should be automatically mounted.</para>
<refsect3 id="g-volume-should-automount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-should-automount.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the volume should be automatically mounted</para>
</refsect3></refsect2>
<refsect2 id="g-volume-get-activation-root" role="function" condition="since:2.18">
<title>g_volume_get_activation_root&#160;()</title>
<indexterm zone="g-volume-get-activation-root" role="2.18"><primary sortas="volume_get_activation_root">g_volume_get_activation_root</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_volume_get_activation_root (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the activation root for a <link linkend="GVolume"><type>GVolume</type></link> if it is known ahead of
mount time. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> otherwise. If not <link linkend="NULL:CAPS"><literal>NULL</literal></link> and if <parameter>volume</parameter>

is mounted, then the result of <link linkend="g-mount-get-root"><function>g_mount_get_root()</function></link> on the
<link linkend="GMount"><type>GMount</type></link> object obtained from <link linkend="g-volume-get-mount"><function>g_volume_get_mount()</function></link> will always
either be equal or a prefix of what this function returns. In
other words, in code</para>
<informalexample><programlisting role="example"><![CDATA[
  GMount *mount;
  GFile *mount_root
  GFile *volume_activation_root;

  mount = g_volume_get_mount (volume); // mounted, so never NULL
  mount_root = g_mount_get_root (mount);
  volume_activation_root = g_volume_get_activation_root (volume); // assume not NULL
]]></programlisting></informalexample>
<para>
then the expression</para>
<informalexample><programlisting role="example"><![CDATA[
  (g_file_has_prefix (volume_activation_root, mount_root) ||
   g_file_equal (volume_activation_root, mount_root))
]]></programlisting></informalexample>
<para>
will always be <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>.</para>
<para>Activation roots are typically used in <link linkend="GVolumeMonitor"><type>GVolumeMonitor</type></link>
implementations to find the underlying mount to shadow, see
<link linkend="g-mount-is-shadowed"><function>g_mount_is_shadowed()</function></link> for more details.</para>
<refsect3 id="g-volume-get-activation-root.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-activation-root.returns" role="returns">
<title>Returns</title>
<para>the activation root of <parameter>volume</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. Use <link linkend="g-object-unref"><function>g_object_unref()</function></link> to free. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.18">2.18</link></para></refsect2>
<refsect2 id="g-volume-mount" role="function">
<title>g_volume_mount&#160;()</title>
<indexterm zone="g-volume-mount"><primary sortas="volume_mount">g_volume_mount</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_volume_mount (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>,
                <parameter><link linkend="GMountMountFlags"><type>GMountMountFlags</type></link> flags</parameter>,
                <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Mounts a volume. This is an asynchronous operation, and is
finished by calling <link linkend="g-volume-mount-finish"><function>g_volume_mount_finish()</function></link> with the <parameter>volume</parameter>

and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> returned in the <parameter>callback</parameter>
.</para>
<para>Virtual: mount_fn</para>
<refsect3 id="g-volume-mount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data that gets passed to <parameter>callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-volume-mount-finish" role="function">
<title>g_volume_mount_finish&#160;()</title>
<indexterm zone="g-volume-mount-finish"><primary sortas="volume_mount_finish">g_volume_mount_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_volume_mount_finish (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>,
                       <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                       <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes mounting a volume. If any errors occurred during the operation,
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<para>If the mount operation succeeded, <link linkend="g-volume-get-mount"><function>g_volume_get_mount()</function></link> on <parameter>volume</parameter>

is guaranteed to return the mount right after calling this
function; there's no need to listen for the 'mount-added' signal on
<link linkend="GVolumeMonitor"><type>GVolumeMonitor</type></link>.</para>
<refsect3 id="g-volume-mount-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store an error, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-mount-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if operation failed</para>
</refsect3></refsect2>
<refsect2 id="g-volume-can-eject" role="function">
<title>g_volume_can_eject&#160;()</title>
<indexterm zone="g-volume-can-eject"><primary sortas="volume_can_eject">g_volume_can_eject</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_volume_can_eject (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Checks if a volume can be ejected.</para>
<refsect3 id="g-volume-can-eject.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-can-eject.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>volume</parameter>
can be ejected. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise</para>
</refsect3></refsect2>
<refsect2 id="g-volume-eject" role="function" condition="deprecated:2.22: Use g_volume_eject_with_operation() instead.">
<title>g_volume_eject&#160;()</title>
<indexterm zone="g-volume-eject" role="deprecated"><primary sortas="volume_eject">g_volume_eject</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_volume_eject (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>,
                <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<warning><para><literal>g_volume_eject</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-volume-eject-with-operation"><function>g_volume_eject_with_operation()</function></link> instead.</para>
</warning>
<para>Ejects a volume. This is an asynchronous operation, and is
finished by calling <link linkend="g-volume-eject-finish"><function>g_volume_eject_finish()</function></link> with the <parameter>volume</parameter>

and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> returned in the <parameter>callback</parameter>
.</para>
<refsect3 id="g-volume-eject.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the unmount if required for eject</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data that gets passed to <parameter>callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-volume-eject-finish" role="function" condition="deprecated:2.22: Use g_volume_eject_with_operation_finish() instead.">
<title>g_volume_eject_finish&#160;()</title>
<indexterm zone="g-volume-eject-finish" role="deprecated"><primary sortas="volume_eject_finish">g_volume_eject_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_volume_eject_finish (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>,
                       <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                       <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<warning><para><literal>g_volume_eject_finish</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-volume-eject-with-operation-finish"><function>g_volume_eject_with_operation_finish()</function></link> instead.</para>
</warning>
<para>Finishes ejecting a volume. If any errors occurred during the operation,
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<refsect3 id="g-volume-eject-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>pointer to a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store an error, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-eject-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if operation failed</para>
</refsect3></refsect2>
<refsect2 id="g-volume-eject-with-operation" role="function" condition="since:2.22">
<title>g_volume_eject_with_operation&#160;()</title>
<indexterm zone="g-volume-eject-with-operation" role="2.22"><primary sortas="volume_eject_with_operation">g_volume_eject_with_operation</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_volume_eject_with_operation (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>,
                               <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                               <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                               <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                               <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Ejects a volume. This is an asynchronous operation, and is
finished by calling <link linkend="g-volume-eject-with-operation-finish"><function>g_volume_eject_with_operation_finish()</function></link> with the <parameter>volume</parameter>

and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> data returned in the <parameter>callback</parameter>
.</para>
<refsect3 id="g-volume-eject-with-operation.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the unmount if required for eject</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
avoid user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-volume-eject-with-operation-finish" role="function" condition="since:2.22">
<title>g_volume_eject_with_operation_finish&#160;()</title>
<indexterm zone="g-volume-eject-with-operation-finish" role="2.22"><primary sortas="volume_eject_with_operation_finish">g_volume_eject_with_operation_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_volume_eject_with_operation_finish (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>,
                                      <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes ejecting a volume. If any errors occurred during the operation,
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<refsect3 id="g-volume-eject-with-operation-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-eject-with-operation-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the volume was successfully ejected. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-volume-enumerate-identifiers" role="function">
<title>g_volume_enumerate_identifiers&#160;()</title>
<indexterm zone="g-volume-enumerate-identifiers"><primary sortas="volume_enumerate_identifiers">g_volume_enumerate_identifiers</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;**
g_volume_enumerate_identifiers (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the kinds of <link linkend="volume-identifier">identifiers</link> that <parameter>volume</parameter>
 has.
Use <link linkend="g-volume-get-identifier"><function>g_volume_get_identifier()</function></link> to obtain the identifiers themselves.</para>
<refsect3 id="g-volume-enumerate-identifiers.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-enumerate-identifiers.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated array
of strings containing kinds of identifiers. Use <link linkend="g-strfreev"><function>g_strfreev()</function></link> to free. </para>
<para><emphasis role="annotation">[<acronym>array</acronym> zero-terminated=1][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-volume-get-identifier" role="function">
<title>g_volume_get_identifier&#160;()</title>
<indexterm zone="g-volume-get-identifier"><primary sortas="volume_get_identifier">g_volume_get_identifier</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_volume_get_identifier (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>,
                         <parameter>const <link linkend="char"><type>char</type></link> *kind</parameter>);</programlisting>
<para>Gets the identifier of the given kind for <parameter>volume</parameter>
. 
See the <link linkend="volume-identifier">introduction</link> for more
information about volume identifiers.</para>
<refsect3 id="g-volume-get-identifier.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>kind</para></entry>
<entry role="parameter_description"><para>the kind of identifier to return</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-identifier.returns" role="returns">
<title>Returns</title>
<para>a newly allocated string containing the
requested identifier, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the <link linkend="GVolume"><type>GVolume</type></link>
doesn't have this kind of identifier. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-volume-get-sort-key" role="function" condition="since:2.32">
<title>g_volume_get_sort_key&#160;()</title>
<indexterm zone="g-volume-get-sort-key" role="2.32"><primary sortas="volume_get_sort_key">g_volume_get_sort_key</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
g_volume_get_sort_key (<parameter><link linkend="GVolume"><type>GVolume</type></link> *volume</parameter>);</programlisting>
<para>Gets the sort key for <parameter>volume</parameter>
, if any.</para>
<refsect3 id="g-volume-get-sort-key.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>volume</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVolume"><type>GVolume</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-volume-get-sort-key.returns" role="returns">
<title>Returns</title>
<para>Sorting key for <parameter>volume</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such key is available. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>

</refsect1>
<refsect1 id="GVolume.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GVolume-struct" role="struct">
<title>GVolume</title>
<indexterm zone="GVolume-struct"><primary sortas="Volume">GVolume</primary></indexterm>
<programlisting language="C">typedef struct _GVolume GVolume;</programlisting>
<para>Opaque mountable volume object.</para>
</refsect2>
<refsect2 id="GVolumeIface" role="struct">
<title>struct GVolumeIface</title>
<indexterm zone="GVolumeIface"><primary sortas="VolumeIface">GVolumeIface</primary></indexterm>
<programlisting language="C">struct GVolumeIface {
  GTypeInterface g_iface;

  /* signals */

  void        (* changed)               (GVolume             *volume);
  void        (* removed)               (GVolume             *volume);

  /* Virtual Table */

  char      * (* get_name)              (GVolume             *volume);
  GIcon     * (* get_icon)              (GVolume             *volume);
  char      * (* get_uuid)              (GVolume             *volume);
  GDrive    * (* get_drive)             (GVolume             *volume);
  GMount    * (* get_mount)             (GVolume             *volume);
  gboolean    (* can_mount)             (GVolume             *volume);
  gboolean    (* can_eject)             (GVolume             *volume);
  void        (* mount_fn)              (GVolume             *volume,
                                         GMountMountFlags     flags,
                                         GMountOperation     *mount_operation,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean    (* mount_finish)          (GVolume             *volume,
                                         GAsyncResult        *result,
                                         GError             **error);
  void        (* eject)                 (GVolume             *volume,
                                         GMountUnmountFlags   flags,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean    (* eject_finish)          (GVolume             *volume,
                                         GAsyncResult        *result,
                                         GError             **error);

  char      * (* get_identifier)        (GVolume             *volume,
                                         const char          *kind);
  char     ** (* enumerate_identifiers) (GVolume             *volume);

  gboolean    (* should_automount)      (GVolume             *volume);

  GFile     * (* get_activation_root)   (GVolume             *volume);

  void        (* eject_with_operation)      (GVolume             *volume,
                                             GMountUnmountFlags   flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* eject_with_operation_finish) (GVolume           *volume,
                                             GAsyncResult        *result,
                                             GError             **error);

  const gchar * (* get_sort_key)        (GVolume             *volume);
  GIcon       * (* get_symbolic_icon)   (GVolume             *volume);
};
</programlisting>
<para>Interface for implementing operations for mountable volumes.</para>
<refsect3 id="GVolumeIface.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.changed">changed</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Changed signal that is emitted when the volume's state has changed.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.removed">removed</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>The removed signal that is emitted when the <link linkend="GVolume"><type>GVolume</type></link> have been removed. If the recipient is holding references to the object they should release them so the object can be finalized.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-name">get_name</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a string containing the name of the <link linkend="GVolume"><type>GVolume</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-icon">get_icon</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GIcon"><type>GIcon</type></link> for the <link linkend="GVolume"><type>GVolume</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-uuid">get_uuid</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the UUID for the <link linkend="GVolume"><type>GVolume</type></link>. The reference is typically based on the file system UUID for the mount in question and should be considered an opaque string. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> if there is no UUID available.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-drive">get_drive</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GDrive"><type>GDrive</type></link> the volume is located on. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the <link linkend="GVolume"><type>GVolume</type></link> is not associated with a <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-mount">get_mount</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GMount"><type>GMount</type></link> representing the mounted volume. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the <link linkend="GVolume"><type>GVolume</type></link> is not mounted.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.can-mount">can_mount</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GVolume"><type>GVolume</type></link> can be mounted.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.can-eject">can_eject</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Checks if a <link linkend="GVolume"><type>GVolume</type></link> can be ejected.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.mount-fn">mount_fn</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Mounts a given <link linkend="GVolume"><type>GVolume</type></link>.
<link linkend="GVolume"><type>GVolume</type></link> implementations must emit the <link linkend="GMountOperation-aborted"><type>“aborted”</type></link>
signal before completing a mount operation that is aborted while
awaiting input from the user through a <link linkend="GMountOperation"><type>GMountOperation</type></link> instance.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.mount-finish">mount_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes a mount operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.eject">eject</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Ejects a given <link linkend="GVolume"><type>GVolume</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.eject-finish">eject_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an eject operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-identifier">get_identifier</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns the <link linkend="volume-identifier">identifier</link> of the given kind, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
the <link linkend="GVolume"><type>GVolume</type></link> doesn't have one.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.enumerate-identifiers">enumerate_identifiers</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns an array strings listing the kinds
of <link linkend="volume-identifier">identifiers</link> which the <link linkend="GVolume"><type>GVolume</type></link> has.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.should-automount">should_automount</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="GVolume"><type>GVolume</type></link> should be automatically mounted.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-activation-root">get_activation_root</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns the activation root for the <link linkend="GVolume"><type>GVolume</type></link> if it is known in advance or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
it is not known.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.eject-with-operation">eject_with_operation</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts ejecting a <link linkend="GVolume"><type>GVolume</type></link> using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.eject-with-operation-finish">eject_with_operation_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an eject operation using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-sort-key">get_sort_key</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a key used for sorting <link linkend="GVolume"><type>GVolume</type></link> instance or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such key exists. Since 2.32.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GVolumeIface.get-symbolic-icon">get_symbolic_icon</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a symbolic <link linkend="GIcon"><type>GIcon</type></link> for the <link linkend="GVolume"><type>GVolume</type></link>. Since 2.34.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="G-VOLUME-IDENTIFIER-KIND-HAL-UDI:CAPS" role="macro" condition="deprecated:2.58: Do not use, HAL is deprecated.">
<title>G_VOLUME_IDENTIFIER_KIND_HAL_UDI</title>
<indexterm zone="G-VOLUME-IDENTIFIER-KIND-HAL-UDI:CAPS" role="deprecated"><primary sortas="VOLUME_IDENTIFIER_KIND_HAL_UDI">G_VOLUME_IDENTIFIER_KIND_HAL_UDI</primary></indexterm>
<programlisting language="C">#define G_VOLUME_IDENTIFIER_KIND_HAL_UDI "hal-udi"
</programlisting>
<warning><para><literal>G_VOLUME_IDENTIFIER_KIND_HAL_UDI</literal> has been deprecated since version 2.58 and should not be used in newly-written code.</para> <para>Do not use, HAL is deprecated.</para>
</warning>
<para>The string used to obtain a Hal UDI with <link linkend="g-volume-get-identifier"><function>g_volume_get_identifier()</function></link>.</para>
</refsect2>
<refsect2 id="G-VOLUME-IDENTIFIER-KIND-LABEL:CAPS" role="macro">
<title>G_VOLUME_IDENTIFIER_KIND_LABEL</title>
<indexterm zone="G-VOLUME-IDENTIFIER-KIND-LABEL:CAPS"><primary sortas="VOLUME_IDENTIFIER_KIND_LABEL">G_VOLUME_IDENTIFIER_KIND_LABEL</primary></indexterm>
<programlisting language="C">#define G_VOLUME_IDENTIFIER_KIND_LABEL "label"
</programlisting>
<para>The string used to obtain a filesystem label with <link linkend="g-volume-get-identifier"><function>g_volume_get_identifier()</function></link>.</para>
</refsect2>
<refsect2 id="G-VOLUME-IDENTIFIER-KIND-NFS-MOUNT:CAPS" role="macro">
<title>G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT</title>
<indexterm zone="G-VOLUME-IDENTIFIER-KIND-NFS-MOUNT:CAPS"><primary sortas="VOLUME_IDENTIFIER_KIND_NFS_MOUNT">G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT</primary></indexterm>
<programlisting language="C">#define G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT "nfs-mount"
</programlisting>
<para>The string used to obtain a NFS mount with <link linkend="g-volume-get-identifier"><function>g_volume_get_identifier()</function></link>.</para>
</refsect2>
<refsect2 id="G-VOLUME-IDENTIFIER-KIND-UNIX-DEVICE:CAPS" role="macro" condition="deprecated:">
<title>G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE</title>
<indexterm zone="G-VOLUME-IDENTIFIER-KIND-UNIX-DEVICE:CAPS" role="deprecated"><primary sortas="VOLUME_IDENTIFIER_KIND_UNIX_DEVICE">G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE</primary></indexterm>
<programlisting language="C">#define G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE "unix-device"
</programlisting>
<warning><para><literal>G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>The string used to obtain a Unix device path with <link linkend="g-volume-get-identifier"><function>g_volume_get_identifier()</function></link>.</para>
</refsect2>
<refsect2 id="G-VOLUME-IDENTIFIER-KIND-UUID:CAPS" role="macro">
<title>G_VOLUME_IDENTIFIER_KIND_UUID</title>
<indexterm zone="G-VOLUME-IDENTIFIER-KIND-UUID:CAPS"><primary sortas="VOLUME_IDENTIFIER_KIND_UUID">G_VOLUME_IDENTIFIER_KIND_UUID</primary></indexterm>
<programlisting language="C">#define G_VOLUME_IDENTIFIER_KIND_UUID "uuid"
</programlisting>
<para>The string used to obtain a UUID with <link linkend="g-volume-get-identifier"><function>g_volume_get_identifier()</function></link>.</para>
</refsect2>
<refsect2 id="G-VOLUME-IDENTIFIER-KIND-CLASS:CAPS" role="macro">
<title>G_VOLUME_IDENTIFIER_KIND_CLASS</title>
<indexterm zone="G-VOLUME-IDENTIFIER-KIND-CLASS:CAPS"><primary sortas="VOLUME_IDENTIFIER_KIND_CLASS">G_VOLUME_IDENTIFIER_KIND_CLASS</primary></indexterm>
<programlisting language="C">#define G_VOLUME_IDENTIFIER_KIND_CLASS "class"
</programlisting>
<para>The string used to obtain the volume class with <link linkend="g-volume-get-identifier"><function>g_volume_get_identifier()</function></link>.</para>
<para>Known volume classes include <literal>device</literal> and <literal>network</literal>. Other classes may
be added in the future.</para>
<para>This is intended to be used by applications to classify <link linkend="GVolume"><type>GVolume</type></link>
instances into different sections - for example a file manager or
file chooser can use this information to show <literal>network</literal> volumes under
a "Network" heading and <literal>device</literal> volumes under a "Devices" heading.</para>
</refsect2>

</refsect1>
<refsect1 id="GVolume.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GVolume-changed" role="signal"><title>The <literal>“changed”</literal> signal</title>
<indexterm zone="GVolume-changed"><primary sortas="Volume::changed">GVolume::changed</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GVolume"><type>GVolume</type></link> *gvolume,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>Emitted when the volume has been changed.</para>
<refsect3 id="GVolume-changed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2><refsect2 id="GVolume-removed" role="signal"><title>The <literal>“removed”</literal> signal</title>
<indexterm zone="GVolume-removed"><primary sortas="Volume::removed">GVolume::removed</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GVolume"><type>GVolume</type></link> *gvolume,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>This signal is emitted when the <link linkend="GVolume"><type>GVolume</type></link> have been removed. If
the recipient is holding references to the object they should
release them so the object can be finalized.</para>
<refsect3 id="GVolume-removed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2>
</refsect1>

</refentry>
