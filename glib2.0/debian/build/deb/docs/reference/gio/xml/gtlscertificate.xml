<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GTlsCertificate">
<refmeta>
<refentrytitle role="top_of_page" id="GTlsCertificate.top_of_page">GTlsCertificate</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GTlsCertificate</refname>
<refpurpose>TLS certificate</refpurpose>
</refnamediv>

<refsect1 id="GTlsCertificate.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GTlsCertificate"><returnvalue>GTlsCertificate</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-tls-certificate-new-from-pem">g_tls_certificate_new_from_pem</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GTlsCertificate"><returnvalue>GTlsCertificate</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-tls-certificate-new-from-file">g_tls_certificate_new_from_file</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GTlsCertificate"><returnvalue>GTlsCertificate</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-tls-certificate-new-from-files">g_tls_certificate_new_from_files</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-tls-certificate-list-new-from-file">g_tls_certificate_list_new_from_file</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GTlsCertificate"><returnvalue>GTlsCertificate</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-tls-certificate-get-issuer">g_tls_certificate_get_issuer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GTlsCertificateFlags"><returnvalue>GTlsCertificateFlags</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-tls-certificate-verify">g_tls_certificate_verify</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-tls-certificate-is-same">g_tls_certificate_is_same</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GTlsCertificate.properties" role="properties">
<title role="properties.title">Properties</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="properties_type" colwidth="150px"/>
<colspec colname="properties_name" colwidth="300px"/>
<colspec colname="properties_flags" colwidth="200px"/>
<tbody>
<row><entry role="property_type"><link linkend="GByteArray"><type>GByteArray</type></link>&#160;*</entry><entry role="property_name"><link linkend="GTlsCertificate--certificate">certificate</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="GTlsCertificate--certificate-pem">certificate-pem</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="GTlsCertificate"><type>GTlsCertificate</type></link>&#160;*</entry><entry role="property_name"><link linkend="GTlsCertificate--issuer">issuer</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="GByteArray"><type>GByteArray</type></link>&#160;*</entry><entry role="property_name"><link linkend="GTlsCertificate--private-key">private-key</link></entry><entry role="property_flags">Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="GTlsCertificate--private-key-pem">private-key-pem</link></entry><entry role="property_flags">Write / Construct Only</entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GTlsCertificate.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GTlsCertificate-struct">GTlsCertificate</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GTlsCertificate.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GTlsCertificate
</screen>
</refsect1>

<refsect1 id="GTlsCertificate.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GTlsCertificate.description" role="desc">
<title role="desc.title">Description</title>
<para>A certificate used for TLS authentication and encryption.
This can represent either a certificate only (eg, the certificate
received by a client from a server), or the combination of
a certificate and a private key (which is needed when acting as a
<link linkend="GTlsServerConnection"><type>GTlsServerConnection</type></link>).</para>

</refsect1>
<refsect1 id="GTlsCertificate.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-tls-certificate-new-from-pem" role="function" condition="since:2.28">
<title>g_tls_certificate_new_from_pem&#160;()</title>
<indexterm zone="g-tls-certificate-new-from-pem" role="2.28"><primary sortas="tls_certificate_new_from_pem">g_tls_certificate_new_from_pem</primary></indexterm>
<programlisting language="C"><link linkend="GTlsCertificate"><returnvalue>GTlsCertificate</returnvalue></link>&#160;*
g_tls_certificate_new_from_pem (<parameter>const <link linkend="gchar"><type>gchar</type></link> *data</parameter>,
                                <parameter><link linkend="gssize"><type>gssize</type></link> length</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> from the PEM-encoded data in <parameter>data</parameter>
. If
<parameter>data</parameter>
 includes both a certificate and a private key, then the
returned certificate will include the private key data as well. (See
the <link linkend="GTlsCertificate--private-key-pem"><type>“private-key-pem”</type></link> property for information about
supported formats.)</para>
<para>The returned certificate will be the first certificate found in
<parameter>data</parameter>
. As of GLib 2.44, if <parameter>data</parameter>
 contains more certificates it will
try to load a certificate chain. All certificates will be verified in
the order found (top-level certificate should be the last one in the
file) and the <link linkend="GTlsCertificate--issuer"><type>“issuer”</type></link> property of each certificate
will be set accordingly if the verification succeeds. If any
certificate in the chain cannot be verified, the first certificate in
the file will still be returned.</para>
<refsect3 id="g-tls-certificate-new-from-pem.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>PEM-encoded certificate data</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>length</para></entry>
<entry role="parameter_description"><para>the length of <parameter>data</parameter>
, or -1 if it's 0-terminated.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-tls-certificate-new-from-pem.returns" role="returns">
<title>Returns</title>
<para> the new certificate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>data</parameter>
is invalid</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-tls-certificate-new-from-file" role="function" condition="since:2.28">
<title>g_tls_certificate_new_from_file&#160;()</title>
<indexterm zone="g-tls-certificate-new-from-file" role="2.28"><primary sortas="tls_certificate_new_from_file">g_tls_certificate_new_from_file</primary></indexterm>
<programlisting language="C"><link linkend="GTlsCertificate"><returnvalue>GTlsCertificate</returnvalue></link>&#160;*
g_tls_certificate_new_from_file (<parameter>const <link linkend="gchar"><type>gchar</type></link> *file</parameter>,
                                 <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> from the PEM-encoded data in <parameter>file</parameter>
. The
returned certificate will be the first certificate found in <parameter>file</parameter>
. As
of GLib 2.44, if <parameter>file</parameter>
 contains more certificates it will try to load
a certificate chain. All certificates will be verified in the order
found (top-level certificate should be the last one in the file) and
the <link linkend="GTlsCertificate--issuer"><type>“issuer”</type></link> property of each certificate will be set
accordingly if the verification succeeds. If any certificate in the
chain cannot be verified, the first certificate in the file will
still be returned.</para>
<para>If <parameter>file</parameter>
 cannot be read or parsed, the function will return <link linkend="NULL:CAPS"><literal>NULL</literal></link> and
set <parameter>error</parameter>
. Otherwise, this behaves like
<link linkend="g-tls-certificate-new-from-pem"><function>g_tls_certificate_new_from_pem()</function></link>.</para>
<refsect3 id="g-tls-certificate-new-from-file.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>file containing a PEM-encoded certificate to import. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-tls-certificate-new-from-file.returns" role="returns">
<title>Returns</title>
<para> the new certificate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-tls-certificate-new-from-files" role="function" condition="since:2.28">
<title>g_tls_certificate_new_from_files&#160;()</title>
<indexterm zone="g-tls-certificate-new-from-files" role="2.28"><primary sortas="tls_certificate_new_from_files">g_tls_certificate_new_from_files</primary></indexterm>
<programlisting language="C"><link linkend="GTlsCertificate"><returnvalue>GTlsCertificate</returnvalue></link>&#160;*
g_tls_certificate_new_from_files (<parameter>const <link linkend="gchar"><type>gchar</type></link> *cert_file</parameter>,
                                  <parameter>const <link linkend="gchar"><type>gchar</type></link> *key_file</parameter>,
                                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> from the PEM-encoded data in <parameter>cert_file</parameter>

and <parameter>key_file</parameter>
. The returned certificate will be the first certificate
found in <parameter>cert_file</parameter>
. As of GLib 2.44, if <parameter>cert_file</parameter>
 contains more
certificates it will try to load a certificate chain. All
certificates will be verified in the order found (top-level
certificate should be the last one in the file) and the
<link linkend="GTlsCertificate--issuer"><type>“issuer”</type></link> property of each certificate will be set
accordingly if the verification succeeds. If any certificate in the
chain cannot be verified, the first certificate in the file will
still be returned.</para>
<para>If either file cannot be read or parsed, the function will return
<link linkend="NULL:CAPS"><literal>NULL</literal></link> and set <parameter>error</parameter>
. Otherwise, this behaves like
<link linkend="g-tls-certificate-new-from-pem"><function>g_tls_certificate_new_from_pem()</function></link>.</para>
<refsect3 id="g-tls-certificate-new-from-files.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cert_file</para></entry>
<entry role="parameter_description"><para>file containing one or more PEM-encoded
certificates to import. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>key_file</para></entry>
<entry role="parameter_description"><para>file containing a PEM-encoded private key
to import. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-tls-certificate-new-from-files.returns" role="returns">
<title>Returns</title>
<para> the new certificate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-tls-certificate-list-new-from-file" role="function" condition="since:2.28">
<title>g_tls_certificate_list_new_from_file&#160;()</title>
<indexterm zone="g-tls-certificate-list-new-from-file" role="2.28"><primary sortas="tls_certificate_list_new_from_file">g_tls_certificate_list_new_from_file</primary></indexterm>
<programlisting language="C"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
g_tls_certificate_list_new_from_file (<parameter>const <link linkend="gchar"><type>gchar</type></link> *file</parameter>,
                                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates one or more <link linkend="GTlsCertificates"><type>GTlsCertificates</type></link> from the PEM-encoded
data in <parameter>file</parameter>
. If <parameter>file</parameter>
 cannot be read or parsed, the function will
return <link linkend="NULL:CAPS"><literal>NULL</literal></link> and set <parameter>error</parameter>
. If <parameter>file</parameter>
 does not contain any
PEM-encoded certificates, this will return an empty list and not
set <parameter>error</parameter>
.</para>
<refsect3 id="g-tls-certificate-list-new-from-file.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>file containing PEM-encoded certificates to import. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-tls-certificate-list-new-from-file.returns" role="returns">
<title>Returns</title>
<para>a
<link linkend="GList"><type>GList</type></link> containing <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> objects. You must free the list
and its contents when you are done with it. </para>
<para><emphasis role="annotation">[<acronym>element-type</acronym> Gio.TlsCertificate][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-tls-certificate-get-issuer" role="function" condition="since:2.28">
<title>g_tls_certificate_get_issuer&#160;()</title>
<indexterm zone="g-tls-certificate-get-issuer" role="2.28"><primary sortas="tls_certificate_get_issuer">g_tls_certificate_get_issuer</primary></indexterm>
<programlisting language="C"><link linkend="GTlsCertificate"><returnvalue>GTlsCertificate</returnvalue></link>&#160;*
g_tls_certificate_get_issuer (<parameter><link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> *cert</parameter>);</programlisting>
<para>Gets the <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> representing <parameter>cert</parameter>
's issuer, if known</para>
<refsect3 id="g-tls-certificate-get-issuer.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cert</para></entry>
<entry role="parameter_description"><para>a <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-tls-certificate-get-issuer.returns" role="returns">
<title>Returns</title>
<para>The certificate of <parameter>cert</parameter>
's issuer,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>cert</parameter>
is self-signed or signed with an unknown
certificate. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-tls-certificate-verify" role="function" condition="since:2.28">
<title>g_tls_certificate_verify&#160;()</title>
<indexterm zone="g-tls-certificate-verify" role="2.28"><primary sortas="tls_certificate_verify">g_tls_certificate_verify</primary></indexterm>
<programlisting language="C"><link linkend="GTlsCertificateFlags"><returnvalue>GTlsCertificateFlags</returnvalue></link>
g_tls_certificate_verify (<parameter><link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> *cert</parameter>,
                          <parameter><link linkend="GSocketConnectable"><type>GSocketConnectable</type></link> *identity</parameter>,
                          <parameter><link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> *trusted_ca</parameter>);</programlisting>
<para>This verifies <parameter>cert</parameter>
 and returns a set of <link linkend="GTlsCertificateFlags"><type>GTlsCertificateFlags</type></link>
indicating any problems found with it. This can be used to verify a
certificate outside the context of making a connection, or to
check a certificate against a CA that is not part of the system
CA database.</para>
<para>If <parameter>identity</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, <parameter>cert</parameter>
's name(s) will be compared against
it, and <link linkend="G-TLS-CERTIFICATE-BAD-IDENTITY:CAPS"><literal>G_TLS_CERTIFICATE_BAD_IDENTITY</literal></link> will be set in the return
value if it does not match. If <parameter>identity</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, that bit will
never be set in the return value.</para>
<para>If <parameter>trusted_ca</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then <parameter>cert</parameter>
 (or one of the certificates
in its chain) must be signed by it, or else
<link linkend="G-TLS-CERTIFICATE-UNKNOWN-CA:CAPS"><literal>G_TLS_CERTIFICATE_UNKNOWN_CA</literal></link> will be set in the return value. If
<parameter>trusted_ca</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, that bit will never be set in the return
value.</para>
<para>(All other <link linkend="GTlsCertificateFlags"><type>GTlsCertificateFlags</type></link> values will always be set or unset
as appropriate.)</para>
<refsect3 id="g-tls-certificate-verify.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cert</para></entry>
<entry role="parameter_description"><para>a <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>identity</para></entry>
<entry role="parameter_description"><para>the expected peer identity. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>trusted_ca</para></entry>
<entry role="parameter_description"><para>the certificate of a trusted authority. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-tls-certificate-verify.returns" role="returns">
<title>Returns</title>
<para> the appropriate <link linkend="GTlsCertificateFlags"><type>GTlsCertificateFlags</type></link></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-tls-certificate-is-same" role="function" condition="since:2.34">
<title>g_tls_certificate_is_same&#160;()</title>
<indexterm zone="g-tls-certificate-is-same" role="2.34"><primary sortas="tls_certificate_is_same">g_tls_certificate_is_same</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_tls_certificate_is_same (<parameter><link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> *cert_one</parameter>,
                           <parameter><link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> *cert_two</parameter>);</programlisting>
<para>Check if two <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> objects represent the same certificate.
The raw DER byte data of the two certificates are checked for equality.
This has the effect that two certificates may compare equal even if
their <link linkend="GTlsCertificate--issuer"><type>“issuer”</type></link>, <link linkend="GTlsCertificate--private-key"><type>“private-key”</type></link>, or
<link linkend="GTlsCertificate--private-key-pem"><type>“private-key-pem”</type></link> properties differ.</para>
<refsect3 id="g-tls-certificate-is-same.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cert_one</para></entry>
<entry role="parameter_description"><para>first certificate to compare</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cert_two</para></entry>
<entry role="parameter_description"><para>second certificate to compare</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-tls-certificate-is-same.returns" role="returns">
<title>Returns</title>
<para> whether the same or not</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.34">2.34</link></para></refsect2>

</refsect1>
<refsect1 id="GTlsCertificate.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GTlsCertificate-struct" role="struct">
<title>GTlsCertificate</title>
<indexterm zone="GTlsCertificate-struct" role="2.28"><primary sortas="TlsCertificate">GTlsCertificate</primary></indexterm>
<programlisting language="C">typedef struct _GTlsCertificate GTlsCertificate;</programlisting>
<para>Abstract base class for TLS certificate types.</para>
<para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>

</refsect1>
<refsect1 id="GTlsCertificate.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GTlsCertificate--certificate" role="property"><title>The <literal>“certificate”</literal> property</title>
<indexterm zone="GTlsCertificate--certificate" role="2.28"><primary sortas="TlsCertificate:certificate">GTlsCertificate:certificate</primary></indexterm>
<programlisting>  “certificate”              <link linkend="GByteArray"><type>GByteArray</type></link>&#160;*</programlisting>
<para>The DER (binary) encoded representation of the certificate.
This property and the <link linkend="GTlsCertificate--certificate-pem"><type>“certificate-pem”</type></link> property
represent the same data, just in different forms.</para>
<para>Flags: Read / Write / Construct Only</para>
<para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="GTlsCertificate--certificate-pem" role="property"><title>The <literal>“certificate-pem”</literal> property</title>
<indexterm zone="GTlsCertificate--certificate-pem" role="2.28"><primary sortas="TlsCertificate:certificate-pem">GTlsCertificate:certificate-pem</primary></indexterm>
<programlisting>  “certificate-pem”          <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>The PEM (ASCII) encoded representation of the certificate.
This property and the <link linkend="GTlsCertificate--certificate"><type>“certificate”</type></link>
property represent the same data, just in different forms.</para>
<para>Flags: Read / Write / Construct Only</para>
<para>Default value: NULL</para>
<para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="GTlsCertificate--issuer" role="property"><title>The <literal>“issuer”</literal> property</title>
<indexterm zone="GTlsCertificate--issuer" role="2.28"><primary sortas="TlsCertificate:issuer">GTlsCertificate:issuer</primary></indexterm>
<programlisting>  “issuer”                   <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link>&#160;*</programlisting>
<para>A <link linkend="GTlsCertificate"><type>GTlsCertificate</type></link> representing the entity that issued this
certificate. If <link linkend="NULL:CAPS"><literal>NULL</literal></link>, this means that the certificate is either
self-signed, or else the certificate of the issuer is not
available.</para>
<para>Flags: Read / Write / Construct Only</para>
<para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="GTlsCertificate--private-key" role="property"><title>The <literal>“private-key”</literal> property</title>
<indexterm zone="GTlsCertificate--private-key" role="2.28"><primary sortas="TlsCertificate:private-key">GTlsCertificate:private-key</primary></indexterm>
<programlisting>  “private-key”              <link linkend="GByteArray"><type>GByteArray</type></link>&#160;*</programlisting>
<para>The DER (binary) encoded representation of the certificate's
private key, in either PKCS#1 format or unencrypted PKCS#8
format. This property (or the <link linkend="GTlsCertificate--private-key-pem"><type>“private-key-pem”</type></link>
property) can be set when constructing a key (eg, from a file),
but cannot be read.</para>
<para>PKCS#8 format is supported since 2.32; earlier releases only
support PKCS#1. You can use the <literal>openssl rsa</literal>
tool to convert PKCS#8 keys to PKCS#1.</para>
<para>Flags: Write / Construct Only</para>
<para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="GTlsCertificate--private-key-pem" role="property"><title>The <literal>“private-key-pem”</literal> property</title>
<indexterm zone="GTlsCertificate--private-key-pem" role="2.28"><primary sortas="TlsCertificate:private-key-pem">GTlsCertificate:private-key-pem</primary></indexterm>
<programlisting>  “private-key-pem”          <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>The PEM (ASCII) encoded representation of the certificate's
private key in either PKCS#1 format ("<literal>BEGIN RSA PRIVATE
KEY</literal>") or unencrypted PKCS#8 format ("<literal>BEGIN
PRIVATE KEY</literal>"). This property (or the
<link linkend="GTlsCertificate--private-key"><type>“private-key”</type></link> property) can be set when
constructing a key (eg, from a file), but cannot be read.</para>
<para>PKCS#8 format is supported since 2.32; earlier releases only
support PKCS#1. You can use the <literal>openssl rsa</literal>
tool to convert PKCS#8 keys to PKCS#1.</para>
<para>Flags: Write / Construct Only</para>
<para>Default value: NULL</para>
<para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>

</refsect1>
<refsect1 id="GTlsCertificate.see-also">
<title>See Also</title>
<para><link linkend="GTlsConnection"><type>GTlsConnection</type></link></para>

</refsect1>

</refentry>
