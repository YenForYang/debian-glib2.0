<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GNetworkMonitor">
<refmeta>
<refentrytitle role="top_of_page" id="GNetworkMonitor.top_of_page">GNetworkMonitor</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GNetworkMonitor</refname>
<refpurpose>Network status monitor</refpurpose>
</refnamediv>

<refsect1 id="GNetworkMonitor.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GNetworkMonitor"><returnvalue>GNetworkMonitor</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-network-monitor-get-default">g_network_monitor_get_default</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-network-monitor-get-network-available">g_network_monitor_get_network_available</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-network-monitor-get-network-metered">g_network_monitor_get_network_metered</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-network-monitor-can-reach">g_network_monitor_can_reach</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-network-monitor-can-reach-async">g_network_monitor_can_reach_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-network-monitor-can-reach-finish">g_network_monitor_can_reach_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GNetworkConnectivity"><returnvalue>GNetworkConnectivity</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-network-monitor-get-connectivity">g_network_monitor_get_connectivity</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GNetworkMonitor.properties" role="properties">
<title role="properties.title">Properties</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="properties_type" colwidth="150px"/>
<colspec colname="properties_name" colwidth="300px"/>
<colspec colname="properties_flags" colwidth="200px"/>
<tbody>
<row><entry role="property_type"><link linkend="GNetworkConnectivity"><type>GNetworkConnectivity</type></link></entry><entry role="property_name"><link linkend="GNetworkMonitor--connectivity">connectivity</link></entry><entry role="property_flags">Read</entry></row>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GNetworkMonitor--network-available">network-available</link></entry><entry role="property_flags">Read</entry></row>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GNetworkMonitor--network-metered">network-metered</link></entry><entry role="property_flags">Read</entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GNetworkMonitor.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="signals_return" colwidth="150px"/>
<colspec colname="signals_name" colwidth="300px"/>
<colspec colname="signals_flags" colwidth="200px"/>
<tbody>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GNetworkMonitor-network-changed">network-changed</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GNetworkMonitor.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GNetworkMonitor-struct">GNetworkMonitor</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GNetworkMonitorInterface">GNetworkMonitorInterface</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="G-NETWORK-MONITOR-EXTENSION-POINT-NAME:CAPS">G_NETWORK_MONITOR_EXTENSION_POINT_NAME</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GNetworkConnectivity">GNetworkConnectivity</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GNetworkMonitor.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GEnum">GEnum</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GNetworkConnectivity
    <link linkend="GInterface">GInterface</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GNetworkMonitor
</screen>
</refsect1>
<refsect1 id="GNetworkMonitor.prerequisites" role="prerequisites">
<title role="prerequisites.title">Prerequisites</title>
<para>
GNetworkMonitor requires
 <link linkend="GInitable">GInitable</link> and  <link linkend="GObject">GObject</link>.</para>

</refsect1>

<refsect1 id="GNetworkMonitor.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GNetworkMonitor.description" role="desc">
<title role="desc.title">Description</title>
<para><link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> provides an easy-to-use cross-platform API
for monitoring network connectivity. On Linux, the available
implementations are based on the kernel's netlink interface and
on NetworkManager.</para>
<para>There is also an implementation for use inside Flatpak sandboxes.</para>

</refsect1>
<refsect1 id="GNetworkMonitor.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-network-monitor-get-default" role="function" condition="since:2.32">
<title>g_network_monitor_get_default&#160;()</title>
<indexterm zone="g-network-monitor-get-default" role="2.32"><primary sortas="network_monitor_get_default">g_network_monitor_get_default</primary></indexterm>
<programlisting language="C"><link linkend="GNetworkMonitor"><returnvalue>GNetworkMonitor</returnvalue></link>&#160;*
g_network_monitor_get_default (<parameter><type>void</type></parameter>);</programlisting>
<para>Gets the default <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> for the system.</para>
<refsect3 id="g-network-monitor-get-default.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-network-monitor-get-network-available" role="function" condition="since:2.32">
<title>g_network_monitor_get_network_available&#160;()</title>
<indexterm zone="g-network-monitor-get-network-available" role="2.32"><primary sortas="network_monitor_get_network_available">g_network_monitor_get_network_available</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_network_monitor_get_network_available
                               (<parameter><link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> *monitor</parameter>);</programlisting>
<para>Checks if the network is available. "Available" here means that the
system has a default route available for at least one of IPv4 or
IPv6. It does not necessarily imply that the public Internet is
reachable. See <link linkend="GNetworkMonitor--network-available"><type>“network-available”</type></link> for more details.</para>
<refsect3 id="g-network-monitor-get-network-available.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>monitor</para></entry>
<entry role="parameter_description"><para>the <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-network-monitor-get-network-available.returns" role="returns">
<title>Returns</title>
<para> whether the network is available</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-network-monitor-get-network-metered" role="function" condition="since:2.46">
<title>g_network_monitor_get_network_metered&#160;()</title>
<indexterm zone="g-network-monitor-get-network-metered" role="2.46"><primary sortas="network_monitor_get_network_metered">g_network_monitor_get_network_metered</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_network_monitor_get_network_metered (<parameter><link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> *monitor</parameter>);</programlisting>
<para>Checks if the network is metered.
See <link linkend="GNetworkMonitor--network-metered"><type>“network-metered”</type></link> for more details.</para>
<refsect3 id="g-network-monitor-get-network-metered.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>monitor</para></entry>
<entry role="parameter_description"><para>the <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-network-monitor-get-network-metered.returns" role="returns">
<title>Returns</title>
<para> whether the connection is metered</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.46">2.46</link></para></refsect2>
<refsect2 id="g-network-monitor-can-reach" role="function" condition="since:2.32">
<title>g_network_monitor_can_reach&#160;()</title>
<indexterm zone="g-network-monitor-can-reach" role="2.32"><primary sortas="network_monitor_can_reach">g_network_monitor_can_reach</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_network_monitor_can_reach (<parameter><link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> *monitor</parameter>,
                             <parameter><link linkend="GSocketConnectable"><type>GSocketConnectable</type></link> *connectable</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Attempts to determine whether or not the host pointed to by
<parameter>connectable</parameter>
 can be reached, without actually trying to connect to
it.</para>
<para>This may return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> even when <link linkend="GNetworkMonitor--network-available"><type>“network-available”</type></link>
is <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, if, for example, <parameter>monitor</parameter>
 can determine that
<parameter>connectable</parameter>
 refers to a host on a local network.</para>
<para>If <parameter>monitor</parameter>
 believes that an attempt to connect to <parameter>connectable</parameter>

will succeed, it will return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>. Otherwise, it will return
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> and set <parameter>error</parameter>
 to an appropriate error (such as
<link linkend="G-IO-ERROR-HOST-UNREACHABLE:CAPS"><literal>G_IO_ERROR_HOST_UNREACHABLE</literal></link>).</para>
<para>Note that although this does not attempt to connect to
<parameter>connectable</parameter>
, it may still block for a brief period of time (eg,
trying to do multicast DNS on the local network), so if you do not
want to block, you should use <link linkend="g-network-monitor-can-reach-async"><function>g_network_monitor_can_reach_async()</function></link>.</para>
<refsect3 id="g-network-monitor-can-reach.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>monitor</para></entry>
<entry role="parameter_description"><para>a <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>connectable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocketConnectable"><type>GSocketConnectable</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>return location for a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-network-monitor-can-reach.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>connectable</parameter>
is reachable, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if not.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-network-monitor-can-reach-async" role="function">
<title>g_network_monitor_can_reach_async&#160;()</title>
<indexterm zone="g-network-monitor-can-reach-async"><primary sortas="network_monitor_can_reach_async">g_network_monitor_can_reach_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_network_monitor_can_reach_async (<parameter><link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> *monitor</parameter>,
                                   <parameter><link linkend="GSocketConnectable"><type>GSocketConnectable</type></link> *connectable</parameter>,
                                   <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                   <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                   <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously attempts to determine whether or not the host
pointed to by <parameter>connectable</parameter>
 can be reached, without actually
trying to connect to it.</para>
<para>For more details, see <link linkend="g-network-monitor-can-reach"><function>g_network_monitor_can_reach()</function></link>.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-network-monitor-can-reach-finish"><function>g_network_monitor_can_reach_finish()</function></link>
to get the result of the operation.</para>
<refsect3 id="g-network-monitor-can-reach-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>monitor</para></entry>
<entry role="parameter_description"><para>a <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>connectable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocketConnectable"><type>GSocketConnectable</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the
request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-network-monitor-can-reach-finish" role="function">
<title>g_network_monitor_can_reach_finish&#160;()</title>
<indexterm zone="g-network-monitor-can-reach-finish"><primary sortas="network_monitor_can_reach_finish">g_network_monitor_can_reach_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_network_monitor_can_reach_finish (<parameter><link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> *monitor</parameter>,
                                    <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                    <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an async network connectivity test.
See <link linkend="g-network-monitor-can-reach-async"><function>g_network_monitor_can_reach_async()</function></link>.</para>
<refsect3 id="g-network-monitor-can-reach-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>monitor</para></entry>
<entry role="parameter_description"><para>a <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>return location for errors, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-network-monitor-can-reach-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if network is reachable, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if not.</para>
</refsect3></refsect2>
<refsect2 id="g-network-monitor-get-connectivity" role="function" condition="since:2.44">
<title>g_network_monitor_get_connectivity&#160;()</title>
<indexterm zone="g-network-monitor-get-connectivity" role="2.44"><primary sortas="network_monitor_get_connectivity">g_network_monitor_get_connectivity</primary></indexterm>
<programlisting language="C"><link linkend="GNetworkConnectivity"><returnvalue>GNetworkConnectivity</returnvalue></link>
g_network_monitor_get_connectivity (<parameter><link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> *monitor</parameter>);</programlisting>
<para>Gets a more detailed networking state than
<link linkend="g-network-monitor-get-network-available"><function>g_network_monitor_get_network_available()</function></link>.</para>
<para>If <link linkend="GNetworkMonitor--network-available"><type>“network-available”</type></link> is <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, then the
connectivity state will be <link linkend="G-NETWORK-CONNECTIVITY-LOCAL:CAPS"><literal>G_NETWORK_CONNECTIVITY_LOCAL</literal></link>.</para>
<para>If <link linkend="GNetworkMonitor--network-available"><type>“network-available”</type></link> is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, then the
connectivity state will be <link linkend="G-NETWORK-CONNECTIVITY-FULL:CAPS"><literal>G_NETWORK_CONNECTIVITY_FULL</literal></link> (if there
is full Internet connectivity), <link linkend="G-NETWORK-CONNECTIVITY-LIMITED:CAPS"><literal>G_NETWORK_CONNECTIVITY_LIMITED</literal></link> (if
the host has a default route, but appears to be unable to actually
reach the full Internet), or <link linkend="G-NETWORK-CONNECTIVITY-PORTAL:CAPS"><literal>G_NETWORK_CONNECTIVITY_PORTAL</literal></link> (if the
host is trapped behind a "captive portal" that requires some sort
of login or acknowledgement before allowing full Internet access).</para>
<para>Note that in the case of <link linkend="G-NETWORK-CONNECTIVITY-LIMITED:CAPS"><literal>G_NETWORK_CONNECTIVITY_LIMITED</literal></link> and
<link linkend="G-NETWORK-CONNECTIVITY-PORTAL:CAPS"><literal>G_NETWORK_CONNECTIVITY_PORTAL</literal></link>, it is possible that some sites are
reachable but others are not. In this case, applications can
attempt to connect to remote servers, but should gracefully fall
back to their "offline" behavior if the connection attempt fails.</para>
<refsect3 id="g-network-monitor-get-connectivity.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>monitor</para></entry>
<entry role="parameter_description"><para>the <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-network-monitor-get-connectivity.returns" role="returns">
<title>Returns</title>
<para> the network connectivity state</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.44">2.44</link></para></refsect2>

</refsect1>
<refsect1 id="GNetworkMonitor.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GNetworkMonitor-struct" role="struct">
<title>GNetworkMonitor</title>
<indexterm zone="GNetworkMonitor-struct" role="2.32"><primary sortas="NetworkMonitor">GNetworkMonitor</primary></indexterm>
<programlisting language="C">typedef struct _GNetworkMonitor GNetworkMonitor;</programlisting>
<para><link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> monitors the status of network connections and
indicates when a possibly-user-visible change has occurred.</para>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="GNetworkMonitorInterface" role="struct" condition="since:2.32">
<title>struct GNetworkMonitorInterface</title>
<indexterm zone="GNetworkMonitorInterface" role="2.32"><primary sortas="NetworkMonitorInterface">GNetworkMonitorInterface</primary></indexterm>
<programlisting language="C">struct GNetworkMonitorInterface {
  GTypeInterface g_iface;

  void     (*network_changed)  (GNetworkMonitor      *monitor,
				gboolean              network_available);

  gboolean (*can_reach)        (GNetworkMonitor      *monitor,
				GSocketConnectable   *connectable,
				GCancellable         *cancellable,
				GError              **error);
  void     (*can_reach_async)  (GNetworkMonitor      *monitor,
				GSocketConnectable   *connectable,
				GCancellable         *cancellable,
				GAsyncReadyCallback   callback,
				gpointer              user_data);
  gboolean (*can_reach_finish) (GNetworkMonitor      *monitor,
				GAsyncResult         *result,
				GError              **error);
};
</programlisting>
<para>The virtual function table for <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link>.</para>
<refsect3 id="GNetworkMonitorInterface.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><structfield id="GNetworkMonitorInterface.network-changed">network_changed</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the virtual function pointer for the
GNetworkMonitor::network-changed signal.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GNetworkMonitorInterface.can-reach">can_reach</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the virtual function pointer for <link linkend="g-network-monitor-can-reach"><function>g_network_monitor_can_reach()</function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GNetworkMonitorInterface.can-reach-async">can_reach_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the virtual function pointer for
<link linkend="g-network-monitor-can-reach-async"><function>g_network_monitor_can_reach_async()</function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GNetworkMonitorInterface.can-reach-finish">can_reach_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the virtual function pointer for
<link linkend="g-network-monitor-can-reach-finish"><function>g_network_monitor_can_reach_finish()</function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="G-NETWORK-MONITOR-EXTENSION-POINT-NAME:CAPS" role="macro" condition="since:2.30">
<title>G_NETWORK_MONITOR_EXTENSION_POINT_NAME</title>
<indexterm zone="G-NETWORK-MONITOR-EXTENSION-POINT-NAME:CAPS" role="2.30"><primary sortas="NETWORK_MONITOR_EXTENSION_POINT_NAME">G_NETWORK_MONITOR_EXTENSION_POINT_NAME</primary></indexterm>
<programlisting language="C">#define G_NETWORK_MONITOR_EXTENSION_POINT_NAME "gio-network-monitor"
</programlisting>
<para>Extension point for network status monitoring functionality.
See <link linkend="extending-gio">Extending GIO</link>.</para>
<para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="GNetworkConnectivity" role="enum" condition="since:2.44">
<title>enum GNetworkConnectivity</title>
<indexterm zone="GNetworkConnectivity" role="2.44"><primary sortas="NetworkConnectivity">GNetworkConnectivity</primary></indexterm>
<para>The host's network connectivity state, as reported by <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link>.</para>
<refsect3 id="GNetworkConnectivity.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-NETWORK-CONNECTIVITY-LOCAL:CAPS">G_NETWORK_CONNECTIVITY_LOCAL</para></entry>
<entry role="enum_member_description"><para>The host is not configured with a
  route to the Internet; it may or may not be connected to a local
  network.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-NETWORK-CONNECTIVITY-LIMITED:CAPS">G_NETWORK_CONNECTIVITY_LIMITED</para></entry>
<entry role="enum_member_description"><para>The host is connected to a network, but
  does not appear to be able to reach the full Internet, perhaps
  due to upstream network problems.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-NETWORK-CONNECTIVITY-PORTAL:CAPS">G_NETWORK_CONNECTIVITY_PORTAL</para></entry>
<entry role="enum_member_description"><para>The host is behind a captive portal and
  cannot reach the full Internet.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-NETWORK-CONNECTIVITY-FULL:CAPS">G_NETWORK_CONNECTIVITY_FULL</para></entry>
<entry role="enum_member_description"><para>The host is connected to a network, and
  appears to be able to reach the full Internet.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.44">2.44</link></para></refsect2>

</refsect1>
<refsect1 id="GNetworkMonitor.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GNetworkMonitor--connectivity" role="property"><title>The <literal>“connectivity”</literal> property</title>
<indexterm zone="GNetworkMonitor--connectivity" role="2.44"><primary sortas="NetworkMonitor:connectivity">GNetworkMonitor:connectivity</primary></indexterm>
<programlisting>  “connectivity”             <link linkend="GNetworkConnectivity"><type>GNetworkConnectivity</type></link></programlisting>
<para>More detailed information about the host's network connectivity.
See <link linkend="g-network-monitor-get-connectivity"><function>g_network_monitor_get_connectivity()</function></link> and
<link linkend="GNetworkConnectivity"><type>GNetworkConnectivity</type></link> for more details.</para>
<para>Flags: Read</para>
<para>Default value: G_NETWORK_CONNECTIVITY_FULL</para>
<para role="since">Since: <link linkend="api-index-2.44">2.44</link></para></refsect2>
<refsect2 id="GNetworkMonitor--network-available" role="property"><title>The <literal>“network-available”</literal> property</title>
<indexterm zone="GNetworkMonitor--network-available" role="2.32"><primary sortas="NetworkMonitor:network-available">GNetworkMonitor:network-available</primary></indexterm>
<programlisting>  “network-available”        <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>Whether the network is considered available. That is, whether the
system has a default route for at least one of IPv4 or IPv6.</para>
<para>Real-world networks are of course much more complicated than
this; the machine may be connected to a wifi hotspot that
requires payment before allowing traffic through, or may be
connected to a functioning router that has lost its own upstream
connectivity. Some hosts might only be accessible when a VPN is
active. Other hosts might only be accessible when the VPN is
not active. Thus, it is best to use <link linkend="g-network-monitor-can-reach"><function>g_network_monitor_can_reach()</function></link>
or <link linkend="g-network-monitor-can-reach-async"><function>g_network_monitor_can_reach_async()</function></link> to test for reachability
on a host-by-host basis. (On the other hand, when the property is
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, the application can reasonably expect that no remote
hosts at all are reachable, and should indicate this to the user
in its UI.)</para>
<para>See also <link linkend="GNetworkMonitor-network-changed"><type>“network-changed”</type></link>.</para>
<para>Flags: Read</para>
<para>Default value: FALSE</para>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="GNetworkMonitor--network-metered" role="property"><title>The <literal>“network-metered”</literal> property</title>
<indexterm zone="GNetworkMonitor--network-metered" role="2.46"><primary sortas="NetworkMonitor:network-metered">GNetworkMonitor:network-metered</primary></indexterm>
<programlisting>  “network-metered”          <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>Whether the network is considered metered. That is, whether the
system has traffic flowing through the default connection that is
subject to limitations set by service providers. For example, traffic
might be billed by the amount of data transmitted, or there might be a
quota on the amount of traffic per month. This is typical with tethered
connections (3G and 4G) and in such situations, bandwidth intensive
applications may wish to avoid network activity where possible if it will
cost the user money or use up their limited quota.</para>
<para>If more information is required about specific devices then the
system network management API should be used instead (for example,
NetworkManager or ConnMan).</para>
<para>If this information is not available then no networks will be
marked as metered.</para>
<para>See also <link linkend="GNetworkMonitor--network-available"><type>“network-available”</type></link>.</para>
<para>Flags: Read</para>
<para>Default value: FALSE</para>
<para role="since">Since: <link linkend="api-index-2.46">2.46</link></para></refsect2>

</refsect1>
<refsect1 id="GNetworkMonitor.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GNetworkMonitor-network-changed" role="signal"><title>The <literal>“network-changed”</literal> signal</title>
<indexterm zone="GNetworkMonitor-network-changed" role="2.32"><primary sortas="NetworkMonitor::network-changed">GNetworkMonitor::network-changed</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link> *monitor,
               <link linkend="gboolean"><type>gboolean</type></link>         network_available,
               <link linkend="gpointer"><type>gpointer</type></link>         user_data)</programlisting>
<para>Emitted when the network configuration changes.</para>
<refsect3 id="GNetworkMonitor-network-changed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>monitor</para></entry>
<entry role="parameter_description"><para>a <link linkend="GNetworkMonitor"><type>GNetworkMonitor</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>network_available</para></entry>
<entry role="parameter_description"><para>the current value of <link linkend="GNetworkMonitor--network-available"><type>“network-available”</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
</refsect1>

</refentry>
