<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GSubprocessLauncher">
<refmeta>
<refentrytitle role="top_of_page" id="GSubprocessLauncher.top_of_page">GSubprocess Launcher</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GSubprocess Launcher</refname>
<refpurpose>Environment options for launching a child process</refpurpose>
</refnamediv>

<refsect1 id="GSubprocessLauncher.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GSubprocessLauncher"><returnvalue>GSubprocessLauncher</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-new">g_subprocess_launcher_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSubprocess"><returnvalue>GSubprocess</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-spawn">g_subprocess_launcher_spawn</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSubprocess"><returnvalue>GSubprocess</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-spawnv">g_subprocess_launcher_spawnv</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-set-environ">g_subprocess_launcher_set_environ</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-setenv">g_subprocess_launcher_setenv</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-unsetenv">g_subprocess_launcher_unsetenv</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-getenv">g_subprocess_launcher_getenv</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-set-cwd">g_subprocess_launcher_set_cwd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-set-flags">g_subprocess_launcher_set_flags</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-set-stdin-file-path">g_subprocess_launcher_set_stdin_file_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-take-stdin-fd">g_subprocess_launcher_take_stdin_fd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-set-stdout-file-path">g_subprocess_launcher_set_stdout_file_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-take-stdout-fd">g_subprocess_launcher_take_stdout_fd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-set-stderr-file-path">g_subprocess_launcher_set_stderr_file_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-take-stderr-fd">g_subprocess_launcher_take_stderr_fd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-take-fd">g_subprocess_launcher_take_fd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-subprocess-launcher-set-child-setup">g_subprocess_launcher_set_child_setup</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSubprocessLauncher.properties" role="properties">
<title role="properties.title">Properties</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="properties_type" colwidth="150px"/>
<colspec colname="properties_name" colwidth="300px"/>
<colspec colname="properties_flags" colwidth="200px"/>
<tbody>
<row><entry role="property_type"><link linkend="GSubprocessFlags"><type>GSubprocessFlags</type></link></entry><entry role="property_name"><link linkend="GSubprocessLauncher--flags">flags</link></entry><entry role="property_flags">Write / Construct Only</entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSubprocessLauncher.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GSubprocessLauncher-struct">GSubprocessLauncher</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSubprocessLauncher.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GSubprocessLauncher
</screen>
</refsect1>

<refsect1 id="GSubprocessLauncher.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GSubprocessLauncher.description" role="desc">
<title role="desc.title">Description</title>
<para>This class contains a set of options for launching child processes,
such as where its standard input and output will be directed, the
argument list, the environment, and more.</para>
<para>While the <link linkend="GSubprocess"><type>GSubprocess</type></link> class has high level functions covering
popular cases, use of this class allows access to more advanced
options.  It can also be used to launch multiple subprocesses with
a similar configuration.</para>

</refsect1>
<refsect1 id="GSubprocessLauncher.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-subprocess-launcher-new" role="function" condition="since:2.40">
<title>g_subprocess_launcher_new&#160;()</title>
<indexterm zone="g-subprocess-launcher-new" role="2.40"><primary sortas="subprocess_launcher_new">g_subprocess_launcher_new</primary></indexterm>
<programlisting language="C"><link linkend="GSubprocessLauncher"><returnvalue>GSubprocessLauncher</returnvalue></link>&#160;*
g_subprocess_launcher_new (<parameter><link linkend="GSubprocessFlags"><type>GSubprocessFlags</type></link> flags</parameter>);</programlisting>
<para>Creates a new <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link>.</para>
<para>The launcher is created with the default options.  A copy of the
environment of the calling process is made at the time of this call
and will be used as the environment that the process is launched in.</para>
<refsect3 id="g-subprocess-launcher-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para><link linkend="GSubprocessFlags"><type>GSubprocessFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-spawn" role="function" condition="since:2.40">
<title>g_subprocess_launcher_spawn&#160;()</title>
<indexterm zone="g-subprocess-launcher-spawn" role="2.40"><primary sortas="subprocess_launcher_spawn">g_subprocess_launcher_spawn</primary></indexterm>
<programlisting language="C"><link linkend="GSubprocess"><returnvalue>GSubprocess</returnvalue></link>&#160;*
g_subprocess_launcher_spawn (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>,
                             <parameter>const <link linkend="gchar"><type>gchar</type></link> *argv0</parameter>,
                             <parameter>...</parameter>);</programlisting>
<para>Creates a <link linkend="GSubprocess"><type>GSubprocess</type></link> given a provided varargs list of arguments.</para>
<refsect3 id="g-subprocess-launcher-spawn.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>Error</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>argv0</para></entry>
<entry role="parameter_description"><para>Command line arguments</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>Continued arguments, <link linkend="NULL:CAPS"><literal>NULL</literal></link> terminated</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-subprocess-launcher-spawn.returns" role="returns">
<title>Returns</title>
<para>A new <link linkend="GSubprocess"><type>GSubprocess</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error (and <parameter>error</parameter>
will be set). </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-spawnv" role="function" condition="since:2.40">
<title>g_subprocess_launcher_spawnv&#160;()</title>
<indexterm zone="g-subprocess-launcher-spawnv" role="2.40"><primary sortas="subprocess_launcher_spawnv">g_subprocess_launcher_spawnv</primary></indexterm>
<programlisting language="C"><link linkend="GSubprocess"><returnvalue>GSubprocess</returnvalue></link>&#160;*
g_subprocess_launcher_spawnv (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> * const *argv</parameter>,
                              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a <link linkend="GSubprocess"><type>GSubprocess</type></link> given a provided array of arguments.</para>
<refsect3 id="g-subprocess-launcher-spawnv.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>argv</para></entry>
<entry role="parameter_description"><para>Command line arguments. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> zero-terminated=1][<acronym>element-type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>Error</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-subprocess-launcher-spawnv.returns" role="returns">
<title>Returns</title>
<para>A new <link linkend="GSubprocess"><type>GSubprocess</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error (and <parameter>error</parameter>
will be set). </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-set-environ" role="function" condition="since:2.40">
<title>g_subprocess_launcher_set_environ&#160;()</title>
<indexterm zone="g-subprocess-launcher-set-environ" role="2.40"><primary sortas="subprocess_launcher_set_environ">g_subprocess_launcher_set_environ</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_set_environ (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                   <parameter><link linkend="gchar"><type>gchar</type></link> **env</parameter>);</programlisting>
<para>Replace the entire environment of processes launched from this
launcher with the given 'environ' variable.</para>
<para>Typically you will build this variable by using <link linkend="g-listenv"><function>g_listenv()</function></link> to copy
the process 'environ' and using the functions <link linkend="g-environ-setenv"><function>g_environ_setenv()</function></link>,
<link linkend="g-environ-unsetenv"><function>g_environ_unsetenv()</function></link>, etc.</para>
<para>As an alternative, you can use <link linkend="g-subprocess-launcher-setenv"><function>g_subprocess_launcher_setenv()</function></link>,
<link linkend="g-subprocess-launcher-unsetenv"><function>g_subprocess_launcher_unsetenv()</function></link>, etc.</para>
<para>Pass an empty array to set an empty environment. Pass <link linkend="NULL:CAPS"><literal>NULL</literal></link> to inherit the
parent process’ environment. As of GLib 2.54, the parent process’ environment
will be copied when <link linkend="g-subprocess-launcher-set-environ"><function>g_subprocess_launcher_set_environ()</function></link> is called.
Previously, it was copied when the subprocess was executed. This means the
copied environment may now be modified (using <link linkend="g-subprocess-launcher-setenv"><function>g_subprocess_launcher_setenv()</function></link>,
etc.) before launching the subprocess.</para>
<para>On UNIX, all strings in this array can be arbitrary byte strings.
On Windows, they should be in UTF-8.</para>
<refsect3 id="g-subprocess-launcher-set-environ.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocess"><type>GSubprocess</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>env</para></entry>
<entry role="parameter_description"><para>the replacement environment. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> zero-terminated=1][<acronym>element-type</acronym> filename][<acronym>transfer none</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-setenv" role="function" condition="since:2.40">
<title>g_subprocess_launcher_setenv&#160;()</title>
<indexterm zone="g-subprocess-launcher-setenv" role="2.40"><primary sortas="subprocess_launcher_setenv">g_subprocess_launcher_setenv</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_setenv (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *variable</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *value</parameter>,
                              <parameter><link linkend="gboolean"><type>gboolean</type></link> overwrite</parameter>);</programlisting>
<para>Sets the environment variable <parameter>variable</parameter>
 in the environment of
processes launched from this launcher.</para>
<para>On UNIX, both the variable's name and value can be arbitrary byte
strings, except that the variable's name cannot contain '='.
On Windows, they should be in UTF-8.</para>
<refsect3 id="g-subprocess-launcher-setenv.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocess"><type>GSubprocess</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>variable</para></entry>
<entry role="parameter_description"><para>the environment variable to set,
must not contain '='. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the new value for the variable. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>overwrite</para></entry>
<entry role="parameter_description"><para>whether to change the variable if it already exists</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-unsetenv" role="function" condition="since:2.40">
<title>g_subprocess_launcher_unsetenv&#160;()</title>
<indexterm zone="g-subprocess-launcher-unsetenv" role="2.40"><primary sortas="subprocess_launcher_unsetenv">g_subprocess_launcher_unsetenv</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_unsetenv (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *variable</parameter>);</programlisting>
<para>Removes the environment variable <parameter>variable</parameter>
 from the environment of
processes launched from this launcher.</para>
<para>On UNIX, the variable's name can be an arbitrary byte string not
containing '='. On Windows, it should be in UTF-8.</para>
<refsect3 id="g-subprocess-launcher-unsetenv.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocess"><type>GSubprocess</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>variable</para></entry>
<entry role="parameter_description"><para>the environment variable to unset,
must not contain '='. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-getenv" role="function" condition="since:2.40">
<title>g_subprocess_launcher_getenv&#160;()</title>
<indexterm zone="g-subprocess-launcher-getenv" role="2.40"><primary sortas="subprocess_launcher_getenv">g_subprocess_launcher_getenv</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
g_subprocess_launcher_getenv (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *variable</parameter>);</programlisting>
<para>Returns the value of the environment variable <parameter>variable</parameter>
 in the
environment of processes launched from this launcher.</para>
<para>On UNIX, the returned string can be an arbitrary byte string.
On Windows, it will be UTF-8.</para>
<refsect3 id="g-subprocess-launcher-getenv.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocess"><type>GSubprocess</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>variable</para></entry>
<entry role="parameter_description"><para>the environment variable to get. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-subprocess-launcher-getenv.returns" role="returns">
<title>Returns</title>
<para>the value of the environment variable,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if unset. </para>
<para><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-set-cwd" role="function" condition="since:2.40">
<title>g_subprocess_launcher_set_cwd&#160;()</title>
<indexterm zone="g-subprocess-launcher-set-cwd" role="2.40"><primary sortas="subprocess_launcher_set_cwd">g_subprocess_launcher_set_cwd</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_set_cwd (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                               <parameter>const <link linkend="gchar"><type>gchar</type></link> *cwd</parameter>);</programlisting>
<para>Sets the current working directory that processes will be launched
with.</para>
<para>By default processes are launched with the current working directory
of the launching process at the time of launch.</para>
<refsect3 id="g-subprocess-launcher-set-cwd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocess"><type>GSubprocess</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cwd</para></entry>
<entry role="parameter_description"><para>the cwd for launched processes. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-set-flags" role="function" condition="since:2.40">
<title>g_subprocess_launcher_set_flags&#160;()</title>
<indexterm zone="g-subprocess-launcher-set-flags" role="2.40"><primary sortas="subprocess_launcher_set_flags">g_subprocess_launcher_set_flags</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_set_flags (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                 <parameter><link linkend="GSubprocessFlags"><type>GSubprocessFlags</type></link> flags</parameter>);</programlisting>
<para>Sets the flags on the launcher.</para>
<para>The default flags are <link linkend="G-SUBPROCESS-FLAGS-NONE:CAPS"><literal>G_SUBPROCESS_FLAGS_NONE</literal></link>.</para>
<para>You may not set flags that specify conflicting options for how to
handle a particular stdio stream (eg: specifying both
<link linkend="G-SUBPROCESS-FLAGS-STDIN-PIPE:CAPS"><literal>G_SUBPROCESS_FLAGS_STDIN_PIPE</literal></link> and
<link linkend="G-SUBPROCESS-FLAGS-STDIN-INHERIT:CAPS"><literal>G_SUBPROCESS_FLAGS_STDIN_INHERIT</literal></link>).</para>
<para>You may also not set a flag that conflicts with a previous call to a
function like <link linkend="g-subprocess-launcher-set-stdin-file-path"><function>g_subprocess_launcher_set_stdin_file_path()</function></link> or
<link linkend="g-subprocess-launcher-take-stdout-fd"><function>g_subprocess_launcher_take_stdout_fd()</function></link>.</para>
<refsect3 id="g-subprocess-launcher-set-flags.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para><link linkend="GSubprocessFlags"><type>GSubprocessFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-set-stdin-file-path" role="function" condition="since:2.40">
<title>g_subprocess_launcher_set_stdin_file_path&#160;()</title>
<indexterm zone="g-subprocess-launcher-set-stdin-file-path" role="2.40"><primary sortas="subprocess_launcher_set_stdin_file_path">g_subprocess_launcher_set_stdin_file_path</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_set_stdin_file_path
                               (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);</programlisting>
<para>Sets the file path to use as the stdin for spawned processes.</para>
<para>If <parameter>path</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then any previously given path is unset.</para>
<para>The file must exist or spawning the process will fail.</para>
<para>You may not set a stdin file path if a stdin fd is already set or if
the launcher flags contain any flags directing stdin elsewhere.</para>
<para>This feature is only available on UNIX.</para>
<refsect3 id="g-subprocess-launcher-set-stdin-file-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>(type filename) (nullable: a filename or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-take-stdin-fd" role="function" condition="since:2.40">
<title>g_subprocess_launcher_take_stdin_fd&#160;()</title>
<indexterm zone="g-subprocess-launcher-take-stdin-fd" role="2.40"><primary sortas="subprocess_launcher_take_stdin_fd">g_subprocess_launcher_take_stdin_fd</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_take_stdin_fd (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                     <parameter><link linkend="gint"><type>gint</type></link> fd</parameter>);</programlisting>
<para>Sets the file descriptor to use as the stdin for spawned processes.</para>
<para>If <parameter>fd</parameter>
 is -1 then any previously given fd is unset.</para>
<para>Note that if your intention is to have the stdin of the calling
process inherited by the child then <link linkend="G-SUBPROCESS-FLAGS-STDIN-INHERIT:CAPS"><literal>G_SUBPROCESS_FLAGS_STDIN_INHERIT</literal></link>
is a better way to go about doing that.</para>
<para>The passed <parameter>fd</parameter>
 is noted but will not be touched in the current
process.  It is therefore necessary that it be kept open by the
caller until the subprocess is spawned.  The file descriptor will
also not be explicitly closed on the child side, so it must be marked
O_CLOEXEC if that's what you want.</para>
<para>You may not set a stdin fd if a stdin file path is already set or if
the launcher flags contain any flags directing stdin elsewhere.</para>
<para>This feature is only available on UNIX.</para>
<refsect3 id="g-subprocess-launcher-take-stdin-fd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>fd</para></entry>
<entry role="parameter_description"><para>a file descriptor, or -1</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-set-stdout-file-path" role="function" condition="since:2.40">
<title>g_subprocess_launcher_set_stdout_file_path&#160;()</title>
<indexterm zone="g-subprocess-launcher-set-stdout-file-path" role="2.40"><primary sortas="subprocess_launcher_set_stdout_file_path">g_subprocess_launcher_set_stdout_file_path</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_set_stdout_file_path
                               (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);</programlisting>
<para>Sets the file path to use as the stdout for spawned processes.</para>
<para>If <parameter>path</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then any previously given path is unset.</para>
<para>The file will be created or truncated when the process is spawned, as
would be the case if using '>' at the shell.</para>
<para>You may not set a stdout file path if a stdout fd is already set or
if the launcher flags contain any flags directing stdout elsewhere.</para>
<para>This feature is only available on UNIX.</para>
<refsect3 id="g-subprocess-launcher-set-stdout-file-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>a filename or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename][<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-take-stdout-fd" role="function" condition="since:2.40">
<title>g_subprocess_launcher_take_stdout_fd&#160;()</title>
<indexterm zone="g-subprocess-launcher-take-stdout-fd" role="2.40"><primary sortas="subprocess_launcher_take_stdout_fd">g_subprocess_launcher_take_stdout_fd</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_take_stdout_fd (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                      <parameter><link linkend="gint"><type>gint</type></link> fd</parameter>);</programlisting>
<para>Sets the file descriptor to use as the stdout for spawned processes.</para>
<para>If <parameter>fd</parameter>
 is -1 then any previously given fd is unset.</para>
<para>Note that the default behaviour is to pass stdout through to the
stdout of the parent process.</para>
<para>The passed <parameter>fd</parameter>
 is noted but will not be touched in the current
process.  It is therefore necessary that it be kept open by the
caller until the subprocess is spawned.  The file descriptor will
also not be explicitly closed on the child side, so it must be marked
O_CLOEXEC if that's what you want.</para>
<para>You may not set a stdout fd if a stdout file path is already set or
if the launcher flags contain any flags directing stdout elsewhere.</para>
<para>This feature is only available on UNIX.</para>
<refsect3 id="g-subprocess-launcher-take-stdout-fd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>fd</para></entry>
<entry role="parameter_description"><para>a file descriptor, or -1</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-set-stderr-file-path" role="function" condition="since:2.40">
<title>g_subprocess_launcher_set_stderr_file_path&#160;()</title>
<indexterm zone="g-subprocess-launcher-set-stderr-file-path" role="2.40"><primary sortas="subprocess_launcher_set_stderr_file_path">g_subprocess_launcher_set_stderr_file_path</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_set_stderr_file_path
                               (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);</programlisting>
<para>Sets the file path to use as the stderr for spawned processes.</para>
<para>If <parameter>path</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then any previously given path is unset.</para>
<para>The file will be created or truncated when the process is spawned, as
would be the case if using '2>' at the shell.</para>
<para>If you want to send both stdout and stderr to the same file then use
<link linkend="G-SUBPROCESS-FLAGS-STDERR-MERGE:CAPS"><literal>G_SUBPROCESS_FLAGS_STDERR_MERGE</literal></link>.</para>
<para>You may not set a stderr file path if a stderr fd is already set or
if the launcher flags contain any flags directing stderr elsewhere.</para>
<para>This feature is only available on UNIX.</para>
<refsect3 id="g-subprocess-launcher-set-stderr-file-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>a filename or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename][<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-take-stderr-fd" role="function" condition="since:2.40">
<title>g_subprocess_launcher_take_stderr_fd&#160;()</title>
<indexterm zone="g-subprocess-launcher-take-stderr-fd" role="2.40"><primary sortas="subprocess_launcher_take_stderr_fd">g_subprocess_launcher_take_stderr_fd</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_take_stderr_fd (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                      <parameter><link linkend="gint"><type>gint</type></link> fd</parameter>);</programlisting>
<para>Sets the file descriptor to use as the stderr for spawned processes.</para>
<para>If <parameter>fd</parameter>
 is -1 then any previously given fd is unset.</para>
<para>Note that the default behaviour is to pass stderr through to the
stderr of the parent process.</para>
<para>The passed <parameter>fd</parameter>
 belongs to the <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link>.  It will be
automatically closed when the launcher is finalized.  The file
descriptor will also be closed on the child side when executing the
spawned process.</para>
<para>You may not set a stderr fd if a stderr file path is already set or
if the launcher flags contain any flags directing stderr elsewhere.</para>
<para>This feature is only available on UNIX.</para>
<refsect3 id="g-subprocess-launcher-take-stderr-fd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>fd</para></entry>
<entry role="parameter_description"><para>a file descriptor, or -1</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-subprocess-launcher-take-fd" role="function">
<title>g_subprocess_launcher_take_fd&#160;()</title>
<indexterm zone="g-subprocess-launcher-take-fd"><primary sortas="subprocess_launcher_take_fd">g_subprocess_launcher_take_fd</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_take_fd (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                               <parameter><link linkend="gint"><type>gint</type></link> source_fd</parameter>,
                               <parameter><link linkend="gint"><type>gint</type></link> target_fd</parameter>);</programlisting>
<para>Transfer an arbitrary file descriptor from parent process to the
child.  This function takes "ownership" of the fd; it will be closed
in the parent when <parameter>self</parameter>
 is freed.</para>
<para>By default, all file descriptors from the parent will be closed.
This function allows you to create (for example) a custom <link linkend="pipe"><function>pipe()</function></link> or
<link linkend="socketpair"><function>socketpair()</function></link> before launching the process, and choose the target
descriptor in the child.</para>
<para>An example use case is GNUPG, which has a command line argument
--passphrase-fd providing a file descriptor number where it expects
the passphrase to be written.</para>
<refsect3 id="g-subprocess-launcher-take-fd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>source_fd</para></entry>
<entry role="parameter_description"><para>File descriptor in parent process</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>target_fd</para></entry>
<entry role="parameter_description"><para>Target descriptor for child process</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-subprocess-launcher-set-child-setup" role="function" condition="since:2.40">
<title>g_subprocess_launcher_set_child_setup&#160;()</title>
<indexterm zone="g-subprocess-launcher-set-child-setup" role="2.40"><primary sortas="subprocess_launcher_set_child_setup">g_subprocess_launcher_set_child_setup</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_subprocess_launcher_set_child_setup (<parameter><link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> *self</parameter>,
                                       <parameter><link linkend="GSpawnChildSetupFunc"><type>GSpawnChildSetupFunc</type></link> child_setup</parameter>,
                                       <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                                       <parameter><link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> destroy_notify</parameter>);</programlisting>
<para>Sets up a child setup function.</para>
<para>The child setup function will be called after <link linkend="fork"><function>fork()</function></link> but before
<link linkend="exec"><function>exec()</function></link> on the child's side.</para>
<para><parameter>destroy_notify</parameter>
 will not be automatically called on the child's side
of the <link linkend="fork"><function>fork()</function></link>.  It will only be called when the last reference on the
<link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link> is dropped or when a new child setup function is
given.</para>
<para><link linkend="NULL:CAPS"><literal>NULL</literal></link> can be given as <parameter>child_setup</parameter>
 to disable the functionality.</para>
<para>Child setup functions are only available on UNIX.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-subprocess-launcher-set-child-setup.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>self</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSubprocessLauncher"><type>GSubprocessLauncher</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>child_setup</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSpawnChildSetupFunc"><type>GSpawnChildSetupFunc</type></link> to use as the child setup function</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data for <parameter>child_setup</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destroy_notify</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> for <parameter>user_data</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>

</refsect1>
<refsect1 id="GSubprocessLauncher.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GSubprocessLauncher-struct" role="struct">
<title>GSubprocessLauncher</title>
<indexterm zone="GSubprocessLauncher-struct" role="2.40"><primary sortas="SubprocessLauncher">GSubprocessLauncher</primary></indexterm>
<programlisting language="C">typedef struct _GSubprocessLauncher GSubprocessLauncher;</programlisting>
<para>Options for launching a child process.</para>
<para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>

</refsect1>
<refsect1 id="GSubprocessLauncher.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GSubprocessLauncher--flags" role="property"><title>The <literal>“flags”</literal> property</title>
<indexterm zone="GSubprocessLauncher--flags"><primary sortas="SubprocessLauncher:flags">GSubprocessLauncher:flags</primary></indexterm>
<programlisting>  “flags”                    <link linkend="GSubprocessFlags"><type>GSubprocessFlags</type></link></programlisting>
<para>GSubprocessFlags for launched processes.</para><para>Flags: Write / Construct Only</para>
</refsect2>

</refsect1>

</refentry>
