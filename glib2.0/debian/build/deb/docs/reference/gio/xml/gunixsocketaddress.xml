<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GUnixSocketAddress">
<refmeta>
<refentrytitle role="top_of_page" id="GUnixSocketAddress.top_of_page">GUnixSocketAddress</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GUnixSocketAddress</refname>
<refpurpose>UNIX GSocketAddress</refpurpose>
</refnamediv>

<refsect1 id="GUnixSocketAddress.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-unix-socket-address-new">g_unix_socket_address_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-unix-socket-address-new-abstract">g_unix_socket_address_new_abstract</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-unix-socket-address-new-with-type">g_unix_socket_address_new_with_type</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-unix-socket-address-get-is-abstract">g_unix_socket_address_get_is_abstract</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GUnixSocketAddressType"><returnvalue>GUnixSocketAddressType</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-unix-socket-address-get-address-type">g_unix_socket_address_get_address_type</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-unix-socket-address-get-path">g_unix_socket_address_get_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gsize"><returnvalue>gsize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-unix-socket-address-get-path-len">g_unix_socket_address_get_path_len</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-unix-socket-address-abstract-names-supported">g_unix_socket_address_abstract_names_supported</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GUnixSocketAddress.properties" role="properties">
<title role="properties.title">Properties</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="properties_type" colwidth="150px"/>
<colspec colname="properties_name" colwidth="300px"/>
<colspec colname="properties_flags" colwidth="200px"/>
<tbody>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GUnixSocketAddress--abstract">abstract</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="GUnixSocketAddressType"><type>GUnixSocketAddressType</type></link></entry><entry role="property_name"><link linkend="GUnixSocketAddress--address-type">address-type</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="GUnixSocketAddress--path">path</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="GByteArray"><type>GByteArray</type></link>&#160;*</entry><entry role="property_name"><link linkend="GUnixSocketAddress--path-as-array">path-as-array</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GUnixSocketAddress.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GUnixSocketAddress-struct">GUnixSocketAddress</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GUnixSocketAddressType">GUnixSocketAddressType</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GUnixSocketAddress.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GEnum">GEnum</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GUnixSocketAddressType
    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GSocketAddress">GSocketAddress</link>
        <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GUnixSocketAddress
</screen>
</refsect1>
<refsect1 id="GUnixSocketAddress.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GUnixSocketAddress implements
 <link linkend="GSocketConnectable">GSocketConnectable</link>.</para>

</refsect1>

<refsect1 id="GUnixSocketAddress.includes"><title>Includes</title><synopsis>#include &lt;gio/gunixsocketaddress.h&gt;
</synopsis></refsect1>

<refsect1 id="GUnixSocketAddress.description" role="desc">
<title role="desc.title">Description</title>
<para>Support for UNIX-domain (also known as local) sockets.</para>
<para>UNIX domain sockets are generally visible in the filesystem.
However, some systems support abstract socket names which are not
visible in the filesystem and not affected by the filesystem
permissions, visibility, etc. Currently this is only supported
under Linux. If you attempt to use abstract sockets on other
systems, function calls may return <link linkend="G-IO-ERROR-NOT-SUPPORTED:CAPS"><literal>G_IO_ERROR_NOT_SUPPORTED</literal></link>
errors. You can use <link linkend="g-unix-socket-address-abstract-names-supported"><function>g_unix_socket_address_abstract_names_supported()</function></link>
to see if abstract names are supported.</para>
<para>Note that <literal>&amp;lt;gio/gunixsocketaddress.h&gt;</literal> belongs to the UNIX-specific GIO
interfaces, thus you have to use the <literal>gio-unix-2.0.pc</literal> pkg-config file
when using it.</para>

</refsect1>
<refsect1 id="GUnixSocketAddress.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-unix-socket-address-new" role="function" condition="since:2.22">
<title>g_unix_socket_address_new&#160;()</title>
<indexterm zone="g-unix-socket-address-new" role="2.22"><primary sortas="unix_socket_address_new">g_unix_socket_address_new</primary></indexterm>
<programlisting language="C"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
g_unix_socket_address_new (<parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);</programlisting>
<para>Creates a new <link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link> for <parameter>path</parameter>
.</para>
<para>To create abstract socket addresses, on systems that support that,
use <link linkend="g-unix-socket-address-new-abstract"><function>g_unix_socket_address_new_abstract()</function></link>.</para>
<refsect3 id="g-unix-socket-address-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>the socket path</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-unix-socket-address-new.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-unix-socket-address-new-abstract" role="function" condition="deprecated:Use g_unix_socket_address_new_with_type().">
<title>g_unix_socket_address_new_abstract&#160;()</title>
<indexterm zone="g-unix-socket-address-new-abstract" role="deprecated"><primary sortas="unix_socket_address_new_abstract">g_unix_socket_address_new_abstract</primary></indexterm>
<programlisting language="C"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
g_unix_socket_address_new_abstract (<parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>,
                                    <parameter><link linkend="gint"><type>gint</type></link> path_len</parameter>);</programlisting>
<warning><para><literal>g_unix_socket_address_new_abstract</literal> is deprecated and should not be used in newly-written code.</para> <para>Use <link linkend="g-unix-socket-address-new-with-type"><function>g_unix_socket_address_new_with_type()</function></link>.</para>
</warning>
<para>Creates a new <link linkend="G-UNIX-SOCKET-ADDRESS-ABSTRACT-PADDED:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</literal></link>
<link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link> for <parameter>path</parameter>
.</para>
<refsect3 id="g-unix-socket-address-new-abstract.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>the abstract name. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=path_len][<acronym>element-type</acronym> gchar]</emphasis></entry></row>
<row><entry role="parameter_name"><para>path_len</para></entry>
<entry role="parameter_description"><para>the length of <parameter>path</parameter>
, or -1</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-unix-socket-address-new-abstract.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link></para>
</refsect3></refsect2>
<refsect2 id="g-unix-socket-address-new-with-type" role="function" condition="since:2.26">
<title>g_unix_socket_address_new_with_type&#160;()</title>
<indexterm zone="g-unix-socket-address-new-with-type" role="2.26"><primary sortas="unix_socket_address_new_with_type">g_unix_socket_address_new_with_type</primary></indexterm>
<programlisting language="C"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
g_unix_socket_address_new_with_type (<parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>,
                                     <parameter><link linkend="gint"><type>gint</type></link> path_len</parameter>,
                                     <parameter><link linkend="GUnixSocketAddressType"><type>GUnixSocketAddressType</type></link> type</parameter>);</programlisting>
<para>Creates a new <link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link> of type <parameter>type</parameter>
 with name <parameter>path</parameter>
.</para>
<para>If <parameter>type</parameter>
 is <link linkend="G-UNIX-SOCKET-ADDRESS-PATH:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_PATH</literal></link>, this is equivalent to
calling <link linkend="g-unix-socket-address-new"><function>g_unix_socket_address_new()</function></link>.</para>
<para>If <parameter>type</parameter>
 is <link linkend="G-UNIX-SOCKET-ADDRESS-ANONYMOUS:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ANONYMOUS</literal></link>, <parameter>path</parameter>
 and <parameter>path_len</parameter>
 will be
ignored.</para>
<para>If <parameter>path_type</parameter>
 is <link linkend="G-UNIX-SOCKET-ADDRESS-ABSTRACT:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ABSTRACT</literal></link>, then <parameter>path_len</parameter>

bytes of <parameter>path</parameter>
 will be copied to the socket's path, and only those
bytes will be considered part of the name. (If <parameter>path_len</parameter>
 is -1,
then <parameter>path</parameter>
 is assumed to be NUL-terminated.) For example, if <parameter>path</parameter>

was "test", then calling <link linkend="g-socket-address-get-native-size"><function>g_socket_address_get_native_size()</function></link> on the
returned socket would return 7 (2 bytes of overhead, 1 byte for the
abstract-socket indicator byte, and 4 bytes for the name "test").</para>
<para>If <parameter>path_type</parameter>
 is <link linkend="G-UNIX-SOCKET-ADDRESS-ABSTRACT-PADDED:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</literal></link>, then
<parameter>path_len</parameter>
 bytes of <parameter>path</parameter>
 will be copied to the socket's path, the
rest of the path will be padded with 0 bytes, and the entire
zero-padded buffer will be considered the name. (As above, if
<parameter>path_len</parameter>
 is -1, then <parameter>path</parameter>
 is assumed to be NUL-terminated.) In
this case, <link linkend="g-socket-address-get-native-size"><function>g_socket_address_get_native_size()</function></link> will always return
the full size of a <literal>struct sockaddr_un</literal>, although
<link linkend="g-unix-socket-address-get-path-len"><function>g_unix_socket_address_get_path_len()</function></link> will still return just the
length of <parameter>path</parameter>
.</para>
<para><link linkend="G-UNIX-SOCKET-ADDRESS-ABSTRACT:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ABSTRACT</literal></link> is preferred over
<link linkend="G-UNIX-SOCKET-ADDRESS-ABSTRACT-PADDED:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</literal></link> for new programs. Of course,
when connecting to a server created by another process, you must
use the appropriate type corresponding to how that process created
its listening socket.</para>
<refsect3 id="g-unix-socket-address-new-with-type.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>the name. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=path_len][<acronym>element-type</acronym> gchar]</emphasis></entry></row>
<row><entry role="parameter_name"><para>path_len</para></entry>
<entry role="parameter_description"><para>the length of <parameter>path</parameter>
, or -1</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>a <link linkend="GUnixSocketAddressType"><type>GUnixSocketAddressType</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-unix-socket-address-new-with-type.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-unix-socket-address-get-is-abstract" role="function" condition="deprecated:Use g_unix_socket_address_get_address_type()|since:2.22">
<title>g_unix_socket_address_get_is_abstract&#160;()</title>
<indexterm zone="g-unix-socket-address-get-is-abstract" role="deprecated"><primary sortas="unix_socket_address_get_is_abstract">g_unix_socket_address_get_is_abstract</primary></indexterm><indexterm zone="g-unix-socket-address-get-is-abstract" role="2.22"><primary sortas="unix_socket_address_get_is_abstract">g_unix_socket_address_get_is_abstract</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_unix_socket_address_get_is_abstract (<parameter><link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link> *address</parameter>);</programlisting>
<warning><para><literal>g_unix_socket_address_get_is_abstract</literal> is deprecated and should not be used in newly-written code.</para> <para>Use <link linkend="g-unix-socket-address-get-address-type"><function>g_unix_socket_address_get_address_type()</function></link></para>
</warning>
<para>Tests if <parameter>address</parameter>
 is abstract.</para>
<refsect3 id="g-unix-socket-address-get-is-abstract.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetSocketAddress"><type>GInetSocketAddress</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-unix-socket-address-get-is-abstract.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the address is abstract, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-unix-socket-address-get-address-type" role="function" condition="since:2.26">
<title>g_unix_socket_address_get_address_type&#160;()</title>
<indexterm zone="g-unix-socket-address-get-address-type" role="2.26"><primary sortas="unix_socket_address_get_address_type">g_unix_socket_address_get_address_type</primary></indexterm>
<programlisting language="C"><link linkend="GUnixSocketAddressType"><returnvalue>GUnixSocketAddressType</returnvalue></link>
g_unix_socket_address_get_address_type
                               (<parameter><link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link> *address</parameter>);</programlisting>
<para>Gets <parameter>address</parameter>
's type.</para>
<refsect3 id="g-unix-socket-address-get-address-type.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetSocketAddress"><type>GInetSocketAddress</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-unix-socket-address-get-address-type.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GUnixSocketAddressType"><type>GUnixSocketAddressType</type></link></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-unix-socket-address-get-path" role="function" condition="since:2.22">
<title>g_unix_socket_address_get_path&#160;()</title>
<indexterm zone="g-unix-socket-address-get-path" role="2.22"><primary sortas="unix_socket_address_get_path">g_unix_socket_address_get_path</primary></indexterm>
<programlisting language="C">const <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_unix_socket_address_get_path (<parameter><link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link> *address</parameter>);</programlisting>
<para>Gets <parameter>address</parameter>
's path, or for abstract sockets the "name".</para>
<para>Guaranteed to be zero-terminated, but an abstract socket
may contain embedded zeros, and thus you should use
<link linkend="g-unix-socket-address-get-path-len"><function>g_unix_socket_address_get_path_len()</function></link> to get the true length
of this string.</para>
<refsect3 id="g-unix-socket-address-get-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetSocketAddress"><type>GInetSocketAddress</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-unix-socket-address-get-path.returns" role="returns">
<title>Returns</title>
<para> the path for <parameter>address</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-unix-socket-address-get-path-len" role="function" condition="since:2.22">
<title>g_unix_socket_address_get_path_len&#160;()</title>
<indexterm zone="g-unix-socket-address-get-path-len" role="2.22"><primary sortas="unix_socket_address_get_path_len">g_unix_socket_address_get_path_len</primary></indexterm>
<programlisting language="C"><link linkend="gsize"><returnvalue>gsize</returnvalue></link>
g_unix_socket_address_get_path_len (<parameter><link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link> *address</parameter>);</programlisting>
<para>Gets the length of <parameter>address</parameter>
's path.</para>
<para>For details, see <link linkend="g-unix-socket-address-get-path"><function>g_unix_socket_address_get_path()</function></link>.</para>
<refsect3 id="g-unix-socket-address-get-path-len.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetSocketAddress"><type>GInetSocketAddress</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-unix-socket-address-get-path-len.returns" role="returns">
<title>Returns</title>
<para> the length of the path</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-unix-socket-address-abstract-names-supported" role="function" condition="since:2.22">
<title>g_unix_socket_address_abstract_names_supported&#160;()</title>
<indexterm zone="g-unix-socket-address-abstract-names-supported" role="2.22"><primary sortas="unix_socket_address_abstract_names_supported">g_unix_socket_address_abstract_names_supported</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_unix_socket_address_abstract_names_supported
                               (<parameter><type>void</type></parameter>);</programlisting>
<para>Checks if abstract UNIX domain socket names are supported.</para>
<refsect3 id="g-unix-socket-address-abstract-names-supported.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if supported, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>

</refsect1>
<refsect1 id="GUnixSocketAddress.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GUnixSocketAddress-struct" role="struct">
<title>struct GUnixSocketAddress</title>
<indexterm zone="GUnixSocketAddress-struct"><primary sortas="UnixSocketAddress">GUnixSocketAddress</primary></indexterm>
<programlisting language="C">struct GUnixSocketAddress;</programlisting>
<para>A UNIX-domain (local) socket address, corresponding to a
struct sockaddr_un.</para>
</refsect2>
<refsect2 id="GUnixSocketAddressType" role="enum" condition="since:2.26">
<title>enum GUnixSocketAddressType</title>
<indexterm zone="GUnixSocketAddressType" role="2.26"><primary sortas="UnixSocketAddressType">GUnixSocketAddressType</primary></indexterm>
<para>The type of name used by a <link linkend="GUnixSocketAddress"><type>GUnixSocketAddress</type></link>.
<link linkend="G-UNIX-SOCKET-ADDRESS-PATH:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_PATH</literal></link> indicates a traditional unix domain
socket bound to a filesystem path. <link linkend="G-UNIX-SOCKET-ADDRESS-ANONYMOUS:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ANONYMOUS</literal></link>
indicates a socket not bound to any name (eg, a client-side socket,
or a socket created with <link linkend="socketpair"><function>socketpair()</function></link>).</para>
<para>For abstract sockets, there are two incompatible ways of naming
them; the man pages suggest using the entire <literal>struct sockaddr_un</literal>
as the name, padding the unused parts of the <link linkend="sun-path"><literal>sun_path</literal></link> field with
zeroes; this corresponds to <link linkend="G-UNIX-SOCKET-ADDRESS-ABSTRACT-PADDED:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</literal></link>.
However, many programs instead just use a portion of <link linkend="sun-path"><literal>sun_path</literal></link>, and
pass an appropriate smaller length to <link linkend="bind"><function>bind()</function></link> or <link linkend="connect"><function>connect()</function></link>. This is
<link linkend="G-UNIX-SOCKET-ADDRESS-ABSTRACT:CAPS"><literal>G_UNIX_SOCKET_ADDRESS_ABSTRACT</literal></link>.</para>
<refsect3 id="GUnixSocketAddressType.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-UNIX-SOCKET-ADDRESS-INVALID:CAPS">G_UNIX_SOCKET_ADDRESS_INVALID</para></entry>
<entry role="enum_member_description"><para>invalid</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-UNIX-SOCKET-ADDRESS-ANONYMOUS:CAPS">G_UNIX_SOCKET_ADDRESS_ANONYMOUS</para></entry>
<entry role="enum_member_description"><para>anonymous</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-UNIX-SOCKET-ADDRESS-PATH:CAPS">G_UNIX_SOCKET_ADDRESS_PATH</para></entry>
<entry role="enum_member_description"><para>a filesystem path</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-UNIX-SOCKET-ADDRESS-ABSTRACT:CAPS">G_UNIX_SOCKET_ADDRESS_ABSTRACT</para></entry>
<entry role="enum_member_description"><para>an abstract name</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-UNIX-SOCKET-ADDRESS-ABSTRACT-PADDED:CAPS">G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</para></entry>
<entry role="enum_member_description"><para>an abstract name, 0-padded
  to the full length of a unix socket name</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>

</refsect1>
<refsect1 id="GUnixSocketAddress.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GUnixSocketAddress--abstract" role="property"><title>The <literal>“abstract”</literal> property</title>
<indexterm zone="GUnixSocketAddress--abstract" role="deprecated"><primary sortas="UnixSocketAddress:abstract">GUnixSocketAddress:abstract</primary></indexterm>
<programlisting>  “abstract”                 <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>Whether or not this is an abstract address</para>
<warning><para><literal>GUnixSocketAddress:abstract</literal> is deprecated and should not be used in newly-written code.</para> <para>Use <link linkend="GUnixSocketAddress--address-type"><type>“address-type”</type></link>, which
distinguishes between zero-padded and non-zero-padded
abstract addresses.</para>
</warning>
<para>Flags: Read / Write / Construct Only</para>
<para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GUnixSocketAddress--address-type" role="property"><title>The <literal>“address-type”</literal> property</title>
<indexterm zone="GUnixSocketAddress--address-type"><primary sortas="UnixSocketAddress:address-type">GUnixSocketAddress:address-type</primary></indexterm>
<programlisting>  “address-type”             <link linkend="GUnixSocketAddressType"><type>GUnixSocketAddressType</type></link></programlisting>
<para>The type of UNIX socket address.</para><para>Flags: Read / Write / Construct Only</para>
<para>Default value: G_UNIX_SOCKET_ADDRESS_PATH</para>
</refsect2>
<refsect2 id="GUnixSocketAddress--path" role="property"><title>The <literal>“path”</literal> property</title>
<indexterm zone="GUnixSocketAddress--path"><primary sortas="UnixSocketAddress:path">GUnixSocketAddress:path</primary></indexterm>
<programlisting>  “path”                     <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>UNIX socket path.</para><para>Flags: Read / Write / Construct Only</para>
<para>Default value: NULL</para>
</refsect2>
<refsect2 id="GUnixSocketAddress--path-as-array" role="property"><title>The <literal>“path-as-array”</literal> property</title>
<indexterm zone="GUnixSocketAddress--path-as-array"><primary sortas="UnixSocketAddress:path-as-array">GUnixSocketAddress:path-as-array</primary></indexterm>
<programlisting>  “path-as-array”            <link linkend="GByteArray"><type>GByteArray</type></link>&#160;*</programlisting>
<para>UNIX socket path, as byte array.</para><para>Flags: Read / Write / Construct Only</para>
</refsect2>

</refsect1>

</refentry>
