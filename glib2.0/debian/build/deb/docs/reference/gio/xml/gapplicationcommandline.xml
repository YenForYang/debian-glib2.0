<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GApplicationCommandLine">
<refmeta>
<refentrytitle role="top_of_page" id="GApplicationCommandLine.top_of_page">GApplicationCommandLine</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GApplicationCommandLine</refname>
<refpurpose>A command-line invocation of an application</refpurpose>
</refnamediv>

<refsect1 id="GApplicationCommandLine.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-application-command-line-get-arguments">g_application_command_line_get_arguments</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-application-command-line-get-cwd">g_application_command_line_get_cwd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;* const *
</entry><entry role="function_name"><link linkend="g-application-command-line-get-environ">g_application_command_line_get_environ</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GVariantDict"><returnvalue>GVariantDict</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-application-command-line-get-options-dict">g_application_command_line_get_options_dict</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GInputStream"><returnvalue>GInputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-application-command-line-get-stdin">g_application_command_line_get_stdin</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-application-command-line-create-file-for-arg">g_application_command_line_create_file_for_arg</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-application-command-line-getenv">g_application_command_line_getenv</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-application-command-line-get-is-remote">g_application_command_line_get_is_remote</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-application-command-line-get-platform-data">g_application_command_line_get_platform_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-application-command-line-set-exit-status">g_application_command_line_set_exit_status</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-application-command-line-get-exit-status">g_application_command_line_get_exit_status</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-application-command-line-print">g_application_command_line_print</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-application-command-line-printerr">g_application_command_line_printerr</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GApplicationCommandLine.properties" role="properties">
<title role="properties.title">Properties</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="properties_type" colwidth="150px"/>
<colspec colname="properties_name" colwidth="300px"/>
<colspec colname="properties_flags" colwidth="200px"/>
<tbody>
<row><entry role="property_type"><link linkend="GVariant"><type>GVariant</type></link>&#160;*</entry><entry role="property_name"><link linkend="GApplicationCommandLine--arguments">arguments</link></entry><entry role="property_flags">Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GApplicationCommandLine--is-remote">is-remote</link></entry><entry role="property_flags">Read</entry></row>
<row><entry role="property_type"><link linkend="GVariant"><type>GVariant</type></link>&#160;*</entry><entry role="property_name"><link linkend="GApplicationCommandLine--options">options</link></entry><entry role="property_flags">Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="GVariant"><type>GVariant</type></link>&#160;*</entry><entry role="property_name"><link linkend="GApplicationCommandLine--platform-data">platform-data</link></entry><entry role="property_flags">Write / Construct Only</entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GApplicationCommandLine.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GApplicationCommandLine-struct">GApplicationCommandLine</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GApplicationCommandLineClass">GApplicationCommandLineClass</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GApplicationCommandLine.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GApplicationCommandLine
</screen>
</refsect1>

<refsect1 id="GApplicationCommandLine.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GApplicationCommandLine.description" role="desc">
<title role="desc.title">Description</title>
<para><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> represents a command-line invocation of
an application.  It is created by <link linkend="GApplication"><type>GApplication</type></link> and emitted
in the <link linkend="GApplication-command-line"><type>“command-line”</type></link> signal and virtual function.</para>
<para>The class contains the list of arguments that the program was invoked
with.  It is also possible to query if the commandline invocation was
local (ie: the current process is running in direct response to the
invocation) or remote (ie: some other process forwarded the
commandline to this process).</para>
<para>The GApplicationCommandLine object can provide the <parameter>argc</parameter>
 and <parameter>argv</parameter>

parameters for use with the <link linkend="GOptionContext"><type>GOptionContext</type></link> command-line parsing API,
with the <link linkend="g-application-command-line-get-arguments"><function>g_application_command_line_get_arguments()</function></link> function. See
<link linkend="gapplication-example-cmdline3">gapplication-example-cmdline3.c</link>
for an example.</para>
<para>The exit status of the originally-invoked process may be set and
messages can be printed to stdout or stderr of that process.  The
lifecycle of the originally-invoked process is tied to the lifecycle
of this object (ie: the process exits when the last reference is
dropped).</para>
<para>The main use for <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> (and the
<link linkend="GApplication-command-line"><type>“command-line”</type></link> signal) is 'Emacs server' like use cases:
You can set the <literal>EDITOR</literal> environment variable to have e.g. git use
your favourite editor to edit commit messages, and if you already
have an instance of the editor running, the editing will happen
in the running instance, instead of opening a new one. An important
aspect of this use case is that the process that gets started by git
does not return until the editing is done.</para>
<para>Normally, the commandline is completely handled in the
<link linkend="GApplication-command-line"><type>“command-line”</type></link> handler. The launching instance exits
once the signal handler in the primary instance has returned, and
the return value of the signal handler becomes the exit status
of the launching instance.</para>
<informalexample><programlisting role="example"><![CDATA[
static int
command_line (GApplication            *application,
              GApplicationCommandLine *cmdline)
{
  gchar **argv;
  gint argc;
  gint i;

  argv = g_application_command_line_get_arguments (cmdline, &argc);

  g_application_command_line_print (cmdline,
                                    "This text is written back\n"
                                    "to stdout of the caller\n");

  for (i = 0; i < argc; i++)
    g_print ("argument %d: %s\n", i, argv[i]);

  g_strfreev (argv);

  return 0;
}
]]></programlisting></informalexample>
<para>
The complete example can be found here: 
<ulink url="https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline.c">gapplication-example-cmdline.c</ulink></para>
<para>In more complicated cases, the handling of the comandline can be
split between the launcher and the primary instance.</para>
<informalexample><programlisting role="example"><![CDATA[
static gboolean
 test_local_cmdline (GApplication   *application,
                     gchar        ***arguments,
                     gint           *exit_status)
{
  gint i, j;
  gchar **argv;

  argv = *arguments;

  i = 1;
  while (argv[i])
    {
      if (g_str_has_prefix (argv[i], "--local-"))
        {
          g_print ("handling argument %s locally\n", argv[i]);
          g_free (argv[i]);
          for (j = i; argv[j]; j++)
            argv[j] = argv[j + 1];
        }
      else
        {
          g_print ("not handling argument %s locally\n", argv[i]);
          i++;
        }
    }

  *exit_status = 0;

  return FALSE;
}

static void
test_application_class_init (TestApplicationClass *class)
{
  G_APPLICATION_CLASS (class)->local_command_line = test_local_cmdline;

  ...
}
]]></programlisting></informalexample>
<para>
In this example of split commandline handling, options that start
with <literal>--local-</literal> are handled locally, all other options are passed
to the <link linkend="GApplication-command-line"><type>“command-line”</type></link> handler which runs in the primary
instance.</para>
<para>The complete example can be found here:
<ulink url="https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline2.c">gapplication-example-cmdline2.c</ulink></para>
<para>If handling the commandline requires a lot of work, it may
be better to defer it.</para>
<informalexample><programlisting role="example"><![CDATA[
static gboolean
my_cmdline_handler (gpointer data)
{
  GApplicationCommandLine *cmdline = data;

  // do the heavy lifting in an idle

  g_application_command_line_set_exit_status (cmdline, 0);
  g_object_unref (cmdline); // this releases the application

  return G_SOURCE_REMOVE;
}

static int
command_line (GApplication            *application,
              GApplicationCommandLine *cmdline)
{
  // keep the application running until we are done with this commandline
  g_application_hold (application);

  g_object_set_data_full (G_OBJECT (cmdline),
                          "application", application,
                          (GDestroyNotify)g_application_release);

  g_object_ref (cmdline);
  g_idle_add (my_cmdline_handler, cmdline);

  return 0;
}
]]></programlisting></informalexample>
<para>
In this example the commandline is not completely handled before
the <link linkend="GApplication-command-line"><type>“command-line”</type></link> handler returns. Instead, we keep
a reference to the <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> object and handle it
later (in this example, in an idle). Note that it is necessary to
hold the application until you are done with the commandline.</para>
<para>The complete example can be found here:
<ulink url="https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline3.c">gapplication-example-cmdline3.c</ulink></para>

</refsect1>
<refsect1 id="GApplicationCommandLine.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-application-command-line-get-arguments" role="function" condition="since:2.28">
<title>g_application_command_line_get_arguments&#160;()</title>
<indexterm zone="g-application-command-line-get-arguments" role="2.28"><primary sortas="application_command_line_get_arguments">g_application_command_line_get_arguments</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
g_application_command_line_get_arguments
                               (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>,
                                <parameter><link linkend="int"><type>int</type></link> *argc</parameter>);</programlisting>
<para>Gets the list of arguments that was passed on the command line.</para>
<para>The strings in the array may contain non-UTF-8 data on UNIX (such as
filenames or arguments given in the system locale) but are always in
UTF-8 on Windows.</para>
<para>If you wish to use the return value with <link linkend="GOptionContext"><type>GOptionContext</type></link>, you must
use <link linkend="g-option-context-parse-strv"><function>g_option_context_parse_strv()</function></link>.</para>
<para>The return value is <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated and should be freed using
<link linkend="g-strfreev"><function>g_strfreev()</function></link>.</para>
<refsect3 id="g-application-command-line-get-arguments.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>argc</para></entry>
<entry role="parameter_description"><para>the length of the arguments array, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-get-arguments.returns" role="returns">
<title>Returns</title>
<para> (array length=argc) (element-type filename) (transfer full)
the string array containing the arguments (the argv)</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-get-cwd" role="function" condition="since:2.28">
<title>g_application_command_line_get_cwd&#160;()</title>
<indexterm zone="g-application-command-line-get-cwd" role="2.28"><primary sortas="application_command_line_get_cwd">g_application_command_line_get_cwd</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
g_application_command_line_get_cwd (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>);</programlisting>
<para>Gets the working directory of the command line invocation.
The string may contain non-utf8 data.</para>
<para>It is possible that the remote application did not send a working
directory, so this may be <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>The return value should not be modified or freed and is valid for as
long as <parameter>cmdline</parameter>
 exists.</para>
<refsect3 id="g-application-command-line-get-cwd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-get-cwd.returns" role="returns">
<title>Returns</title>
<para>the current directory, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>type</acronym> filename]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-get-environ" role="function" condition="since:2.28">
<title>g_application_command_line_get_environ&#160;()</title>
<indexterm zone="g-application-command-line-get-environ" role="2.28"><primary sortas="application_command_line_get_environ">g_application_command_line_get_environ</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;* const *
g_application_command_line_get_environ
                               (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>);</programlisting>
<para>Gets the contents of the 'environ' variable of the command line
invocation, as would be returned by <link linkend="g-get-environ"><function>g_get_environ()</function></link>, ie as a
<link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated list of strings in the form 'NAME=VALUE'.
The strings may contain non-utf8 data.</para>
<para>The remote application usually does not send an environment.  Use
<link linkend="G-APPLICATION-SEND-ENVIRONMENT:CAPS"><literal>G_APPLICATION_SEND_ENVIRONMENT</literal></link> to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).</para>
<para>The return value should not be modified or freed and is valid for as
long as <parameter>cmdline</parameter>
 exists.</para>
<para>See <link linkend="g-application-command-line-getenv"><function>g_application_command_line_getenv()</function></link> if you are only interested
in the value of a single environment variable.</para>
<refsect3 id="g-application-command-line-get-environ.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-get-environ.returns" role="returns">
<title>Returns</title>
<para>the environment strings, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if they were not sent. </para>
<para><emphasis role="annotation">[<acronym>array</acronym> zero-terminated=1][<acronym>element-type</acronym> filename][<acronym>transfer none</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-get-options-dict" role="function" condition="since:2.40">
<title>g_application_command_line_get_options_dict&#160;()</title>
<indexterm zone="g-application-command-line-get-options-dict" role="2.40"><primary sortas="application_command_line_get_options_dict">g_application_command_line_get_options_dict</primary></indexterm>
<programlisting language="C"><link linkend="GVariantDict"><returnvalue>GVariantDict</returnvalue></link>&#160;*
g_application_command_line_get_options_dict
                               (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>);</programlisting>
<para>Gets the options there were passed to <link linkend="g-application-command-line"><function>g_application_command_line()</function></link>.</para>
<para>If you did not override <link linkend="local-command-line"><function>local_command_line()</function></link> then these are the same
options that were parsed according to the <link linkend="GOptionEntrys"><type>GOptionEntrys</type></link> added to the
application with <link linkend="g-application-add-main-option-entries"><function>g_application_add_main_option_entries()</function></link> and possibly
modified from your GApplication::handle-local-options handler.</para>
<para>If no options were sent then an empty dictionary is returned so that
you don't need to check for <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<refsect3 id="g-application-command-line-get-options-dict.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-get-options-dict.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GVariantDict"><type>GVariantDict</type></link> with the options. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-application-command-line-get-stdin" role="function" condition="since:2.34">
<title>g_application_command_line_get_stdin&#160;()</title>
<indexterm zone="g-application-command-line-get-stdin" role="2.34"><primary sortas="application_command_line_get_stdin">g_application_command_line_get_stdin</primary></indexterm>
<programlisting language="C"><link linkend="GInputStream"><returnvalue>GInputStream</returnvalue></link>&#160;*
g_application_command_line_get_stdin (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>);</programlisting>
<para>Gets the stdin of the invoking process.</para>
<para>The <link linkend="GInputStream"><type>GInputStream</type></link> can be used to read data passed to the standard
input of the invoking process.
This doesn't work on all platforms.  Presently, it is only available
on UNIX when using a DBus daemon capable of passing file descriptors.
If stdin is not available then <link linkend="NULL:CAPS"><literal>NULL</literal></link> will be returned.  In the
future, support may be expanded to other platforms.</para>
<para>You must only call this function once per commandline invocation.</para>
<refsect3 id="g-application-command-line-get-stdin.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-get-stdin.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GInputStream"><type>GInputStream</type></link> for stdin. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.34">2.34</link></para></refsect2>
<refsect2 id="g-application-command-line-create-file-for-arg" role="function" condition="since:2.36">
<title>g_application_command_line_create_file_for_arg&#160;()</title>
<indexterm zone="g-application-command-line-create-file-for-arg" role="2.36"><primary sortas="application_command_line_create_file_for_arg">g_application_command_line_create_file_for_arg</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_application_command_line_create_file_for_arg
                               (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *arg</parameter>);</programlisting>
<para>Creates a <link linkend="GFile"><type>GFile</type></link> corresponding to a filename that was given as part
of the invocation of <parameter>cmdline</parameter>
.</para>
<para>This differs from <link linkend="g-file-new-for-commandline-arg"><function>g_file_new_for_commandline_arg()</function></link> in that it
resolves relative pathnames using the current working directory of
the invoking process rather than the local process.</para>
<refsect3 id="g-application-command-line-create-file-for-arg.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>arg</para></entry>
<entry role="parameter_description"><para>an argument from <parameter>cmdline</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-create-file-for-arg.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.36">2.36</link></para></refsect2>
<refsect2 id="g-application-command-line-getenv" role="function" condition="since:2.28">
<title>g_application_command_line_getenv&#160;()</title>
<indexterm zone="g-application-command-line-getenv" role="2.28"><primary sortas="application_command_line_getenv">g_application_command_line_getenv</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
g_application_command_line_getenv (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>,
                                   <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);</programlisting>
<para>Gets the value of a particular environment variable of the command
line invocation, as would be returned by <link linkend="g-getenv"><function>g_getenv()</function></link>.  The strings may
contain non-utf8 data.</para>
<para>The remote application usually does not send an environment.  Use
<link linkend="G-APPLICATION-SEND-ENVIRONMENT:CAPS"><literal>G_APPLICATION_SEND_ENVIRONMENT</literal></link> to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).</para>
<para>The return value should not be modified or freed and is valid for as
long as <parameter>cmdline</parameter>
 exists.</para>
<refsect3 id="g-application-command-line-getenv.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the environment variable to get. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-getenv.returns" role="returns">
<title>Returns</title>
<para> the value of the variable, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if unset or unsent</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-get-is-remote" role="function" condition="since:2.28">
<title>g_application_command_line_get_is_remote&#160;()</title>
<indexterm zone="g-application-command-line-get-is-remote" role="2.28"><primary sortas="application_command_line_get_is_remote">g_application_command_line_get_is_remote</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_application_command_line_get_is_remote
                               (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>);</programlisting>
<para>Determines if <parameter>cmdline</parameter>
 represents a remote invocation.</para>
<refsect3 id="g-application-command-line-get-is-remote.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-get-is-remote.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the invocation was remote</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-get-platform-data" role="function" condition="since:2.28">
<title>g_application_command_line_get_platform_data&#160;()</title>
<indexterm zone="g-application-command-line-get-platform-data" role="2.28"><primary sortas="application_command_line_get_platform_data">g_application_command_line_get_platform_data</primary></indexterm>
<programlisting language="C"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
g_application_command_line_get_platform_data
                               (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>);</programlisting>
<para>Gets the platform data associated with the invocation of <parameter>cmdline</parameter>
.</para>
<para>This is a <link linkend="GVariant"><type>GVariant</type></link> dictionary containing information about the
context in which the invocation occurred.  It typically contains
information like the current working directory and the startup
notification ID.</para>
<para>For local invocation, it will be <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<refsect3 id="g-application-command-line-get-platform-data.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-get-platform-data.returns" role="returns">
<title>Returns</title>
<para>the platform data, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-set-exit-status" role="function" condition="since:2.28">
<title>g_application_command_line_set_exit_status&#160;()</title>
<indexterm zone="g-application-command-line-set-exit-status" role="2.28"><primary sortas="application_command_line_set_exit_status">g_application_command_line_set_exit_status</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_application_command_line_set_exit_status
                               (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>,
                                <parameter><link linkend="int"><type>int</type></link> exit_status</parameter>);</programlisting>
<para>Sets the exit status that will be used when the invoking process
exits.</para>
<para>The return value of the <link linkend="GApplication-command-line"><type>“command-line”</type></link> signal is
passed to this function when the handler returns.  This is the usual
way of setting the exit status.</para>
<para>In the event that you want the remote invocation to continue running
and want to decide on the exit status in the future, you can use this
call.  For the case of a remote invocation, the remote process will
typically exit when the last reference is dropped on <parameter>cmdline</parameter>
.  The
exit status of the remote process will be equal to the last value
that was set with this function.</para>
<para>In the case that the commandline invocation is local, the situation
is slightly more complicated.  If the commandline invocation results
in the mainloop running (ie: because the use-count of the application
increased to a non-zero value) then the application is considered to
have been 'successful' in a certain sense, and the exit status is
always zero.  If the application use count is zero, though, the exit
status of the local <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> is used.</para>
<refsect3 id="g-application-command-line-set-exit-status.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>exit_status</para></entry>
<entry role="parameter_description"><para>the exit status</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-get-exit-status" role="function" condition="since:2.28">
<title>g_application_command_line_get_exit_status&#160;()</title>
<indexterm zone="g-application-command-line-get-exit-status" role="2.28"><primary sortas="application_command_line_get_exit_status">g_application_command_line_get_exit_status</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
g_application_command_line_get_exit_status
                               (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>);</programlisting>
<para>Gets the exit status of <parameter>cmdline</parameter>
.  See
<link linkend="g-application-command-line-set-exit-status"><function>g_application_command_line_set_exit_status()</function></link> for more information.</para>
<refsect3 id="g-application-command-line-get-exit-status.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-application-command-line-get-exit-status.returns" role="returns">
<title>Returns</title>
<para> the exit status</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-print" role="function" condition="since:2.28">
<title>g_application_command_line_print&#160;()</title>
<indexterm zone="g-application-command-line-print" role="2.28"><primary sortas="application_command_line_print">g_application_command_line_print</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_application_command_line_print (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>,
                                  <parameter>const <link linkend="gchar"><type>gchar</type></link> *format</parameter>,
                                  <parameter>...</parameter>);</programlisting>
<para>Formats a message and prints it using the stdout print handler in the
invoking process.</para>
<para>If <parameter>cmdline</parameter>
 is a local invocation then this is exactly equivalent to
<link linkend="g-print"><function>g_print()</function></link>.  If <parameter>cmdline</parameter>
 is remote then this is equivalent to calling
<link linkend="g-print"><function>g_print()</function></link> in the invoking process.</para>
<refsect3 id="g-application-command-line-print.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>format</para></entry>
<entry role="parameter_description"><para>a printf-style format string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>arguments, as per <parameter>format</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-application-command-line-printerr" role="function" condition="since:2.28">
<title>g_application_command_line_printerr&#160;()</title>
<indexterm zone="g-application-command-line-printerr" role="2.28"><primary sortas="application_command_line_printerr">g_application_command_line_printerr</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_application_command_line_printerr (<parameter><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> *cmdline</parameter>,
                                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *format</parameter>,
                                     <parameter>...</parameter>);</programlisting>
<para>Formats a message and prints it using the stderr print handler in the
invoking process.</para>
<para>If <parameter>cmdline</parameter>
 is a local invocation then this is exactly equivalent to
<link linkend="g-printerr"><function>g_printerr()</function></link>.  If <parameter>cmdline</parameter>
 is remote then this is equivalent to
calling <link linkend="g-printerr"><function>g_printerr()</function></link> in the invoking process.</para>
<refsect3 id="g-application-command-line-printerr.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cmdline</para></entry>
<entry role="parameter_description"><para>a <link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>format</para></entry>
<entry role="parameter_description"><para>a printf-style format string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>arguments, as per <parameter>format</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>

</refsect1>
<refsect1 id="GApplicationCommandLine.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GApplicationCommandLine-struct" role="struct">
<title>GApplicationCommandLine</title>
<indexterm zone="GApplicationCommandLine-struct"><primary sortas="ApplicationCommandLine">GApplicationCommandLine</primary></indexterm>
<programlisting language="C">typedef struct _GApplicationCommandLine GApplicationCommandLine;</programlisting>
<para><link linkend="GApplicationCommandLine"><type>GApplicationCommandLine</type></link> is an opaque data structure and can only be accessed
using the following functions.</para>
</refsect2>
<refsect2 id="GApplicationCommandLineClass" role="struct" condition="since:2.28">
<title>struct GApplicationCommandLineClass</title>
<indexterm zone="GApplicationCommandLineClass" role="2.28"><primary sortas="ApplicationCommandLineClass">GApplicationCommandLineClass</primary></indexterm>
<programlisting language="C">struct GApplicationCommandLineClass {
};
</programlisting>
<para>The <link linkend="GApplicationCommandLineClass-struct"><type>GApplicationCommandLineClass</type></link> 
contains private data only.</para>
<para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>

</refsect1>
<refsect1 id="GApplicationCommandLine.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GApplicationCommandLine--arguments" role="property"><title>The <literal>“arguments”</literal> property</title>
<indexterm zone="GApplicationCommandLine--arguments"><primary sortas="ApplicationCommandLine:arguments">GApplicationCommandLine:arguments</primary></indexterm>
<programlisting>  “arguments”                <link linkend="GVariant"><type>GVariant</type></link>&#160;*</programlisting>
<para>The commandline that caused this ::command-line signal emission.</para><para>Flags: Write / Construct Only</para>
<para>Allowed values: GVariant&lt;aay&gt;</para>
<para>Default value: NULL</para>
</refsect2>
<refsect2 id="GApplicationCommandLine--is-remote" role="property"><title>The <literal>“is-remote”</literal> property</title>
<indexterm zone="GApplicationCommandLine--is-remote"><primary sortas="ApplicationCommandLine:is-remote">GApplicationCommandLine:is-remote</primary></indexterm>
<programlisting>  “is-remote”                <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>TRUE if this is a remote commandline.</para><para>Flags: Read</para>
<para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GApplicationCommandLine--options" role="property"><title>The <literal>“options”</literal> property</title>
<indexterm zone="GApplicationCommandLine--options"><primary sortas="ApplicationCommandLine:options">GApplicationCommandLine:options</primary></indexterm>
<programlisting>  “options”                  <link linkend="GVariant"><type>GVariant</type></link>&#160;*</programlisting>
<para>The options sent along with the commandline.</para><para>Flags: Write / Construct Only</para>
<para>Allowed values: GVariant&lt;a{sv}&gt;</para>
<para>Default value: NULL</para>
</refsect2>
<refsect2 id="GApplicationCommandLine--platform-data" role="property"><title>The <literal>“platform-data”</literal> property</title>
<indexterm zone="GApplicationCommandLine--platform-data"><primary sortas="ApplicationCommandLine:platform-data">GApplicationCommandLine:platform-data</primary></indexterm>
<programlisting>  “platform-data”            <link linkend="GVariant"><type>GVariant</type></link>&#160;*</programlisting>
<para>Platform-specific data for the commandline.</para><para>Flags: Write / Construct Only</para>
<para>Allowed values: GVariant&lt;a{sv}&gt;</para>
<para>Default value: NULL</para>
</refsect2>

</refsect1>
<refsect1 id="GApplicationCommandLine.see-also">
<title>See Also</title>
<para><link linkend="GApplication"><type>GApplication</type></link></para>

</refsect1>

</refentry>
