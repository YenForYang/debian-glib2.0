<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GIOModule">
<refmeta>
<refentrytitle role="top_of_page" id="GIOModule.top_of_page">GIOModule</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GIOModule</refname>
<refpurpose>Loadable GIO Modules</refpurpose>
</refnamediv>

<refsect1 id="GIOModule.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GIOModule"><returnvalue>GIOModule</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-io-module-new">g_io_module_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-io-module-scope-block">g_io_module_scope_block</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-io-module-scope-free">g_io_module_scope_free</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GIOModuleScope"><returnvalue>GIOModuleScope</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-io-module-scope-new">g_io_module_scope_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-io-modules-load-all-in-directory">g_io_modules_load_all_in_directory</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-io-modules-load-all-in-directory-with-scope">g_io_modules_load_all_in_directory_with_scope</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-io-modules-scan-all-in-directory">g_io_modules_scan_all_in_directory</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-io-modules-scan-all-in-directory-with-scope">g_io_modules_scan_all_in_directory_with_scope</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-io-module-load">g_io_module_load</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-io-module-unload">g_io_module_unload</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-io-module-query">g_io_module_query</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GIOModule.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GIOModule-struct">GIOModule</link></entry></row>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GIOModuleScope">GIOModuleScope</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GIOModuleScopeFlags">GIOModuleScopeFlags</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GIOModule.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GEnum">GEnum</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GIOModuleScopeFlags
    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GTypeModule">GTypeModule</link>
        <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GIOModule
</screen>
</refsect1>
<refsect1 id="GIOModule.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GIOModule implements
 <link linkend="GTypePlugin">GTypePlugin</link>.</para>

</refsect1>

<refsect1 id="GIOModule.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GIOModule.description" role="desc">
<title role="desc.title">Description</title>
<para>Provides an interface and default functions for loading and unloading 
modules. This is used internally to make GIO extensible, but can also
be used by others to implement module loading.</para>

</refsect1>
<refsect1 id="GIOModule.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-io-module-new" role="function">
<title>g_io_module_new&#160;()</title>
<indexterm zone="g-io-module-new"><primary sortas="io_module_new">g_io_module_new</primary></indexterm>
<programlisting language="C"><link linkend="GIOModule"><returnvalue>GIOModule</returnvalue></link>&#160;*
g_io_module_new (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>Creates a new GIOModule that will load the specific
shared library when in use.</para>
<refsect3 id="g-io-module-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>filename</para></entry>
<entry role="parameter_description"><para>filename of the shared library module. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-io-module-new.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GIOModule"><type>GIOModule</type></link> from given <parameter>filename</parameter>
,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.</para>
</refsect3></refsect2>
<refsect2 id="g-io-module-scope-block" role="function" condition="since:2.30">
<title>g_io_module_scope_block&#160;()</title>
<indexterm zone="g-io-module-scope-block" role="2.30"><primary sortas="io_module_scope_block">g_io_module_scope_block</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_io_module_scope_block (<parameter><link linkend="GIOModuleScope"><type>GIOModuleScope</type></link> *scope</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *basename</parameter>);</programlisting>
<para>Block modules with the given <parameter>basename</parameter>
 from being loaded when
this scope is used with <link linkend="g-io-modules-scan-all-in-directory-with-scope"><function>g_io_modules_scan_all_in_directory_with_scope()</function></link>
or <link linkend="g-io-modules-load-all-in-directory-with-scope"><function>g_io_modules_load_all_in_directory_with_scope()</function></link>.</para>
<refsect3 id="g-io-module-scope-block.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>scope</para></entry>
<entry role="parameter_description"><para>a module loading scope</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>basename</para></entry>
<entry role="parameter_description"><para>the basename to block</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="g-io-module-scope-free" role="function" condition="since:2.30">
<title>g_io_module_scope_free&#160;()</title>
<indexterm zone="g-io-module-scope-free" role="2.30"><primary sortas="io_module_scope_free">g_io_module_scope_free</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_io_module_scope_free (<parameter><link linkend="GIOModuleScope"><type>GIOModuleScope</type></link> *scope</parameter>);</programlisting>
<para>Free a module scope.</para>
<refsect3 id="g-io-module-scope-free.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>scope</para></entry>
<entry role="parameter_description"><para>a module loading scope</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="g-io-module-scope-new" role="function" condition="since:2.30">
<title>g_io_module_scope_new&#160;()</title>
<indexterm zone="g-io-module-scope-new" role="2.30"><primary sortas="io_module_scope_new">g_io_module_scope_new</primary></indexterm>
<programlisting language="C"><link linkend="GIOModuleScope"><returnvalue>GIOModuleScope</returnvalue></link>&#160;*
g_io_module_scope_new (<parameter><link linkend="GIOModuleScopeFlags"><type>GIOModuleScopeFlags</type></link> flags</parameter>);</programlisting>
<para>Create a new scope for loading of IO modules. A scope can be used for
blocking duplicate modules, or blocking a module you don't want to load.</para>
<para>Specify the <link linkend="G-IO-MODULE-SCOPE-BLOCK-DUPLICATES:CAPS"><literal>G_IO_MODULE_SCOPE_BLOCK_DUPLICATES</literal></link> flag to block modules
which have the same base name as a module that has already been seen
in this scope.</para>
<refsect3 id="g-io-module-scope-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags for the new scope</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-io-module-scope-new.returns" role="returns">
<title>Returns</title>
<para>the new module scope. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="g-io-modules-load-all-in-directory" role="function">
<title>g_io_modules_load_all_in_directory&#160;()</title>
<indexterm zone="g-io-modules-load-all-in-directory"><primary sortas="io_modules_load_all_in_directory">g_io_modules_load_all_in_directory</primary></indexterm>
<programlisting language="C"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
g_io_modules_load_all_in_directory (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>);</programlisting>
<para>Loads all the modules in the specified directory.</para>
<para>If don't require all modules to be initialized (and thus registering
all gtypes) then you can use <link linkend="g-io-modules-scan-all-in-directory"><function>g_io_modules_scan_all_in_directory()</function></link>
which allows delayed/lazy loading of modules.</para>
<refsect3 id="g-io-modules-load-all-in-directory.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dirname</para></entry>
<entry role="parameter_description"><para>pathname for a directory containing modules
to load. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-io-modules-load-all-in-directory.returns" role="returns">
<title>Returns</title>
<para>a list of <link linkend="GIOModules"><type>GIOModules</type></link> loaded
from the directory,
All the modules are loaded into memory, if you want to
unload them (enabling on-demand loading) you must call
<link linkend="g-type-module-unuse"><function>g_type_module_unuse()</function></link> on all the modules. Free the list
with <link linkend="g-list-free"><function>g_list_free()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>element-type</acronym> GIOModule][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-io-modules-load-all-in-directory-with-scope" role="function" condition="since:2.30">
<title>g_io_modules_load_all_in_directory_with_scope&#160;()</title>
<indexterm zone="g-io-modules-load-all-in-directory-with-scope" role="2.30"><primary sortas="io_modules_load_all_in_directory_with_scope">g_io_modules_load_all_in_directory_with_scope</primary></indexterm>
<programlisting language="C"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
g_io_modules_load_all_in_directory_with_scope
                               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>,
                                <parameter><link linkend="GIOModuleScope"><type>GIOModuleScope</type></link> *scope</parameter>);</programlisting>
<para>Loads all the modules in the specified directory.</para>
<para>If don't require all modules to be initialized (and thus registering
all gtypes) then you can use <link linkend="g-io-modules-scan-all-in-directory"><function>g_io_modules_scan_all_in_directory()</function></link>
which allows delayed/lazy loading of modules.</para>
<refsect3 id="g-io-modules-load-all-in-directory-with-scope.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dirname</para></entry>
<entry role="parameter_description"><para>pathname for a directory containing modules
to load. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>scope</para></entry>
<entry role="parameter_description"><para>a scope to use when scanning the modules.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-io-modules-load-all-in-directory-with-scope.returns" role="returns">
<title>Returns</title>
<para>a list of <link linkend="GIOModules"><type>GIOModules</type></link> loaded
from the directory,
All the modules are loaded into memory, if you want to
unload them (enabling on-demand loading) you must call
<link linkend="g-type-module-unuse"><function>g_type_module_unuse()</function></link> on all the modules. Free the list
with <link linkend="g-list-free"><function>g_list_free()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>element-type</acronym> GIOModule][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="g-io-modules-scan-all-in-directory" role="function" condition="since:2.24">
<title>g_io_modules_scan_all_in_directory&#160;()</title>
<indexterm zone="g-io-modules-scan-all-in-directory" role="2.24"><primary sortas="io_modules_scan_all_in_directory">g_io_modules_scan_all_in_directory</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_io_modules_scan_all_in_directory (<parameter>const <link linkend="char"><type>char</type></link> *dirname</parameter>);</programlisting>
<para>Scans all the modules in the specified directory, ensuring that
any extension point implemented by a module is registered.</para>
<para>This may not actually load and initialize all the types in each
module, some modules may be lazily loaded and initialized when
an extension point it implementes is used with e.g.
<link linkend="g-io-extension-point-get-extensions"><function>g_io_extension_point_get_extensions()</function></link> or
<link linkend="g-io-extension-point-get-extension-by-name"><function>g_io_extension_point_get_extension_by_name()</function></link>.</para>
<para>If you need to guarantee that all types are loaded in all the modules,
use <link linkend="g-io-modules-load-all-in-directory"><function>g_io_modules_load_all_in_directory()</function></link>.</para>
<refsect3 id="g-io-modules-scan-all-in-directory.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dirname</para></entry>
<entry role="parameter_description"><para>pathname for a directory containing modules
to scan. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.24">2.24</link></para></refsect2>
<refsect2 id="g-io-modules-scan-all-in-directory-with-scope" role="function" condition="since:2.30">
<title>g_io_modules_scan_all_in_directory_with_scope&#160;()</title>
<indexterm zone="g-io-modules-scan-all-in-directory-with-scope" role="2.30"><primary sortas="io_modules_scan_all_in_directory_with_scope">g_io_modules_scan_all_in_directory_with_scope</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_io_modules_scan_all_in_directory_with_scope
                               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>,
                                <parameter><link linkend="GIOModuleScope"><type>GIOModuleScope</type></link> *scope</parameter>);</programlisting>
<para>Scans all the modules in the specified directory, ensuring that
any extension point implemented by a module is registered.</para>
<para>This may not actually load and initialize all the types in each
module, some modules may be lazily loaded and initialized when
an extension point it implementes is used with e.g.
<link linkend="g-io-extension-point-get-extensions"><function>g_io_extension_point_get_extensions()</function></link> or
<link linkend="g-io-extension-point-get-extension-by-name"><function>g_io_extension_point_get_extension_by_name()</function></link>.</para>
<para>If you need to guarantee that all types are loaded in all the modules,
use <link linkend="g-io-modules-load-all-in-directory"><function>g_io_modules_load_all_in_directory()</function></link>.</para>
<refsect3 id="g-io-modules-scan-all-in-directory-with-scope.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dirname</para></entry>
<entry role="parameter_description"><para>pathname for a directory containing modules
to scan. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>scope</para></entry>
<entry role="parameter_description"><para>a scope to use when scanning the modules</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="g-io-module-load" role="function">
<title>g_io_module_load&#160;()</title>
<indexterm zone="g-io-module-load"><primary sortas="io_module_load">g_io_module_load</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_io_module_load (<parameter><link linkend="GIOModule"><type>GIOModule</type></link> *module</parameter>);</programlisting>
<para>Required API for GIO modules to implement.</para>
<para>This function is run after the module has been loaded into GIO,
to initialize the module. Typically, this function will call
<link linkend="g-io-extension-point-implement"><function>g_io_extension_point_implement()</function></link>.</para>
<para>Since 2.56, this function should be named <literal>g_io_&amp;lt;modulename&gt;_load</literal>, where
<literal>modulename</literal> is the plugin’s filename with the <literal>lib</literal> or <literal>libgio</literal> prefix and
everything after the first dot removed, and with <literal>-</literal> replaced with <literal>_</literal>
throughout. For example, <literal>libgiognutls-helper.so</literal> becomes <literal>gnutls_helper</literal>.
Using the new symbol names avoids name clashes when building modules
statically. The old symbol names continue to be supported, but cannot be used
for static builds.</para>
<refsect3 id="g-io-module-load.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>module</para></entry>
<entry role="parameter_description"><para>a <link linkend="GIOModule"><type>GIOModule</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-io-module-unload" role="function">
<title>g_io_module_unload&#160;()</title>
<indexterm zone="g-io-module-unload"><primary sortas="io_module_unload">g_io_module_unload</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_io_module_unload (<parameter><link linkend="GIOModule"><type>GIOModule</type></link> *module</parameter>);</programlisting>
<para>Required API for GIO modules to implement.</para>
<para>This function is run when the module is being unloaded from GIO,
to finalize the module.</para>
<para>Since 2.56, this function should be named <literal>g_io_&amp;lt;modulename&gt;_unload</literal>, where
<literal>modulename</literal> is the plugin’s filename with the <literal>lib</literal> or <literal>libgio</literal> prefix and
everything after the first dot removed, and with <literal>-</literal> replaced with <literal>_</literal>
throughout. For example, <literal>libgiognutls-helper.so</literal> becomes <literal>gnutls_helper</literal>.
Using the new symbol names avoids name clashes when building modules
statically. The old symbol names continue to be supported, but cannot be used
for static builds.</para>
<refsect3 id="g-io-module-unload.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>module</para></entry>
<entry role="parameter_description"><para>a <link linkend="GIOModule"><type>GIOModule</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-io-module-query" role="function" condition="since:2.24">
<title>g_io_module_query&#160;()</title>
<indexterm zone="g-io-module-query" role="2.24"><primary sortas="io_module_query">g_io_module_query</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;**
g_io_module_query (<parameter><type>void</type></parameter>);</programlisting>
<para>Optional API for GIO modules to implement.</para>
<para>Should return a list of all the extension points that may be
implemented in this module.</para>
<para>This method will not be called in normal use, however it may be
called when probing existing modules and recording which extension
points that this model is used for. This means we won't have to
load and initialize this module unless its needed.</para>
<para>If this function is not implemented by the module the module will
always be loaded, initialized and then unloaded on application
startup so that it can register its extension points during init.</para>
<para>Note that a module need not actually implement all the extension
points that <link linkend="g-io-module-query"><function>g_io_module_query()</function></link> returns, since the exact list of
extension may depend on runtime issues. However all extension
points actually implemented must be returned by <link linkend="g-io-module-query"><function>g_io_module_query()</function></link>
(if defined).</para>
<para>When installing a module that implements <link linkend="g-io-module-query"><function>g_io_module_query()</function></link> you must
run gio-querymodules in order to build the cache files required for
lazy loading.</para>
<para>Since 2.56, this function should be named <literal>g_io_&amp;lt;modulename&gt;_query</literal>, where
<literal>modulename</literal> is the plugin’s filename with the <literal>lib</literal> or <literal>libgio</literal> prefix and
everything after the first dot removed, and with <literal>-</literal> replaced with <literal>_</literal>
throughout. For example, <literal>libgiognutls-helper.so</literal> becomes <literal>gnutls_helper</literal>.
Using the new symbol names avoids name clashes when building modules
statically. The old symbol names continue to be supported, but cannot be used
for static builds.</para>
<refsect3 id="g-io-module-query.returns" role="returns">
<title>Returns</title>
<para>A <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated array of strings,
listing the supported extension points of the module. The array
must be suitable for freeing with <link linkend="g-strfreev"><function>g_strfreev()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.24">2.24</link></para></refsect2>

</refsect1>
<refsect1 id="GIOModule.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GIOModule-struct" role="struct">
<title>GIOModule</title>
<indexterm zone="GIOModule-struct"><primary sortas="IOModule">GIOModule</primary></indexterm>
<programlisting language="C">typedef struct _GIOModule GIOModule;</programlisting>
<para>Opaque module base class for extending GIO.</para>
</refsect2>
<refsect2 id="GIOModuleScope" role="struct" condition="since:2.30">
<title>GIOModuleScope</title>
<indexterm zone="GIOModuleScope" role="2.30"><primary sortas="IOModuleScope">GIOModuleScope</primary></indexterm>
<programlisting language="C">typedef struct _GIOModuleScope GIOModuleScope;</programlisting>
<para>Represents a scope for loading IO modules. A scope can be used for blocking
duplicate modules, or blocking a module you don't want to load.</para>
<para>The scope can be used with <link linkend="g-io-modules-load-all-in-directory-with-scope"><function>g_io_modules_load_all_in_directory_with_scope()</function></link>
or <link linkend="g-io-modules-scan-all-in-directory-with-scope"><function>g_io_modules_scan_all_in_directory_with_scope()</function></link>.</para>
<para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="GIOModuleScopeFlags" role="enum" condition="since:2.30">
<title>enum GIOModuleScopeFlags</title>
<indexterm zone="GIOModuleScopeFlags" role="2.30"><primary sortas="IOModuleScopeFlags">GIOModuleScopeFlags</primary></indexterm>
<para>Flags for use with <link linkend="g-io-module-scope-new"><function>g_io_module_scope_new()</function></link>.</para>
<refsect3 id="GIOModuleScopeFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-IO-MODULE-SCOPE-NONE:CAPS">G_IO_MODULE_SCOPE_NONE</para></entry>
<entry role="enum_member_description"><para>No module scan flags</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-IO-MODULE-SCOPE-BLOCK-DUPLICATES:CAPS">G_IO_MODULE_SCOPE_BLOCK_DUPLICATES</para></entry>
<entry role="enum_member_description"><para>When using this scope to load or
    scan modules, automatically block a modules which has the same base
    basename as previously loaded module.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>

</refsect1>

</refentry>
