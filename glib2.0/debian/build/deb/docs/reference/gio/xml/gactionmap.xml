<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GActionMap">
<refmeta>
<refentrytitle role="top_of_page" id="GActionMap.top_of_page">GActionMap</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GActionMap</refname>
<refpurpose>Interface for action containers</refpurpose>
</refnamediv>

<refsect1 id="GActionMap.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GAction"><returnvalue>GAction</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-action-map-lookup-action">g_action_map_lookup_action</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-action-map-add-action-entries">g_action_map_add_action_entries</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-action-map-add-action">g_action_map_add_action</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-action-map-remove-action">g_action_map_remove_action</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GActionMap.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GActionMap-struct">GActionMap</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GActionMapInterface">GActionMapInterface</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GActionEntry">GActionEntry</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GActionMap.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GInterface">GInterface</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GActionMap
</screen>
</refsect1>
<refsect1 id="GActionMap.prerequisites" role="prerequisites">
<title role="prerequisites.title">Prerequisites</title>
<para>
GActionMap requires
 <link linkend="GObject">GObject</link>.</para>

</refsect1>
<refsect1 id="GActionMap.implementations" role="implementations">
<title role="implementations.title">Known Implementations</title>
<para>
GActionMap is implemented by
 <link linkend="GApplication">GApplication</link> and  <link linkend="GSimpleActionGroup">GSimpleActionGroup</link>.</para>

</refsect1>

<refsect1 id="GActionMap.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GActionMap.description" role="desc">
<title role="desc.title">Description</title>
<para>The GActionMap interface is implemented by <link linkend="GActionGroup"><type>GActionGroup</type></link>
implementations that operate by containing a number of
named <link linkend="GAction"><type>GAction</type></link> instances, such as <link linkend="GSimpleActionGroup"><type>GSimpleActionGroup</type></link>.</para>
<para>One useful application of this interface is to map the
names of actions from various action groups to unique,
prefixed names (e.g. by prepending "app." or "win.").
This is the motivation for the 'Map' part of the interface
name.</para>

</refsect1>
<refsect1 id="GActionMap.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-action-map-lookup-action" role="function" condition="since:2.32">
<title>g_action_map_lookup_action&#160;()</title>
<indexterm zone="g-action-map-lookup-action" role="2.32"><primary sortas="action_map_lookup_action">g_action_map_lookup_action</primary></indexterm>
<programlisting language="C"><link linkend="GAction"><returnvalue>GAction</returnvalue></link>&#160;*
g_action_map_lookup_action (<parameter><link linkend="GActionMap"><type>GActionMap</type></link> *action_map</parameter>,
                            <parameter>const <link linkend="gchar"><type>gchar</type></link> *action_name</parameter>);</programlisting>
<para>Looks up the action with the name <parameter>action_name</parameter>
 in <parameter>action_map</parameter>
.</para>
<para>If no such action exists, returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<refsect3 id="g-action-map-lookup-action.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>action_map</para></entry>
<entry role="parameter_description"><para>a <link linkend="GActionMap"><type>GActionMap</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>action_name</para></entry>
<entry role="parameter_description"><para>the name of an action</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-action-map-lookup-action.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GAction"><type>GAction</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-action-map-add-action-entries" role="function" condition="since:2.32">
<title>g_action_map_add_action_entries&#160;()</title>
<indexterm zone="g-action-map-add-action-entries" role="2.32"><primary sortas="action_map_add_action_entries">g_action_map_add_action_entries</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_action_map_add_action_entries (<parameter><link linkend="GActionMap"><type>GActionMap</type></link> *action_map</parameter>,
                                 <parameter>const <link linkend="GActionEntry"><type>GActionEntry</type></link> *entries</parameter>,
                                 <parameter><link linkend="gint"><type>gint</type></link> n_entries</parameter>,
                                 <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>A convenience function for creating multiple <link linkend="GSimpleAction"><type>GSimpleAction</type></link> instances
and adding them to a <link linkend="GActionMap"><type>GActionMap</type></link>.</para>
<para>Each action is constructed as per one <link linkend="GActionEntry"><type>GActionEntry</type></link>.</para>
<informalexample><programlisting role="example"><![CDATA[
static void
activate_quit (GSimpleAction *simple,
               GVariant      *parameter,
               gpointer       user_data)
{
  exit (0);
}

static void
activate_print_string (GSimpleAction *simple,
                       GVariant      *parameter,
                       gpointer       user_data)
{
  g_print ("%s\n", g_variant_get_string (parameter, NULL));
}

static GActionGroup *
create_action_group (void)
{
  const GActionEntry entries[] = {
    { "quit",         activate_quit              },
    { "print-string", activate_print_string, "s" }
  };
  GSimpleActionGroup *group;

  group = g_simple_action_group_new ();
  g_action_map_add_action_entries (G_ACTION_MAP (group), entries, G_N_ELEMENTS (entries), NULL);

  return G_ACTION_GROUP (group);
}
]]></programlisting></informalexample>
<para></para>
<refsect3 id="g-action-map-add-action-entries.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>action_map</para></entry>
<entry role="parameter_description"><para>a <link linkend="GActionMap"><type>GActionMap</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>entries</para></entry>
<entry role="parameter_description"><para>a pointer to
the first item in an array of <link linkend="GActionEntry"><type>GActionEntry</type></link> structs. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=n_entries][<acronym>element-type</acronym> GActionEntry]</emphasis></entry></row>
<row><entry role="parameter_name"><para>n_entries</para></entry>
<entry role="parameter_description"><para>the length of <parameter>entries</parameter>
, or -1 if <parameter>entries</parameter>
is <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the user data for signal connections</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-action-map-add-action" role="function" condition="since:2.32">
<title>g_action_map_add_action&#160;()</title>
<indexterm zone="g-action-map-add-action" role="2.32"><primary sortas="action_map_add_action">g_action_map_add_action</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_action_map_add_action (<parameter><link linkend="GActionMap"><type>GActionMap</type></link> *action_map</parameter>,
                         <parameter><link linkend="GAction"><type>GAction</type></link> *action</parameter>);</programlisting>
<para>Adds an action to the <parameter>action_map</parameter>
.</para>
<para>If the action map already contains an action with the same name
as <parameter>action</parameter>
 then the old action is dropped from the action map.</para>
<para>The action map takes its own reference on <parameter>action</parameter>
.</para>
<refsect3 id="g-action-map-add-action.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>action_map</para></entry>
<entry role="parameter_description"><para>a <link linkend="GActionMap"><type>GActionMap</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>action</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAction"><type>GAction</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-action-map-remove-action" role="function" condition="since:2.32">
<title>g_action_map_remove_action&#160;()</title>
<indexterm zone="g-action-map-remove-action" role="2.32"><primary sortas="action_map_remove_action">g_action_map_remove_action</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_action_map_remove_action (<parameter><link linkend="GActionMap"><type>GActionMap</type></link> *action_map</parameter>,
                            <parameter>const <link linkend="gchar"><type>gchar</type></link> *action_name</parameter>);</programlisting>
<para>Removes the named action from the action map.</para>
<para>If no action of this name is in the map then nothing happens.</para>
<refsect3 id="g-action-map-remove-action.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>action_map</para></entry>
<entry role="parameter_description"><para>a <link linkend="GActionMap"><type>GActionMap</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>action_name</para></entry>
<entry role="parameter_description"><para>the name of the action</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>

</refsect1>
<refsect1 id="GActionMap.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GActionMap-struct" role="struct">
<title>GActionMap</title>
<indexterm zone="GActionMap-struct"><primary sortas="ActionMap">GActionMap</primary></indexterm>
<programlisting language="C">typedef struct _GActionMap GActionMap;</programlisting>
<para><link linkend="GActionMap"><type>GActionMap</type></link> is an opaque data structure and can only be accessed
using the following functions.</para>
</refsect2>
<refsect2 id="GActionMapInterface" role="struct" condition="since:2.32">
<title>struct GActionMapInterface</title>
<indexterm zone="GActionMapInterface" role="2.32"><primary sortas="ActionMapInterface">GActionMapInterface</primary></indexterm>
<programlisting language="C">struct GActionMapInterface {
  GTypeInterface g_iface;

  GAction * (* lookup_action) (GActionMap  *action_map,
                               const gchar *action_name);
  void      (* add_action)    (GActionMap  *action_map,
                               GAction     *action);
  void      (* remove_action) (GActionMap  *action_map,
                               const gchar *action_name);
};
</programlisting>
<para>The virtual function table for <link linkend="GActionMap"><type>GActionMap</type></link>.</para>
<refsect3 id="GActionMapInterface.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><structfield id="GActionMapInterface.lookup-action">lookup_action</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the virtual function pointer for <link linkend="g-action-map-lookup-action"><function>g_action_map_lookup_action()</function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GActionMapInterface.add-action">add_action</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the virtual function pointer for <link linkend="g-action-map-add-action"><function>g_action_map_add_action()</function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GActionMapInterface.remove-action">remove_action</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the virtual function pointer for <link linkend="g-action-map-remove-action"><function>g_action_map_remove_action()</function></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="GActionEntry" role="struct">
<title>struct GActionEntry</title>
<indexterm zone="GActionEntry"><primary sortas="ActionEntry">GActionEntry</primary></indexterm>
<programlisting language="C">struct GActionEntry {
  const gchar *name;

  void (* activate) (GSimpleAction *action,
                     GVariant      *parameter,
                     gpointer       user_data);

  const gchar *parameter_type;

  const gchar *state;

  void (* change_state) (GSimpleAction *action,
                         GVariant      *value,
                         gpointer       user_data);
};
</programlisting>
<para>This struct defines a single action.  It is for use with
<link linkend="g-action-map-add-action-entries"><function>g_action_map_add_action_entries()</function></link>.</para>
<para>The order of the items in the structure are intended to reflect
frequency of use.  It is permissible to use an incomplete initialiser
in order to leave some of the later values as <link linkend="NULL:CAPS"><literal>NULL</literal></link>.  All values
after <parameter>name</parameter>
 are optional.  Additional optional fields may be added in
the future.</para>
<para>See <link linkend="g-action-map-add-action-entries"><function>g_action_map_add_action_entries()</function></link> for an example.</para>
<refsect3 id="GActionEntry.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para>const&#160;<link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="GActionEntry.name">name</structfield>;</para></entry>
<entry role="struct_member_description"><para>the name of the action</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GActionEntry.activate">activate</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the callback to connect to the "activate" signal of the
action.  Since GLib 2.40, this can be <link linkend="NULL:CAPS"><literal>NULL</literal></link> for stateful
actions, in which case the default handler is used.  For
boolean-stated actions with no parameter, this is a
toggle.  For other state types (and parameter type equal
to the state type) this will be a function that
just calls <parameter>change_state</parameter>
(which you should provide).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para>const&#160;<link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="GActionEntry.parameter-type">parameter_type</structfield>;</para></entry>
<entry role="struct_member_description"><para>the type of the parameter that must be passed to the
activate function for this action, given as a single
GVariant type string (or <link linkend="NULL:CAPS"><literal>NULL</literal></link> for no parameter)</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para>const&#160;<link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="GActionEntry.state">state</structfield>;</para></entry>
<entry role="struct_member_description"><para>the initial state for this action, given in
<link linkend="gvariant-text">GVariant text format</link>.  The state is parsed
with no extra type information, so type tags must be added to
the string if they are necessary.  Stateless actions should
give <link linkend="NULL:CAPS"><literal>NULL</literal></link> here.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GActionEntry.change-state">change_state</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>the callback to connect to the "change-state" signal
of the action.  All stateful actions should provide a
handler here; stateless actions should not.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>

</refsect1>

</refentry>
