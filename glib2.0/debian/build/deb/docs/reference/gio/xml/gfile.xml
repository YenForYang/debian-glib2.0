<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GFile">
<refmeta>
<refentrytitle role="top_of_page" id="GFile.top_of_page">GFile</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GFile</refname>
<refpurpose>File and Directory Handling</refpurpose>
</refnamediv>

<refsect1 id="GFile.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GFileProgressCallback">*GFileProgressCallback</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GFileReadMoreCallback">*GFileReadMoreCallback</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GFileMeasureProgressCallback">*GFileMeasureProgressCallback</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-new-for-path">g_file_new_for_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-new-for-uri">g_file_new_for_uri</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-new-for-commandline-arg">g_file_new_for_commandline_arg</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-new-for-commandline-arg-and-cwd">g_file_new_for_commandline_arg_and_cwd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-new-tmp">g_file_new_tmp</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-parse-name">g_file_parse_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-new-build-filename">g_file_new_build_filename</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-dup">g_file_dup</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint"><returnvalue>guint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-hash">g_file_hash</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-equal">g_file_equal</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-basename">g_file_get_basename</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-path">g_file_get_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-peek-path">g_file_peek_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-uri">g_file_get_uri</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-parse-name">g_file_get_parse_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-parent">g_file_get_parent</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-has-parent">g_file_has_parent</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-child">g_file_get_child</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-child-for-display-name">g_file_get_child_for_display_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-has-prefix">g_file_has_prefix</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-relative-path">g_file_get_relative_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-resolve-relative-path">g_file_resolve_relative_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-is-native">g_file_is_native</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-has-uri-scheme">g_file_has_uri_scheme</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-get-uri-scheme">g_file_get_uri_scheme</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileInputStream"><returnvalue>GFileInputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-read">g_file_read</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-read-async">g_file_read_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileInputStream"><returnvalue>GFileInputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-read-finish">g_file_read_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-append-to">g_file_append_to</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-create">g_file_create</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-replace">g_file_replace</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-append-to-async">g_file_append_to_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-append-to-finish">g_file_append_to_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-create-async">g_file_create_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-create-finish">g_file_create_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-replace-async">g_file_replace_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-replace-finish">g_file_replace_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileInfo"><returnvalue>GFileInfo</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-query-info">g_file_query_info</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-query-info-async">g_file_query_info_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileInfo"><returnvalue>GFileInfo</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-query-info-finish">g_file_query_info_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-query-exists">g_file_query_exists</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileType"><returnvalue>GFileType</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-query-file-type">g_file_query_file_type</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileInfo"><returnvalue>GFileInfo</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-query-filesystem-info">g_file_query_filesystem_info</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-query-filesystem-info-async">g_file_query_filesystem_info_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileInfo"><returnvalue>GFileInfo</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-query-filesystem-info-finish">g_file_query_filesystem_info_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GAppInfo"><returnvalue>GAppInfo</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-query-default-handler">g_file_query_default_handler</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-measure-disk-usage">g_file_measure_disk_usage</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-measure-disk-usage-async">g_file_measure_disk_usage_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-measure-disk-usage-finish">g_file_measure_disk_usage_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GMount"><returnvalue>GMount</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-find-enclosing-mount">g_file_find_enclosing_mount</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-find-enclosing-mount-async">g_file_find_enclosing_mount_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GMount"><returnvalue>GMount</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-find-enclosing-mount-finish">g_file_find_enclosing_mount_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileEnumerator"><returnvalue>GFileEnumerator</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-enumerate-children">g_file_enumerate_children</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-enumerate-children-async">g_file_enumerate_children_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileEnumerator"><returnvalue>GFileEnumerator</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-enumerate-children-finish">g_file_enumerate_children_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-set-display-name">g_file_set_display_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-display-name-async">g_file_set_display_name_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-set-display-name-finish">g_file_set_display_name_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-delete">g_file_delete</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-delete-async">g_file_delete_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-delete-finish">g_file_delete_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-trash">g_file_trash</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-trash-async">g_file_trash_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-trash-finish">g_file_trash_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-copy">g_file_copy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-copy-async">g_file_copy_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-copy-finish">g_file_copy_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-move">g_file_move</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-make-directory">g_file_make_directory</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-make-directory-async">g_file_make_directory_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-make-directory-finish">g_file_make_directory_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-make-directory-with-parents">g_file_make_directory_with_parents</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-make-symbolic-link">g_file_make_symbolic_link</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileAttributeInfoList"><returnvalue>GFileAttributeInfoList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-query-settable-attributes">g_file_query_settable_attributes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileAttributeInfoList"><returnvalue>GFileAttributeInfoList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-query-writable-namespaces">g_file_query_writable_namespaces</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attribute">g_file_set_attribute</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attributes-from-info">g_file_set_attributes_from_info</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attributes-async">g_file_set_attributes_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attributes-finish">g_file_set_attributes_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attribute-string">g_file_set_attribute_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attribute-byte-string">g_file_set_attribute_byte_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attribute-uint32">g_file_set_attribute_uint32</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attribute-int32">g_file_set_attribute_int32</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attribute-uint64">g_file_set_attribute_uint64</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-set-attribute-int64">g_file_set_attribute_int64</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-mount-mountable">g_file_mount_mountable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-mount-mountable-finish">g_file_mount_mountable_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-unmount-mountable">g_file_unmount_mountable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-unmount-mountable-finish">g_file_unmount_mountable_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-unmount-mountable-with-operation">g_file_unmount_mountable_with_operation</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-unmount-mountable-with-operation-finish">g_file_unmount_mountable_with_operation_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-eject-mountable">g_file_eject_mountable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-eject-mountable-finish">g_file_eject_mountable_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-eject-mountable-with-operation">g_file_eject_mountable_with_operation</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-eject-mountable-with-operation-finish">g_file_eject_mountable_with_operation_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-start-mountable">g_file_start_mountable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-start-mountable-finish">g_file_start_mountable_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-stop-mountable">g_file_stop_mountable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-stop-mountable-finish">g_file_stop_mountable_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-poll-mountable">g_file_poll_mountable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-poll-mountable-finish">g_file_poll_mountable_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-mount-enclosing-volume">g_file_mount_enclosing_volume</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-mount-enclosing-volume-finish">g_file_mount_enclosing_volume_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileMonitor"><returnvalue>GFileMonitor</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-monitor-directory">g_file_monitor_directory</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileMonitor"><returnvalue>GFileMonitor</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-monitor-file">g_file_monitor_file</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileMonitor"><returnvalue>GFileMonitor</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-monitor">g_file_monitor</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GBytes"><returnvalue>GBytes</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-load-bytes">g_file_load_bytes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-load-bytes-async">g_file_load_bytes_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GBytes"><returnvalue>GBytes</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-load-bytes-finish">g_file_load_bytes_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-load-contents">g_file_load_contents</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-load-contents-async">g_file_load_contents_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-load-contents-finish">g_file_load_contents_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-load-partial-contents-async">g_file_load_partial_contents_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-load-partial-contents-finish">g_file_load_partial_contents_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-replace-contents">g_file_replace_contents</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-replace-contents-async">g_file_replace_contents_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-replace-contents-bytes-async">g_file_replace_contents_bytes_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-replace-contents-finish">g_file_replace_contents_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-copy-attributes">g_file_copy_attributes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-create-readwrite">g_file_create_readwrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-create-readwrite-async">g_file_create_readwrite_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-create-readwrite-finish">g_file_create_readwrite_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-open-readwrite">g_file_open_readwrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-open-readwrite-async">g_file_open_readwrite_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-open-readwrite-finish">g_file_open_readwrite_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-replace-readwrite">g_file_replace_readwrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-replace-readwrite-async">g_file_replace_readwrite_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-file-replace-readwrite-finish">g_file_replace_readwrite_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-file-supports-thread-contexts">g_file_supports_thread_contexts</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GFile.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GFile-struct">GFile</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GFileIface">GFileIface</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GFileQueryInfoFlags">GFileQueryInfoFlags</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GFileCreateFlags">GFileCreateFlags</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GFileCopyFlags">GFileCopyFlags</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GFileMonitorFlags">GFileMonitorFlags</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GFileMeasureFlags">GFileMeasureFlags</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GFilesystemPreviewType">GFilesystemPreviewType</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GFile.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GEnum">GEnum</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GFilesystemPreviewType
    <link linkend="GFlags">GFlags</link>
    <phrase role="lineart">&#9500;&#9472;&#9472;</phrase> GFileCopyFlags
    <phrase role="lineart">&#9500;&#9472;&#9472;</phrase> GFileCreateFlags
    <phrase role="lineart">&#9500;&#9472;&#9472;</phrase> GFileMeasureFlags
    <phrase role="lineart">&#9500;&#9472;&#9472;</phrase> GFileMonitorFlags
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GFileQueryInfoFlags
    <link linkend="GInterface">GInterface</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GFile
</screen>
</refsect1>
<refsect1 id="GFile.prerequisites" role="prerequisites">
<title role="prerequisites.title">Prerequisites</title>
<para>
GFile requires
 <link linkend="GObject">GObject</link>.</para>

</refsect1>

<refsect1 id="GFile.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GFile.description" role="desc">
<title role="desc.title">Description</title>
<para><link linkend="GFile"><type>GFile</type></link> is a high level abstraction for manipulating files on a
virtual file system. <link linkend="GFiles"><type>GFiles</type></link> are lightweight, immutable objects
that do no I/O upon creation. It is necessary to understand that
<link linkend="GFile"><type>GFile</type></link> objects do not represent files, merely an identifier for a
file. All file content I/O is implemented as streaming operations
(see <link linkend="GInputStream"><type>GInputStream</type></link> and <link linkend="GOutputStream"><type>GOutputStream</type></link>).</para>
<para>To construct a <link linkend="GFile"><type>GFile</type></link>, you can use:</para>
<itemizedlist>
<listitem><para>g_file_new_for_path() if you have a path.</para></listitem>
<listitem><para>g_file_new_for_uri() if you have a URI.</para></listitem>
<listitem><para>g_file_new_for_commandline_arg() for a command line argument.</para></listitem>
<listitem><para>g_file_new_tmp() to create a temporary file from a template.</para></listitem>
<listitem><para>g_file_parse_name() from a UTF-8 string gotten from <link linkend="g-file-get-parse-name"><function>g_file_get_parse_name()</function></link>.</para></listitem>
<listitem>
<para>g_file_new_build_filename() to create a file from path elements.</para>
</listitem>
</itemizedlist>
<para>One way to think of a <link linkend="GFile"><type>GFile</type></link> is as an abstraction of a pathname. For
normal files the system pathname is what is stored internally, but as
<link linkend="GFiles"><type>GFiles</type></link> are extensible it could also be something else that corresponds
to a pathname in a userspace implementation of a filesystem.</para>
<para><link linkend="GFiles"><type>GFiles</type></link> make up hierarchies of directories and files that correspond to
the files on a filesystem. You can move through the file system with
<link linkend="GFile"><type>GFile</type></link> using <link linkend="g-file-get-parent"><function>g_file_get_parent()</function></link> to get an identifier for the parent
directory, <link linkend="g-file-get-child"><function>g_file_get_child()</function></link> to get a child within a directory,
<link linkend="g-file-resolve-relative-path"><function>g_file_resolve_relative_path()</function></link> to resolve a relative path between two
<link linkend="GFiles"><type>GFiles</type></link>. There can be multiple hierarchies, so you may not end up at
the same root if you repeatedly call <link linkend="g-file-get-parent"><function>g_file_get_parent()</function></link> on two different
files.</para>
<para>All <link linkend="GFiles"><type>GFiles</type></link> have a basename (get with <link linkend="g-file-get-basename"><function>g_file_get_basename()</function></link>). These names
are byte strings that are used to identify the file on the filesystem
(relative to its parent directory) and there is no guarantees that they
have any particular charset encoding or even make any sense at all. If
you want to use filenames in a user interface you should use the display
name that you can get by requesting the
<link linkend="G-FILE-ATTRIBUTE-STANDARD-DISPLAY-NAME:CAPS"><literal>G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME</literal></link> attribute with <link linkend="g-file-query-info"><function>g_file_query_info()</function></link>.
This is guaranteed to be in UTF-8 and can be used in a user interface.
But always store the real basename or the <link linkend="GFile"><type>GFile</type></link> to use to actually
access the file, because there is no way to go from a display name to
the actual name.</para>
<para>Using <link linkend="GFile"><type>GFile</type></link> as an identifier has the same weaknesses as using a path
in that there may be multiple aliases for the same file. For instance,
hard or soft links may cause two different <link linkend="GFiles"><type>GFiles</type></link> to refer to the same
file. Other possible causes for aliases are: case insensitive filesystems,
short and long names on FAT/NTFS, or bind mounts in Linux. If you want to
check if two <link linkend="GFiles"><type>GFiles</type></link> point to the same file you can query for the
<link linkend="G-FILE-ATTRIBUTE-ID-FILE:CAPS"><literal>G_FILE_ATTRIBUTE_ID_FILE</literal></link> attribute. Note that <link linkend="GFile"><type>GFile</type></link> does some trivial
canonicalization of pathnames passed in, so that trivial differences in
the path string used at creation (duplicated slashes, slash at end of
path, "." or ".." path segments, etc) does not create different <link linkend="GFiles"><type>GFiles</type></link>.</para>
<para>Many <link linkend="GFile"><type>GFile</type></link> operations have both synchronous and asynchronous versions
to suit your application. Asynchronous versions of synchronous functions
simply have <link linkend="async"><function>_async()</function></link> appended to their function names. The asynchronous
I/O functions call a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> which is then used to finalize
the operation, producing a GAsyncResult which is then passed to the
function's matching <link linkend="finish"><function>_finish()</function></link> operation.</para>
<para>It is highly recommended to use asynchronous calls when running within a
shared main loop, such as in the main thread of an application. This avoids
I/O operations blocking other sources on the main loop from being dispatched.
Synchronous I/O operations should be performed from worker threads. See the
<link linkend="async-programming">introduction to asynchronous programming section</link> for
more.</para>
<para>Some <link linkend="GFile"><type>GFile</type></link> operations almost always take a noticeable amount of time, and
so do not have synchronous analogs. Notable cases include:</para>
<itemizedlist>
<listitem><para>g_file_mount_mountable() to mount a mountable file.</para></listitem>
<listitem><para>g_file_unmount_mountable_with_operation() to unmount a mountable file.</para></listitem>
<listitem>
<para>g_file_eject_mountable_with_operation() to eject a mountable file.</para>
</listitem>
</itemizedlist>
<refsect3 id="gfile-etag"><title>Entity Tags</title><para>One notable feature of <link linkend="GFiles"><type>GFiles</type></link> are entity tags, or "etags" for
short. Entity tags are somewhat like a more abstract version of the
traditional mtime, and can be used to quickly determine if the file
has been modified from the version on the file system. See the
HTTP 1.1 
<ulink url="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">specification</ulink>
for HTTP Etag headers, which are a very similar concept.</para>
</refsect3>

</refsect1>
<refsect1 id="GFile.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="GFileProgressCallback" role="function">
<title>GFileProgressCallback&#160;()</title>
<indexterm zone="GFileProgressCallback"><primary sortas="FileProgressCallback">GFileProgressCallback</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GFileProgressCallback<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="goffset"><type>goffset</type></link> current_num_bytes</parameter>,
                          <parameter><link linkend="goffset"><type>goffset</type></link> total_num_bytes</parameter>,
                          <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>When doing file operations that may take a while, such as moving
a file or copying a file, a progress callback is used to pass how
far along that operation is to the application.</para>
<refsect3 id="GFileProgressCallback.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>current_num_bytes</para></entry>
<entry role="parameter_description"><para>the current number of bytes in the operation.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>total_num_bytes</para></entry>
<entry role="parameter_description"><para>the total number of bytes in the operation.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to the callback.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GFileReadMoreCallback" role="function">
<title>GFileReadMoreCallback&#160;()</title>
<indexterm zone="GFileReadMoreCallback"><primary sortas="FileReadMoreCallback">GFileReadMoreCallback</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GFileReadMoreCallback<phrase role="c_punctuation">)</phrase> (<parameter>const <link linkend="char"><type>char</type></link> *file_contents</parameter>,
                          <parameter><link linkend="goffset"><type>goffset</type></link> file_size</parameter>,
                          <parameter><link linkend="gpointer"><type>gpointer</type></link> callback_data</parameter>);</programlisting>
<para>When loading the partial contents of a file with <link linkend="g-file-load-partial-contents-async"><function>g_file_load_partial_contents_async()</function></link>,
it may become necessary to determine if any more data from the file should be loaded.
A <link linkend="GFileReadMoreCallback"><type>GFileReadMoreCallback</type></link> function facilitates this by returning <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if more data
should be read, or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
<refsect3 id="GFileReadMoreCallback.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file_contents</para></entry>
<entry role="parameter_description"><para>the data as currently read.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>file_size</para></entry>
<entry role="parameter_description"><para>the size of the data currently read.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>callback_data</para></entry>
<entry role="parameter_description"><para>data passed to the callback. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="GFileReadMoreCallback.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if more data should be read back. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="GFileMeasureProgressCallback" role="function" condition="since:2.38">
<title>GFileMeasureProgressCallback&#160;()</title>
<indexterm zone="GFileMeasureProgressCallback" role="2.38"><primary sortas="FileMeasureProgressCallback">GFileMeasureProgressCallback</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GFileMeasureProgressCallback<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="gboolean"><type>gboolean</type></link> reporting</parameter>,
                                 <parameter><link linkend="guint64"><type>guint64</type></link> current_size</parameter>,
                                 <parameter><link linkend="guint64"><type>guint64</type></link> num_dirs</parameter>,
                                 <parameter><link linkend="guint64"><type>guint64</type></link> num_files</parameter>,
                                 <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>This callback type is used by <link linkend="g-file-measure-disk-usage"><function>g_file_measure_disk_usage()</function></link> to make
periodic progress reports when measuring the amount of disk spaced
used by a directory.</para>
<para>These calls are made on a best-effort basis and not all types of
<link linkend="GFile"><type>GFile</type></link> will support them.  At the minimum, however, one call will
always be made immediately.</para>
<para>In the case that there is no support, <parameter>reporting</parameter>
 will be set to
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> (and the other values undefined) and no further calls will be
made.  Otherwise, the <parameter>reporting</parameter>
 will be <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> and the other values
all-zeros during the first (immediate) call.  In this way, you can
know which type of progress UI to show without a delay.</para>
<para>For <link linkend="g-file-measure-disk-usage"><function>g_file_measure_disk_usage()</function></link> the callback is made directly.  For
<link linkend="g-file-measure-disk-usage-async"><function>g_file_measure_disk_usage_async()</function></link> the callback is made via the
default main context of the calling thread (ie: the same way that the
final async result would be reported).</para>
<para><parameter>current_size</parameter>
 is in the same units as requested by the operation (see
<link linkend="G-FILE-DISK-USAGE-APPARENT-SIZE:CAPS"><literal>G_FILE_DISK_USAGE_APPARENT_SIZE</literal></link>).</para>
<para>The frequency of the updates is implementation defined, but is
ideally about once every 200ms.</para>
<para>The last progress callback may or may not be equal to the final
result.  Always check the async result to get the final value.</para>
<refsect3 id="GFileMeasureProgressCallback.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>reporting</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if more reports will come</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>current_size</para></entry>
<entry role="parameter_description"><para>the current cumulative size measurement</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>num_dirs</para></entry>
<entry role="parameter_description"><para>the number of directories visited so far</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>num_files</para></entry>
<entry role="parameter_description"><para>the number of non-directory files encountered</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data passed to the original request for this callback</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="g-file-new-for-path" role="function">
<title>g_file_new_for_path&#160;()</title>
<indexterm zone="g-file-new-for-path"><primary sortas="file_new_for_path">g_file_new_for_path</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_new_for_path (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>);</programlisting>
<para>Constructs a <link linkend="GFile"><type>GFile</type></link> for a given path. This operation never
fails, but the returned object might not support any I/O
operation if <parameter>path</parameter>
 is malformed.</para>
<refsect3 id="g-file-new-for-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>a string containing a relative or absolute path.
The string must be encoded in the glib filename encoding. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-new-for-path.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link> for the given <parameter>path</parameter>
.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-new-for-uri" role="function">
<title>g_file_new_for_uri&#160;()</title>
<indexterm zone="g-file-new-for-uri"><primary sortas="file_new_for_uri">g_file_new_for_uri</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_new_for_uri (<parameter>const <link linkend="char"><type>char</type></link> *uri</parameter>);</programlisting>
<para>Constructs a <link linkend="GFile"><type>GFile</type></link> for a given URI. This operation never
fails, but the returned object might not support any I/O
operation if <parameter>uri</parameter>
 is malformed or if the uri type is
not supported.</para>
<refsect3 id="g-file-new-for-uri.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>uri</para></entry>
<entry role="parameter_description"><para>a UTF-8 string containing a URI</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-new-for-uri.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link> for the given <parameter>uri</parameter>
.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-new-for-commandline-arg" role="function">
<title>g_file_new_for_commandline_arg&#160;()</title>
<indexterm zone="g-file-new-for-commandline-arg"><primary sortas="file_new_for_commandline_arg">g_file_new_for_commandline_arg</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_new_for_commandline_arg (<parameter>const <link linkend="char"><type>char</type></link> *arg</parameter>);</programlisting>
<para>Creates a <link linkend="GFile"><type>GFile</type></link> with the given argument from the command line.
The value of <parameter>arg</parameter>
 can be either a URI, an absolute path or a
relative path resolved relative to the current working directory.
This operation never fails, but the returned object might not
support any I/O operation if <parameter>arg</parameter>
 points to a malformed path.</para>
<para>Note that on Windows, this function expects its argument to be in
UTF-8 -- not the system code page.  This means that you
should not use this function with string from argv as it is passed
to <link linkend="main"><function>main()</function></link>.  <link linkend="g-win32-get-command-line"><function>g_win32_get_command_line()</function></link> will return a UTF-8 version of
the commandline.  <link linkend="GApplication"><type>GApplication</type></link> also uses UTF-8 but
<link linkend="g-application-command-line-create-file-for-arg"><function>g_application_command_line_create_file_for_arg()</function></link> may be more useful
for you there.  It is also always possible to use this function with
<link linkend="GOptionContext"><type>GOptionContext</type></link> arguments of type <link linkend="G-OPTION-ARG-FILENAME:CAPS"><literal>G_OPTION_ARG_FILENAME</literal></link>.</para>
<refsect3 id="g-file-new-for-commandline-arg.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>arg</para></entry>
<entry role="parameter_description"><para>a command line string. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-new-for-commandline-arg.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link>.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-new-for-commandline-arg-and-cwd" role="function" condition="since:2.36">
<title>g_file_new_for_commandline_arg_and_cwd&#160;()</title>
<indexterm zone="g-file-new-for-commandline-arg-and-cwd" role="2.36"><primary sortas="file_new_for_commandline_arg_and_cwd">g_file_new_for_commandline_arg_and_cwd</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_new_for_commandline_arg_and_cwd
                               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *arg</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *cwd</parameter>);</programlisting>
<para>Creates a <link linkend="GFile"><type>GFile</type></link> with the given argument from the command line.</para>
<para>This function is similar to <link linkend="g-file-new-for-commandline-arg"><function>g_file_new_for_commandline_arg()</function></link> except
that it allows for passing the current working directory as an
argument instead of using the current working directory of the
process.</para>
<para>This is useful if the commandline argument was given in a context
other than the invocation of the current process.</para>
<para>See also <link linkend="g-application-command-line-create-file-for-arg"><function>g_application_command_line_create_file_for_arg()</function></link>.</para>
<refsect3 id="g-file-new-for-commandline-arg-and-cwd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>arg</para></entry>
<entry role="parameter_description"><para>a command line string. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cwd</para></entry>
<entry role="parameter_description"><para>the current working directory of the commandline. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-new-for-commandline-arg-and-cwd.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.36">2.36</link></para></refsect2>
<refsect2 id="g-file-new-tmp" role="function" condition="since:2.32">
<title>g_file_new_tmp&#160;()</title>
<indexterm zone="g-file-new-tmp" role="2.32"><primary sortas="file_new_tmp">g_file_new_tmp</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_new_tmp (<parameter>const <link linkend="char"><type>char</type></link> *tmpl</parameter>,
                <parameter><link linkend="GFileIOStream"><type>GFileIOStream</type></link> **iostream</parameter>,
                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Opens a file in the preferred directory for temporary files (as
returned by <link linkend="g-get-tmp-dir"><function>g_get_tmp_dir()</function></link>) and returns a <link linkend="GFile"><type>GFile</type></link> and
<link linkend="GFileIOStream"><type>GFileIOStream</type></link> pointing to it.</para>
<para><parameter>tmpl</parameter>
 should be a string in the GLib file name encoding
containing a sequence of six 'X' characters, and containing no
directory components. If it is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a default template is used.</para>
<para>Unlike the other <link linkend="GFile"><type>GFile</type></link> constructors, this will return <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
a temporary file could not be created.</para>
<refsect3 id="g-file-new-tmp.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>tmpl</para></entry>
<entry role="parameter_description"><para>Template for the file
name, as in <link linkend="g-file-open-tmp"><function>g_file_open_tmp()</function></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> for a default template. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>iostream</para></entry>
<entry role="parameter_description"><para>on return, a <link linkend="GFileIOStream"><type>GFileIOStream</type></link> for the created file. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-new-tmp.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link>.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-file-parse-name" role="function">
<title>g_file_parse_name&#160;()</title>
<indexterm zone="g-file-parse-name"><primary sortas="file_parse_name">g_file_parse_name</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_parse_name (<parameter>const <link linkend="char"><type>char</type></link> *parse_name</parameter>);</programlisting>
<para>Constructs a <link linkend="GFile"><type>GFile</type></link> with the given <parameter>parse_name</parameter>
 (i.e. something
given by <link linkend="g-file-get-parse-name"><function>g_file_get_parse_name()</function></link>). This operation never fails,
but the returned object might not support any I/O operation if
the <parameter>parse_name</parameter>
 cannot be parsed.</para>
<refsect3 id="g-file-parse-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>parse_name</para></entry>
<entry role="parameter_description"><para>a file name or path to be parsed</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-parse-name.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-new-build-filename" role="function" condition="since:2.56">
<title>g_file_new_build_filename&#160;()</title>
<indexterm zone="g-file-new-build-filename" role="2.56"><primary sortas="file_new_build_filename">g_file_new_build_filename</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_new_build_filename (<parameter>const <link linkend="gchar"><type>gchar</type></link> *first_element</parameter>,
                           <parameter>...</parameter>);</programlisting>
<para>Constructs a <link linkend="GFile"><type>GFile</type></link> from a series of elements using the correct
separator for filenames.</para>
<para>Using this function is equivalent to calling <link linkend="g-build-filename"><function>g_build_filename()</function></link>,
followed by <link linkend="g-file-new-for-path"><function>g_file_new_for_path()</function></link> on the result.</para>
<refsect3 id="g-file-new-build-filename.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>first_element</para></entry>
<entry role="parameter_description"><para>the first element in the path. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>remaining elements in path, terminated by <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-new-build-filename.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.56">2.56</link></para></refsect2>
<refsect2 id="g-file-dup" role="function">
<title>g_file_dup&#160;()</title>
<indexterm zone="g-file-dup"><primary sortas="file_dup">g_file_dup</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_dup (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Duplicates a <link linkend="GFile"><type>GFile</type></link> handle. This operation does not duplicate
the actual file or directory represented by the <link linkend="GFile"><type>GFile</type></link>; see
<link linkend="g-file-copy"><function>g_file_copy()</function></link> if attempting to copy a file.</para>
<para>g_file_dup() is useful when a second handle is needed to the same underlying
file, for use in a separate thread (<link linkend="GFile"><type>GFile</type></link> is not thread-safe). For use
within the same thread, use <link linkend="g-object-ref"><function>g_object_ref()</function></link> to increment the existing object’s
reference count.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-dup.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-dup.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GFile"><type>GFile</type></link> that is a duplicate
of the given <link linkend="GFile"><type>GFile</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-hash" role="function">
<title>g_file_hash&#160;()</title>
<indexterm zone="g-file-hash"><primary sortas="file_hash">g_file_hash</primary></indexterm>
<programlisting language="C"><link linkend="guint"><returnvalue>guint</returnvalue></link>
g_file_hash (<parameter><link linkend="gconstpointer"><type>gconstpointer</type></link> file</parameter>);</programlisting>
<para>Creates a hash value for a <link linkend="GFile"><type>GFile</type></link>.</para>
<para>This call does no blocking I/O.</para>
<para>Virtual: hash</para>
<refsect3 id="g-file-hash.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para><link linkend="gconstpointer"><type>gconstpointer</type></link> to a <link linkend="GFile"><type>GFile</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> GFile]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-hash.returns" role="returns">
<title>Returns</title>
<para> 0 if <parameter>file</parameter>
is not a valid <link linkend="GFile"><type>GFile</type></link>, otherwise an
integer that can be used as hash value for the <link linkend="GFile"><type>GFile</type></link>.
This function is intended for easily hashing a <link linkend="GFile"><type>GFile</type></link> to
add to a <link linkend="GHashTable"><type>GHashTable</type></link> or similar data structure.</para>
</refsect3></refsect2>
<refsect2 id="g-file-equal" role="function">
<title>g_file_equal&#160;()</title>
<indexterm zone="g-file-equal"><primary sortas="file_equal">g_file_equal</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_equal (<parameter><link linkend="GFile"><type>GFile</type></link> *file1</parameter>,
              <parameter><link linkend="GFile"><type>GFile</type></link> *file2</parameter>);</programlisting>
<para>Checks if the two given <link linkend="GFiles"><type>GFiles</type></link> refer to the same file.</para>
<para>Note that two <link linkend="GFiles"><type>GFiles</type></link> that differ can still refer to the same
file on the filesystem due to various forms of filename
aliasing.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-equal.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file1</para></entry>
<entry role="parameter_description"><para>the first <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>file2</para></entry>
<entry role="parameter_description"><para>the second <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-equal.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>file1</parameter>
and <parameter>file2</parameter>
are equal.</para>
</refsect3></refsect2>
<refsect2 id="g-file-get-basename" role="function">
<title>g_file_get_basename&#160;()</title>
<indexterm zone="g-file-get-basename"><primary sortas="file_get_basename">g_file_get_basename</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_file_get_basename (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Gets the base name (the last component of the path) for a given <link linkend="GFile"><type>GFile</type></link>.</para>
<para>If called for the top level of a system (such as the filesystem root
or a uri like sftp://host/) it will return a single directory separator
(and on Windows, possibly a drive letter).</para>
<para>The base name is a byte string (not UTF-8). It has no defined encoding
or rules other than it may not contain zero bytes.  If you want to use
filenames in a user interface you should use the display name that you
can get by requesting the <link linkend="G-FILE-ATTRIBUTE-STANDARD-DISPLAY-NAME:CAPS"><literal>G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME</literal></link>
attribute with <link linkend="g-file-query-info"><function>g_file_query_info()</function></link>.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-basename.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-basename.returns" role="returns">
<title>Returns</title>
<para>string containing the <link linkend="GFile"><type>GFile</type></link>'s
base name, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if given <link linkend="GFile"><type>GFile</type></link> is invalid. The returned string
should be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>type</acronym> filename][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-get-path" role="function">
<title>g_file_get_path&#160;()</title>
<indexterm zone="g-file-get-path"><primary sortas="file_get_path">g_file_get_path</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_file_get_path (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Gets the local pathname for <link linkend="GFile"><type>GFile</type></link>, if one exists. If non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, this is
guaranteed to be an absolute, canonical path. It might contain symlinks.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-path.returns" role="returns">
<title>Returns</title>
<para>string containing the <link linkend="GFile"><type>GFile</type></link>'s path,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such path exists. The returned string should be freed
with <link linkend="g-free"><function>g_free()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>type</acronym> filename][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-peek-path" role="function" condition="since:2.56">
<title>g_file_peek_path&#160;()</title>
<indexterm zone="g-file-peek-path" role="2.56"><primary sortas="file_peek_path">g_file_peek_path</primary></indexterm>
<programlisting language="C">const <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_file_peek_path (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Exactly like <link linkend="g-file-get-path"><function>g_file_get_path()</function></link>, but caches the result via
<link linkend="g-object-set-qdata-full"><function>g_object_set_qdata_full()</function></link>.  This is useful for example in C
applications which mix <literal>g_file_*</literal> APIs with native ones.  It
also avoids an extra duplicated string when possible, so will be
generally more efficient.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-peek-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-peek-path.returns" role="returns">
<title>Returns</title>
<para>string containing the <link linkend="GFile"><type>GFile</type></link>'s path,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such path exists. The returned string is owned by <parameter>file</parameter>
. </para>
<para><emphasis role="annotation">[<acronym>type</acronym> filename][<acronym>nullable</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.56">2.56</link></para></refsect2>
<refsect2 id="g-file-get-uri" role="function">
<title>g_file_get_uri&#160;()</title>
<indexterm zone="g-file-get-uri"><primary sortas="file_get_uri">g_file_get_uri</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_file_get_uri (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Gets the URI for the <parameter>file</parameter>
.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-uri.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-uri.returns" role="returns">
<title>Returns</title>
<para> a string containing the <link linkend="GFile"><type>GFile</type></link>'s URI.
The returned string should be freed with <link linkend="g-free"><function>g_free()</function></link>
when no longer needed.</para>
</refsect3></refsect2>
<refsect2 id="g-file-get-parse-name" role="function">
<title>g_file_get_parse_name&#160;()</title>
<indexterm zone="g-file-get-parse-name"><primary sortas="file_get_parse_name">g_file_get_parse_name</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_file_get_parse_name (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Gets the parse name of the <parameter>file</parameter>
.
A parse name is a UTF-8 string that describes the
file such that one can get the <link linkend="GFile"><type>GFile</type></link> back using
<link linkend="g-file-parse-name"><function>g_file_parse_name()</function></link>.</para>
<para>This is generally used to show the <link linkend="GFile"><type>GFile</type></link> as a nice
full-pathname kind of string in a user interface,
like in a location entry.</para>
<para>For local files with names that can safely be converted
to UTF-8 the pathname is used, otherwise the IRI is used
(a form of URI that allows UTF-8 characters unescaped).</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-parse-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-parse-name.returns" role="returns">
<title>Returns</title>
<para> a string containing the <link linkend="GFile"><type>GFile</type></link>'s parse name.
The returned string should be freed with <link linkend="g-free"><function>g_free()</function></link>
when no longer needed.</para>
</refsect3></refsect2>
<refsect2 id="g-file-get-parent" role="function">
<title>g_file_get_parent&#160;()</title>
<indexterm zone="g-file-get-parent"><primary sortas="file_get_parent">g_file_get_parent</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_get_parent (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Gets the parent directory for the <parameter>file</parameter>
.
If the <parameter>file</parameter>
 represents the root directory of the
file system, then <link linkend="NULL:CAPS"><literal>NULL</literal></link> will be returned.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-parent.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-parent.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFile"><type>GFile</type></link> structure to the
parent of the given <link linkend="GFile"><type>GFile</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if there is no parent. Free
the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-has-parent" role="function" condition="since:2.24">
<title>g_file_has_parent&#160;()</title>
<indexterm zone="g-file-has-parent" role="2.24"><primary sortas="file_has_parent">g_file_has_parent</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_has_parent (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                   <parameter><link linkend="GFile"><type>GFile</type></link> *parent</parameter>);</programlisting>
<para>Checks if <parameter>file</parameter>
 has a parent, and optionally, if it is <parameter>parent</parameter>
.</para>
<para>If <parameter>parent</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then this function returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>file</parameter>
 has any
parent at all.  If <parameter>parent</parameter>
 is non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> then <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is only returned
if <parameter>file</parameter>
 is an immediate child of <parameter>parent</parameter>
.</para>
<refsect3 id="g-file-has-parent.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>the parent to check for, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-has-parent.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>file</parameter>
is an immediate child of <parameter>parent</parameter>
(or any parent in
the case that <parameter>parent</parameter>
is <link linkend="NULL:CAPS"><literal>NULL</literal></link>).</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.24">2.24</link></para></refsect2>
<refsect2 id="g-file-get-child" role="function">
<title>g_file_get_child&#160;()</title>
<indexterm zone="g-file-get-child"><primary sortas="file_get_child">g_file_get_child</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_get_child (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                  <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>Gets a child of <parameter>file</parameter>
 with basename equal to <parameter>name</parameter>
.</para>
<para>Note that the file with that specific name might not exist, but
you can still have a <link linkend="GFile"><type>GFile</type></link> that points to it. You can use this
for instance to create that file.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-child.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>string containing the child's basename. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-child.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFile"><type>GFile</type></link> to a child specified by <parameter>name</parameter>
.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-get-child-for-display-name" role="function">
<title>g_file_get_child_for_display_name&#160;()</title>
<indexterm zone="g-file-get-child-for-display-name"><primary sortas="file_get_child_for_display_name">g_file_get_child_for_display_name</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_get_child_for_display_name (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                   <parameter>const <link linkend="char"><type>char</type></link> *display_name</parameter>,
                                   <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Gets the child of <parameter>file</parameter>
 for a given <parameter>display_name</parameter>
 (i.e. a UTF-8
version of the name). If this function fails, it returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
and <parameter>error</parameter>
 will be set. This is very useful when constructing a
<link linkend="GFile"><type>GFile</type></link> for a new file and the user entered the filename in the
user interface, for instance when you select a directory and
type a filename in the file selector.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-child-for-display-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>display_name</para></entry>
<entry role="parameter_description"><para>string to a possible child</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>return location for an error</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-child-for-display-name.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFile"><type>GFile</type></link> to the specified child, or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the display name couldn't be converted.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-has-prefix" role="function">
<title>g_file_has_prefix&#160;()</title>
<indexterm zone="g-file-has-prefix"><primary sortas="file_has_prefix">g_file_has_prefix</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_has_prefix (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                   <parameter><link linkend="GFile"><type>GFile</type></link> *prefix</parameter>);</programlisting>
<para>Checks whether <parameter>file</parameter>
 has the prefix specified by <parameter>prefix</parameter>
.</para>
<para>In other words, if the names of initial elements of <parameter>file</parameter>
's
pathname match <parameter>prefix</parameter>
. Only full pathname elements are matched,
so a path like /foo is not considered a prefix of /foobar, only
of /foo/bar.</para>
<para>A <link linkend="GFile"><type>GFile</type></link> is not a prefix of itself. If you want to check for
equality, use <link linkend="g-file-equal"><function>g_file_equal()</function></link>.</para>
<para>This call does no I/O, as it works purely on names. As such it can
sometimes return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> even if <parameter>file</parameter>
 is inside a <parameter>prefix</parameter>
 (from a
filesystem point of view), because the prefix of <parameter>file</parameter>
 is an alias
of <parameter>prefix</parameter>
.</para>
<para>Virtual: prefix_matches</para>
<refsect3 id="g-file-has-prefix.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>prefix</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-has-prefix.returns" role="returns">
<title>Returns</title>
<para>  <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>files</parameter>
's parent, grandparent, etc is <parameter>prefix</parameter>
,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-get-relative-path" role="function">
<title>g_file_get_relative_path&#160;()</title>
<indexterm zone="g-file-get-relative-path"><primary sortas="file_get_relative_path">g_file_get_relative_path</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_file_get_relative_path (<parameter><link linkend="GFile"><type>GFile</type></link> *parent</parameter>,
                          <parameter><link linkend="GFile"><type>GFile</type></link> *descendant</parameter>);</programlisting>
<para>Gets the path for <parameter>descendant</parameter>
 relative to <parameter>parent</parameter>
.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-relative-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>descendant</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-relative-path.returns" role="returns">
<title>Returns</title>
<para>string with the relative path from
<parameter>descendant</parameter>
to <parameter>parent</parameter>
, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>descendant</parameter>
doesn't have <parameter>parent</parameter>
as
prefix. The returned string should be freed with <link linkend="g-free"><function>g_free()</function></link> when
no longer needed. </para>
<para><emphasis role="annotation">[<acronym>type</acronym> filename][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-resolve-relative-path" role="function">
<title>g_file_resolve_relative_path&#160;()</title>
<indexterm zone="g-file-resolve-relative-path"><primary sortas="file_resolve_relative_path">g_file_resolve_relative_path</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_resolve_relative_path (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                              <parameter>const <link linkend="char"><type>char</type></link> *relative_path</parameter>);</programlisting>
<para>Resolves a relative path for <parameter>file</parameter>
 to an absolute path.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-resolve-relative-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>relative_path</para></entry>
<entry role="parameter_description"><para>a given relative path string. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-resolve-relative-path.returns" role="returns">
<title>Returns</title>
<para><link linkend="GFile"><type>GFile</type></link> to the resolved path.
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>relative_path</parameter>
is <link linkend="NULL:CAPS"><literal>NULL</literal></link> or if <parameter>file</parameter>
is invalid.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-is-native" role="function">
<title>g_file_is_native&#160;()</title>
<indexterm zone="g-file-is-native"><primary sortas="file_is_native">g_file_is_native</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_is_native (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Checks to see if a file is native to the platform.</para>
<para>A native file is one expressed in the platform-native filename format,
e.g. "C:\Windows" or "/usr/bin/". This does not mean the file is local,
as it might be on a locally mounted remote filesystem.</para>
<para>On some systems non-native files may be available using the native
filesystem via a userspace filesystem (FUSE), in these cases this call
will return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, but <link linkend="g-file-get-path"><function>g_file_get_path()</function></link> will still return a native path.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-is-native.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-is-native.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>file</parameter>
is native</para>
</refsect3></refsect2>
<refsect2 id="g-file-has-uri-scheme" role="function">
<title>g_file_has_uri_scheme&#160;()</title>
<indexterm zone="g-file-has-uri-scheme"><primary sortas="file_has_uri_scheme">g_file_has_uri_scheme</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_has_uri_scheme (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                       <parameter>const <link linkend="char"><type>char</type></link> *uri_scheme</parameter>);</programlisting>
<para>Checks to see if a <link linkend="GFile"><type>GFile</type></link> has a given URI scheme.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-has-uri-scheme.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>uri_scheme</para></entry>
<entry role="parameter_description"><para>a string containing a URI scheme</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-has-uri-scheme.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <link linkend="GFile"><type>GFile</type></link>'s backend supports the
given URI scheme, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if URI scheme is <link linkend="NULL:CAPS"><literal>NULL</literal></link>,
not supported, or <link linkend="GFile"><type>GFile</type></link> is invalid.</para>
</refsect3></refsect2>
<refsect2 id="g-file-get-uri-scheme" role="function">
<title>g_file_get_uri_scheme&#160;()</title>
<indexterm zone="g-file-get-uri-scheme"><primary sortas="file_get_uri_scheme">g_file_get_uri_scheme</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_file_get_uri_scheme (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Gets the URI scheme for a <link linkend="GFile"><type>GFile</type></link>.
RFC 3986 decodes the scheme as:</para>
<informalexample><programlisting role="example"><![CDATA[
URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
]]></programlisting></informalexample>
<para>
Common schemes include "file", "http", "ftp", etc.</para>
<para>This call does no blocking I/O.</para>
<refsect3 id="g-file-get-uri-scheme.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-get-uri-scheme.returns" role="returns">
<title>Returns</title>
<para> a string containing the URI scheme for the given
<link linkend="GFile"><type>GFile</type></link>. The returned string should be freed with <link linkend="g-free"><function>g_free()</function></link>
when no longer needed.</para>
</refsect3></refsect2>
<refsect2 id="g-file-read" role="function">
<title>g_file_read&#160;()</title>
<indexterm zone="g-file-read"><primary sortas="file_read">g_file_read</primary></indexterm>
<programlisting language="C"><link linkend="GFileInputStream"><returnvalue>GFileInputStream</returnvalue></link>&#160;*
g_file_read (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Opens a file for reading. The result is a <link linkend="GFileInputStream"><type>GFileInputStream</type></link> that
can be used to read the contents of the file.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>If the file does not exist, the <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link> error will be
returned. If the file is a directory, the <link linkend="G-IO-ERROR-IS-DIRECTORY:CAPS"><literal>G_IO_ERROR_IS_DIRECTORY</literal></link>
error will be returned. Other errors are possible too, and depend
on what kind of filesystem the file is on.</para>
<para>Virtual: read_fn</para>
<refsect3 id="g-file-read.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para><link linkend="GFile"><type>GFile</type></link> to read</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-read.returns" role="returns">
<title>Returns</title>
<para><link linkend="GFileInputStream"><type>GFileInputStream</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-read-async" role="function">
<title>g_file_read_async&#160;()</title>
<indexterm zone="g-file-read-async"><primary sortas="file_read_async">g_file_read_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_read_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                   <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                   <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                   <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                   <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously opens <parameter>file</parameter>
 for reading.</para>
<para>For more details, see <link linkend="g-file-read"><function>g_file_read()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-read-finish"><function>g_file_read_finish()</function></link> to get the result
of the operation.</para>
<refsect3 id="g-file-read-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-read-finish" role="function">
<title>g_file_read_finish&#160;()</title>
<indexterm zone="g-file-read-finish"><primary sortas="file_read_finish">g_file_read_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileInputStream"><returnvalue>GFileInputStream</returnvalue></link>&#160;*
g_file_read_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                    <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                    <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file read operation started with
<link linkend="g-file-read-async"><function>g_file_read_async()</function></link>.</para>
<refsect3 id="g-file-read-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-read-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileInputStream"><type>GFileInputStream</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-append-to" role="function">
<title>g_file_append_to&#160;()</title>
<indexterm zone="g-file-append-to"><primary sortas="file_append_to">g_file_append_to</primary></indexterm>
<programlisting language="C"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
g_file_append_to (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                  <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                  <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Gets an output stream for appending data to the file.
If the file doesn't already exist it is created.</para>
<para>By default files created are generally readable by everyone,
but if you pass <link linkend="G-FILE-CREATE-PRIVATE:CAPS"><type>G_FILE_CREATE_PRIVATE</type></link> in <parameter>flags</parameter>
 the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be
returned.</para>
<para>Some file systems don't allow all file names, and may return an
<link linkend="G-IO-ERROR-INVALID-FILENAME:CAPS"><literal>G_IO_ERROR_INVALID_FILENAME</literal></link> error. If the file is a directory the
<link linkend="G-IO-ERROR-IS-DIRECTORY:CAPS"><literal>G_IO_ERROR_IS_DIRECTORY</literal></link> error will be returned. Other errors are
possible too, and depend on what kind of filesystem the file is on.</para>
<refsect3 id="g-file-append-to.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-append-to.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileOutputStream"><type>GFileOutputStream</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-create" role="function">
<title>g_file_create&#160;()</title>
<indexterm zone="g-file-create"><primary sortas="file_create">g_file_create</primary></indexterm>
<programlisting language="C"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
g_file_create (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
               <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a new file and returns an output stream for writing to it.
The file must not already exist.</para>
<para>By default files created are generally readable by everyone,
but if you pass <link linkend="G-FILE-CREATE-PRIVATE:CAPS"><type>G_FILE_CREATE_PRIVATE</type></link> in <parameter>flags</parameter>
 the file
will be made readable only to the current user, to the level
that is supported on the target filesystem.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be
returned.</para>
<para>If a file or directory with this name already exists the
<link linkend="G-IO-ERROR-EXISTS:CAPS"><literal>G_IO_ERROR_EXISTS</literal></link> error will be returned. Some file systems don't
allow all file names, and may return an <link linkend="G-IO-ERROR-INVALID-FILENAME:CAPS"><literal>G_IO_ERROR_INVALID_FILENAME</literal></link>
error, and if the name is to long <link linkend="G-IO-ERROR-FILENAME-TOO-LONG:CAPS"><literal>G_IO_ERROR_FILENAME_TOO_LONG</literal></link> will
be returned. Other errors are possible too, and depend on what kind
of filesystem the file is on.</para>
<refsect3 id="g-file-create.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-create.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileOutputStream"><type>GFileOutputStream</type></link> for the newly created
file, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-replace" role="function">
<title>g_file_replace&#160;()</title>
<indexterm zone="g-file-replace"><primary sortas="file_replace">g_file_replace</primary></indexterm>
<programlisting language="C"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
g_file_replace (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                <parameter>const <link linkend="char"><type>char</type></link> *etag</parameter>,
                <parameter><link linkend="gboolean"><type>gboolean</type></link> make_backup</parameter>,
                <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Returns an output stream for overwriting the file, possibly
creating a backup copy of the file first. If the file doesn't exist,
it will be created.</para>
<para>This will try to replace the file in the safest way possible so
that any errors during the writing will not affect an already
existing copy of the file. For instance, for local files it
may write to a temporary file and then atomically rename over
the destination when the stream is closed.</para>
<para>By default files created are generally readable by everyone,
but if you pass <link linkend="G-FILE-CREATE-PRIVATE:CAPS"><type>G_FILE_CREATE_PRIVATE</type></link> in <parameter>flags</parameter>
 the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be
returned.</para>
<para>If you pass in a non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> <parameter>etag</parameter>
 value and <parameter>file</parameter>
 already exists, then
this value is compared to the current entity tag of the file, and if
they differ an <link linkend="G-IO-ERROR-WRONG-ETAG:CAPS"><literal>G_IO_ERROR_WRONG_ETAG</literal></link> error is returned. This
generally means that the file has been changed since you last read
it. You can get the new etag from <link linkend="g-file-output-stream-get-etag"><function>g_file_output_stream_get_etag()</function></link>
after you've finished writing and closed the <link linkend="GFileOutputStream"><type>GFileOutputStream</type></link>. When
you load a new file you can use <link linkend="g-file-input-stream-query-info"><function>g_file_input_stream_query_info()</function></link> to
get the etag of the file.</para>
<para>If <parameter>make_backup</parameter>
 is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, this function will attempt to make a
backup of the current file before overwriting it. If this fails
a <link linkend="G-IO-ERROR-CANT-CREATE-BACKUP:CAPS"><literal>G_IO_ERROR_CANT_CREATE_BACKUP</literal></link> error will be returned. If you
want to replace anyway, try again with <parameter>make_backup</parameter>
 set to <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
<para>If the file is a directory the <link linkend="G-IO-ERROR-IS-DIRECTORY:CAPS"><literal>G_IO_ERROR_IS_DIRECTORY</literal></link> error will
be returned, and if the file is some other form of non-regular file
then a <link linkend="G-IO-ERROR-NOT-REGULAR-FILE:CAPS"><literal>G_IO_ERROR_NOT_REGULAR_FILE</literal></link> error will be returned. Some
file systems don't allow all file names, and may return an
<link linkend="G-IO-ERROR-INVALID-FILENAME:CAPS"><literal>G_IO_ERROR_INVALID_FILENAME</literal></link> error, and if the name is to long
<link linkend="G-IO-ERROR-FILENAME-TOO-LONG:CAPS"><literal>G_IO_ERROR_FILENAME_TOO_LONG</literal></link> will be returned. Other errors are
possible too, and depend on what kind of filesystem the file is on.</para>
<refsect3 id="g-file-replace.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>etag</para></entry>
<entry role="parameter_description"><para>an optional <link linkend="gfile-etag">entity tag</link>
for the current <link linkend="GFile"><type>GFile</type></link>, or <link linkend="NULL:CAPS"><type>NULL</type></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>make_backup</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a backup should be created</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-replace.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileOutputStream"><type>GFileOutputStream</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-append-to-async" role="function">
<title>g_file_append_to_async&#160;()</title>
<indexterm zone="g-file-append-to-async"><primary sortas="file_append_to_async">g_file_append_to_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_append_to_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                        <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                        <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                        <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously opens <parameter>file</parameter>
 for appending.</para>
<para>For more details, see <link linkend="g-file-append-to"><function>g_file_append_to()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-append-to-finish"><function>g_file_append_to_finish()</function></link> to get the result
of the operation.</para>
<refsect3 id="g-file-append-to-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-append-to-finish" role="function">
<title>g_file_append_to_finish&#160;()</title>
<indexterm zone="g-file-append-to-finish"><primary sortas="file_append_to_finish">g_file_append_to_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
g_file_append_to_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                         <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file append operation started with
<link linkend="g-file-append-to-async"><function>g_file_append_to_async()</function></link>.</para>
<refsect3 id="g-file-append-to-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para><link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-append-to-finish.returns" role="returns">
<title>Returns</title>
<para>a valid <link linkend="GFileOutputStream"><type>GFileOutputStream</type></link>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-create-async" role="function">
<title>g_file_create_async&#160;()</title>
<indexterm zone="g-file-create-async"><primary sortas="file_create_async">g_file_create_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_create_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                     <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                     <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                     <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                     <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                     <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously creates a new file and returns an output stream
for writing to it. The file must not already exist.</para>
<para>For more details, see <link linkend="g-file-create"><function>g_file_create()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-create-finish"><function>g_file_create_finish()</function></link> to get the result
of the operation.</para>
<refsect3 id="g-file-create-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-create-finish" role="function">
<title>g_file_create_finish&#160;()</title>
<indexterm zone="g-file-create-finish"><primary sortas="file_create_finish">g_file_create_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
g_file_create_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                      <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file create operation started with
<link linkend="g-file-create-async"><function>g_file_create_async()</function></link>.</para>
<refsect3 id="g-file-create-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-create-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileOutputStream"><type>GFileOutputStream</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-replace-async" role="function">
<title>g_file_replace_async&#160;()</title>
<indexterm zone="g-file-replace-async"><primary sortas="file_replace_async">g_file_replace_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_replace_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                      <parameter>const <link linkend="char"><type>char</type></link> *etag</parameter>,
                      <parameter><link linkend="gboolean"><type>gboolean</type></link> make_backup</parameter>,
                      <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                      <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                      <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                      <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                      <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously overwrites the file, replacing the contents,
possibly creating a backup copy of the file first.</para>
<para>For more details, see <link linkend="g-file-replace"><function>g_file_replace()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-replace-finish"><function>g_file_replace_finish()</function></link> to get the result
of the operation.</para>
<refsect3 id="g-file-replace-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>etag</para></entry>
<entry role="parameter_description"><para>an <link linkend="gfile-etag">entity tag</link> for the current <link linkend="GFile"><type>GFile</type></link>,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>make_backup</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a backup should be created</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-replace-finish" role="function">
<title>g_file_replace_finish&#160;()</title>
<indexterm zone="g-file-replace-finish"><primary sortas="file_replace_finish">g_file_replace_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileOutputStream"><returnvalue>GFileOutputStream</returnvalue></link>&#160;*
g_file_replace_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                       <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                       <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file replace operation started with
<link linkend="g-file-replace-async"><function>g_file_replace_async()</function></link>.</para>
<refsect3 id="g-file-replace-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-replace-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileOutputStream"><type>GFileOutputStream</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-query-info" role="function">
<title>g_file_query_info&#160;()</title>
<indexterm zone="g-file-query-info"><primary sortas="file_query_info">g_file_query_info</primary></indexterm>
<programlisting language="C"><link linkend="GFileInfo"><returnvalue>GFileInfo</returnvalue></link>&#160;*
g_file_query_info (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                   <parameter>const <link linkend="char"><type>char</type></link> *attributes</parameter>,
                   <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                   <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                   <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Gets the requested information about specified <parameter>file</parameter>
.
The result is a <link linkend="GFileInfo"><type>GFileInfo</type></link> object that contains key-value
attributes (such as the type or size of the file).</para>
<para>The <parameter>attributes</parameter>
 value is a string that specifies the file
attributes that should be gathered. It is not an error if
it's not possible to read a particular requested attribute
from a file - it just won't be set. <parameter>attributes</parameter>
 should be a
comma-separated list of attributes or attribute wildcards.
The wildcard "*" means all attributes, and a wildcard like
"standard::*" means all attributes in the standard namespace.
An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
<link linkend="G-FILE-ATTRIBUTE-STANDARD-NAME:CAPS"><type>G_FILE_ATTRIBUTE_STANDARD_NAME</type></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be
returned.</para>
<para>For symlinks, normally the information about the target of the
symlink is returned, rather than information about the symlink
itself. However if you pass <link linkend="G-FILE-QUERY-INFO-NOFOLLOW-SYMLINKS:CAPS"><type>G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</type></link>
in <parameter>flags</parameter>
 the information about the symlink itself will be returned.
Also, for symlinks that point to non-existing files the information
about the symlink itself will be returned.</para>
<para>If the file does not exist, the <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link> error will be
returned. Other errors are possible too, and depend on what kind of
filesystem the file is on.</para>
<refsect3 id="g-file-query-info.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attributes</para></entry>
<entry role="parameter_description"><para>an attribute query string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-info.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileInfo"><type>GFileInfo</type></link> for the given <parameter>file</parameter>
, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
on error. Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-query-info-async" role="function">
<title>g_file_query_info_async&#160;()</title>
<indexterm zone="g-file-query-info-async"><primary sortas="file_query_info_async">g_file_query_info_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_query_info_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                         <parameter>const <link linkend="char"><type>char</type></link> *attributes</parameter>,
                         <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                         <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                         <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                         <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                         <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously gets the requested information about specified <parameter>file</parameter>
.
The result is a <link linkend="GFileInfo"><type>GFileInfo</type></link> object that contains key-value attributes
(such as type or size for the file).</para>
<para>For more details, see <link linkend="g-file-query-info"><function>g_file_query_info()</function></link> which is the synchronous
version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called. You can
then call <link linkend="g-file-query-info-finish"><function>g_file_query_info_finish()</function></link> to get the result of the operation.</para>
<refsect3 id="g-file-query-info-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attributes</para></entry>
<entry role="parameter_description"><para>an attribute query string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the
request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-query-info-finish" role="function">
<title>g_file_query_info_finish&#160;()</title>
<indexterm zone="g-file-query-info-finish"><primary sortas="file_query_info_finish">g_file_query_info_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileInfo"><returnvalue>GFileInfo</returnvalue></link>&#160;*
g_file_query_info_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                          <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                          <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file info query.
See <link linkend="g-file-query-info-async"><function>g_file_query_info_async()</function></link>.</para>
<refsect3 id="g-file-query-info-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-info-finish.returns" role="returns">
<title>Returns</title>
<para><link linkend="GFileInfo"><type>GFileInfo</type></link> for given <parameter>file</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error. Free the returned object with
<link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-query-exists" role="function">
<title>g_file_query_exists&#160;()</title>
<indexterm zone="g-file-query-exists"><primary sortas="file_query_exists">g_file_query_exists</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_query_exists (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                     <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>);</programlisting>
<para>Utility function to check if a particular file exists. This is
implemented using <link linkend="g-file-query-info"><function>g_file_query_info()</function></link> and as such does blocking I/O.</para>
<para>Note that in many cases it is <ulink url="https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use">racy to first check for file existence</ulink>
and then execute something based on the outcome of that, because the
file might have been created or removed in between the operations. The
general approach to handling that is to not check, but just do the
operation and handle the errors as they come.</para>
<para>As an example of race-free checking, take the case of reading a file,
and if it doesn't exist, creating it. There are two racy versions: read
it, and on error create it; and: check if it exists, if not create it.
These can both result in two processes creating the file (with perhaps
a partially written file as the result). The correct approach is to
always try to create the file with <link linkend="g-file-create"><function>g_file_create()</function></link> which will either
atomically create the file or fail with a <link linkend="G-IO-ERROR-EXISTS:CAPS"><literal>G_IO_ERROR_EXISTS</literal></link> error.</para>
<para>However, in many cases an existence check is useful in a user interface,
for instance to make a menu item sensitive/insensitive, so that you don't
have to fool users that something is possible and then just show an error
dialog. If you do this, you should make sure to also handle the errors
that can happen due to races when you execute the operation.</para>
<refsect3 id="g-file-query-exists.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-exists.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the file exists (and can be detected without error),
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise (or if cancelled).</para>
</refsect3></refsect2>
<refsect2 id="g-file-query-file-type" role="function" condition="since:2.18">
<title>g_file_query_file_type&#160;()</title>
<indexterm zone="g-file-query-file-type" role="2.18"><primary sortas="file_query_file_type">g_file_query_file_type</primary></indexterm>
<programlisting language="C"><link linkend="GFileType"><returnvalue>GFileType</returnvalue></link>
g_file_query_file_type (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                        <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>);</programlisting>
<para>Utility function to inspect the <link linkend="GFileType"><type>GFileType</type></link> of a file. This is
implemented using <link linkend="g-file-query-info"><function>g_file_query_info()</function></link> and as such does blocking I/O.</para>
<para>The primary use case of this method is to check if a file is
a regular file, directory, or symlink.</para>
<refsect3 id="g-file-query-file-type.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> passed to <link linkend="g-file-query-info"><function>g_file_query_info()</function></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-file-type.returns" role="returns">
<title>Returns</title>
<para> The <link linkend="GFileType"><type>GFileType</type></link> of the file and <link linkend="G-FILE-TYPE-UNKNOWN:CAPS"><type>G_FILE_TYPE_UNKNOWN</type></link>
if the file does not exist</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.18">2.18</link></para></refsect2>
<refsect2 id="g-file-query-filesystem-info" role="function">
<title>g_file_query_filesystem_info&#160;()</title>
<indexterm zone="g-file-query-filesystem-info"><primary sortas="file_query_filesystem_info">g_file_query_filesystem_info</primary></indexterm>
<programlisting language="C"><link linkend="GFileInfo"><returnvalue>GFileInfo</returnvalue></link>&#160;*
g_file_query_filesystem_info (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                              <parameter>const <link linkend="char"><type>char</type></link> *attributes</parameter>,
                              <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Similar to <link linkend="g-file-query-info"><function>g_file_query_info()</function></link>, but obtains information
about the filesystem the <parameter>file</parameter>
 is on, rather than the file itself.
For instance the amount of space available and the type of
the filesystem.</para>
<para>The <parameter>attributes</parameter>
 value is a string that specifies the attributes
that should be gathered. It is not an error if it's not possible
to read a particular requested attribute from a file - it just
won't be set. <parameter>attributes</parameter>
 should be a comma-separated list of
attributes or attribute wildcards. The wildcard "*" means all
attributes, and a wildcard like "filesystem::*" means all attributes
in the filesystem namespace. The standard namespace for filesystem
attributes is "filesystem". Common attributes of interest are
<link linkend="G-FILE-ATTRIBUTE-FILESYSTEM-SIZE:CAPS"><type>G_FILE_ATTRIBUTE_FILESYSTEM_SIZE</type></link> (the total size of the filesystem
in bytes), <link linkend="G-FILE-ATTRIBUTE-FILESYSTEM-FREE:CAPS"><type>G_FILE_ATTRIBUTE_FILESYSTEM_FREE</type></link> (number of bytes available),
and <link linkend="G-FILE-ATTRIBUTE-FILESYSTEM-TYPE:CAPS"><type>G_FILE_ATTRIBUTE_FILESYSTEM_TYPE</type></link> (type of the filesystem).</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be
returned.</para>
<para>If the file does not exist, the <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link> error will
be returned. Other errors are possible too, and depend on what
kind of filesystem the file is on.</para>
<refsect3 id="g-file-query-filesystem-info.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attributes</para></entry>
<entry role="parameter_description"><para>an attribute query string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-filesystem-info.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileInfo"><type>GFileInfo</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if there was an error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-query-filesystem-info-async" role="function">
<title>g_file_query_filesystem_info_async&#160;()</title>
<indexterm zone="g-file-query-filesystem-info-async"><primary sortas="file_query_filesystem_info_async">g_file_query_filesystem_info_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_query_filesystem_info_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                    <parameter>const <link linkend="char"><type>char</type></link> *attributes</parameter>,
                                    <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                                    <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                    <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                    <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously gets the requested information about the filesystem
that the specified <parameter>file</parameter>
 is on. The result is a <link linkend="GFileInfo"><type>GFileInfo</type></link> object
that contains key-value attributes (such as type or size for the
file).</para>
<para>For more details, see <link linkend="g-file-query-filesystem-info"><function>g_file_query_filesystem_info()</function></link> which is the
synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called. You can
then call <link linkend="g-file-query-info-finish"><function>g_file_query_info_finish()</function></link> to get the result of the
operation.</para>
<refsect3 id="g-file-query-filesystem-info-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attributes</para></entry>
<entry role="parameter_description"><para>an attribute query string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-query-filesystem-info-finish" role="function">
<title>g_file_query_filesystem_info_finish&#160;()</title>
<indexterm zone="g-file-query-filesystem-info-finish"><primary sortas="file_query_filesystem_info_finish">g_file_query_filesystem_info_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileInfo"><returnvalue>GFileInfo</returnvalue></link>&#160;*
g_file_query_filesystem_info_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                     <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous filesystem info query.
See <link linkend="g-file-query-filesystem-info-async"><function>g_file_query_filesystem_info_async()</function></link>.</para>
<refsect3 id="g-file-query-filesystem-info-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-filesystem-info-finish.returns" role="returns">
<title>Returns</title>
<para><link linkend="GFileInfo"><type>GFileInfo</type></link> for given <parameter>file</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-query-default-handler" role="function">
<title>g_file_query_default_handler&#160;()</title>
<indexterm zone="g-file-query-default-handler"><primary sortas="file_query_default_handler">g_file_query_default_handler</primary></indexterm>
<programlisting language="C"><link linkend="GAppInfo"><returnvalue>GAppInfo</returnvalue></link>&#160;*
g_file_query_default_handler (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                              <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Returns the <link linkend="GAppInfo"><type>GAppInfo</type></link> that is registered as the default
application to handle the file specified by <parameter>file</parameter>
.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-query-default-handler.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link> to open</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-default-handler.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GAppInfo"><type>GAppInfo</type></link> if the handle was found,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if there were errors.
When you are done with it, release it with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-measure-disk-usage" role="function" condition="since:2.38">
<title>g_file_measure_disk_usage&#160;()</title>
<indexterm zone="g-file-measure-disk-usage" role="2.38"><primary sortas="file_measure_disk_usage">g_file_measure_disk_usage</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_measure_disk_usage (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                           <parameter><link linkend="GFileMeasureFlags"><type>GFileMeasureFlags</type></link> flags</parameter>,
                           <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                           <parameter><link linkend="GFileMeasureProgressCallback"><type>GFileMeasureProgressCallback</type></link> progress_callback</parameter>,
                           <parameter><link linkend="gpointer"><type>gpointer</type></link> progress_data</parameter>,
                           <parameter><link linkend="guint64"><type>guint64</type></link> *disk_usage</parameter>,
                           <parameter><link linkend="guint64"><type>guint64</type></link> *num_dirs</parameter>,
                           <parameter><link linkend="guint64"><type>guint64</type></link> *num_files</parameter>,
                           <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Recursively measures the disk usage of <parameter>file</parameter>
.</para>
<para>This is essentially an analog of the 'du' command, but it also
reports the number of directories and non-directory files encountered
(including things like symbolic links).</para>
<para>By default, errors are only reported against the toplevel file
itself.  Errors found while recursing are silently ignored, unless
<link linkend="G-FILE-DISK-USAGE-REPORT-ALL-ERRORS:CAPS"><literal>G_FILE_DISK_USAGE_REPORT_ALL_ERRORS</literal></link> is given in <parameter>flags</parameter>
.</para>
<para>The returned size, <parameter>disk_usage</parameter>
, is in bytes and should be formatted
with <link linkend="g-format-size"><function>g_format_size()</function></link> in order to get something reasonable for showing
in a user interface.</para>
<para><parameter>progress_callback</parameter>
 and <parameter>progress_data</parameter>
 can be given to request
periodic progress updates while scanning.  See the documentation for
<link linkend="GFileMeasureProgressCallback"><type>GFileMeasureProgressCallback</type></link> for information about when and how the
callback will be invoked.</para>
<refsect3 id="g-file-measure-disk-usage.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para><link linkend="GFileMeasureFlags"><type>GFileMeasureFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileMeasureProgressCallback"><type>GFileMeasureProgressCallback</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_data</para></entry>
<entry role="parameter_description"><para>user_data for <parameter>progress_callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>disk_usage</para></entry>
<entry role="parameter_description"><para>the number of bytes of disk space used. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_dirs</para></entry>
<entry role="parameter_description"><para>the number of directories encountered. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_files</para></entry>
<entry role="parameter_description"><para>the number of non-directories encountered. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="NULL:CAPS"><literal>NULL</literal></link>, or a pointer to a <link linkend="NULL:CAPS"><literal>NULL</literal></link> <link linkend="GError"><type>GError</type></link> pointer. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-measure-disk-usage.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful, with the out parameters set.
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise, with <parameter>error</parameter>
set.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="g-file-measure-disk-usage-async" role="function" condition="since:2.38">
<title>g_file_measure_disk_usage_async&#160;()</title>
<indexterm zone="g-file-measure-disk-usage-async" role="2.38"><primary sortas="file_measure_disk_usage_async">g_file_measure_disk_usage_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_measure_disk_usage_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                 <parameter><link linkend="GFileMeasureFlags"><type>GFileMeasureFlags</type></link> flags</parameter>,
                                 <parameter><link linkend="gint"><type>gint</type></link> io_priority</parameter>,
                                 <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                 <parameter><link linkend="GFileMeasureProgressCallback"><type>GFileMeasureProgressCallback</type></link> progress_callback</parameter>,
                                 <parameter><link linkend="gpointer"><type>gpointer</type></link> progress_data</parameter>,
                                 <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                 <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Recursively measures the disk usage of <parameter>file</parameter>
.</para>
<para>This is the asynchronous version of <link linkend="g-file-measure-disk-usage"><function>g_file_measure_disk_usage()</function></link>.  See
there for more information.</para>
<refsect3 id="g-file-measure-disk-usage-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para><link linkend="GFileMeasureFlags"><type>GFileMeasureFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileMeasureProgressCallback"><type>GFileMeasureProgressCallback</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_data</para></entry>
<entry role="parameter_description"><para>user_data for <parameter>progress_callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when complete. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="g-file-measure-disk-usage-finish" role="function" condition="since:2.38">
<title>g_file_measure_disk_usage_finish&#160;()</title>
<indexterm zone="g-file-measure-disk-usage-finish" role="2.38"><primary sortas="file_measure_disk_usage_finish">g_file_measure_disk_usage_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_measure_disk_usage_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                  <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                  <parameter><link linkend="guint64"><type>guint64</type></link> *disk_usage</parameter>,
                                  <parameter><link linkend="guint64"><type>guint64</type></link> *num_dirs</parameter>,
                                  <parameter><link linkend="guint64"><type>guint64</type></link> *num_files</parameter>,
                                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Collects the results from an earlier call to
<link linkend="g-file-measure-disk-usage-async"><function>g_file_measure_disk_usage_async()</function></link>.  See <link linkend="g-file-measure-disk-usage"><function>g_file_measure_disk_usage()</function></link> for
more information.</para>
<refsect3 id="g-file-measure-disk-usage-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>the <link linkend="GAsyncResult"><type>GAsyncResult</type></link> passed to your <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>disk_usage</para></entry>
<entry role="parameter_description"><para>the number of bytes of disk space used. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_dirs</para></entry>
<entry role="parameter_description"><para>the number of directories encountered. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_files</para></entry>
<entry role="parameter_description"><para>the number of non-directories encountered. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="NULL:CAPS"><literal>NULL</literal></link>, or a pointer to a <link linkend="NULL:CAPS"><literal>NULL</literal></link> <link linkend="GError"><type>GError</type></link> pointer. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-measure-disk-usage-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful, with the out parameters set.
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise, with <parameter>error</parameter>
set.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="g-file-find-enclosing-mount" role="function">
<title>g_file_find_enclosing_mount&#160;()</title>
<indexterm zone="g-file-find-enclosing-mount"><primary sortas="file_find_enclosing_mount">g_file_find_enclosing_mount</primary></indexterm>
<programlisting language="C"><link linkend="GMount"><returnvalue>GMount</returnvalue></link>&#160;*
g_file_find_enclosing_mount (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Gets a <link linkend="GMount"><type>GMount</type></link> for the <link linkend="GFile"><type>GFile</type></link>.</para>
<para>If the <link linkend="GFileIface"><type>GFileIface</type></link> for <parameter>file</parameter>
 does not have a mount (e.g.
possibly a remote share), <parameter>error</parameter>
 will be set to <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link>
and <link linkend="NULL:CAPS"><literal>NULL</literal></link> will be returned.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-find-enclosing-mount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-find-enclosing-mount.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GMount"><type>GMount</type></link> where the <parameter>file</parameter>
is located
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-find-enclosing-mount-async" role="function">
<title>g_file_find_enclosing_mount_async&#160;()</title>
<indexterm zone="g-file-find-enclosing-mount-async"><primary sortas="file_find_enclosing_mount_async">g_file_find_enclosing_mount_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_find_enclosing_mount_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                   <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                                   <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                   <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                   <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously gets the mount for the file.</para>
<para>For more details, see <link linkend="g-file-find-enclosing-mount"><function>g_file_find_enclosing_mount()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-find-enclosing-mount-finish"><function>g_file_find_enclosing_mount_finish()</function></link> to
get the result of the operation.</para>
<refsect3 id="g-file-find-enclosing-mount-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-find-enclosing-mount-finish" role="function">
<title>g_file_find_enclosing_mount_finish&#160;()</title>
<indexterm zone="g-file-find-enclosing-mount-finish"><primary sortas="file_find_enclosing_mount_finish">g_file_find_enclosing_mount_finish</primary></indexterm>
<programlisting language="C"><link linkend="GMount"><returnvalue>GMount</returnvalue></link>&#160;*
g_file_find_enclosing_mount_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                    <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                                    <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous find mount request.
See <link linkend="g-file-find-enclosing-mount-async"><function>g_file_find_enclosing_mount_async()</function></link>.</para>
<refsect3 id="g-file-find-enclosing-mount-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-find-enclosing-mount-finish.returns" role="returns">
<title>Returns</title>
<para><link linkend="GMount"><type>GMount</type></link> for given <parameter>file</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-enumerate-children" role="function">
<title>g_file_enumerate_children&#160;()</title>
<indexterm zone="g-file-enumerate-children"><primary sortas="file_enumerate_children">g_file_enumerate_children</primary></indexterm>
<programlisting language="C"><link linkend="GFileEnumerator"><returnvalue>GFileEnumerator</returnvalue></link>&#160;*
g_file_enumerate_children (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                           <parameter>const <link linkend="char"><type>char</type></link> *attributes</parameter>,
                           <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                           <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                           <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Gets the requested information about the files in a directory.
The result is a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> object that will give out
<link linkend="GFileInfo"><type>GFileInfo</type></link> objects for all the files in the directory.</para>
<para>The <parameter>attributes</parameter>
 value is a string that specifies the file
attributes that should be gathered. It is not an error if
it's not possible to read a particular requested attribute
from a file - it just won't be set. <parameter>attributes</parameter>
 should
be a comma-separated list of attributes or attribute wildcards.
The wildcard "*" means all attributes, and a wildcard like
"standard::*" means all attributes in the standard namespace.
An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
<link linkend="G-FILE-ATTRIBUTE-STANDARD-NAME:CAPS"><type>G_FILE_ATTRIBUTE_STANDARD_NAME</type></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be
returned.</para>
<para>If the file does not exist, the <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link> error will
be returned. If the file is not a directory, the <link linkend="G-IO-ERROR-NOT-DIRECTORY:CAPS"><literal>G_IO_ERROR_NOT_DIRECTORY</literal></link>
error will be returned. Other errors are possible too.</para>
<refsect3 id="g-file-enumerate-children.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attributes</para></entry>
<entry role="parameter_description"><para>an attribute query string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-enumerate-children.returns" role="returns">
<title>Returns</title>
<para>A <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> if successful,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> on error. Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-enumerate-children-async" role="function">
<title>g_file_enumerate_children_async&#160;()</title>
<indexterm zone="g-file-enumerate-children-async"><primary sortas="file_enumerate_children_async">g_file_enumerate_children_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_enumerate_children_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                 <parameter>const <link linkend="char"><type>char</type></link> *attributes</parameter>,
                                 <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                                 <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                                 <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                 <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                 <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously gets the requested information about the files
in a directory. The result is a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> object that will
give out <link linkend="GFileInfo"><type>GFileInfo</type></link> objects for all the files in the directory.</para>
<para>For more details, see <link linkend="g-file-enumerate-children"><function>g_file_enumerate_children()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called. You can
then call <link linkend="g-file-enumerate-children-finish"><function>g_file_enumerate_children_finish()</function></link> to get the result of
the operation.</para>
<refsect3 id="g-file-enumerate-children-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attributes</para></entry>
<entry role="parameter_description"><para>an attribute query string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the
request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-enumerate-children-finish" role="function">
<title>g_file_enumerate_children_finish&#160;()</title>
<indexterm zone="g-file-enumerate-children-finish"><primary sortas="file_enumerate_children_finish">g_file_enumerate_children_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileEnumerator"><returnvalue>GFileEnumerator</returnvalue></link>&#160;*
g_file_enumerate_children_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                  <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an async enumerate children operation.
See <link linkend="g-file-enumerate-children-async"><function>g_file_enumerate_children_async()</function></link>.</para>
<refsect3 id="g-file-enumerate-children-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-enumerate-children-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
if an error occurred.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-set-display-name" role="function">
<title>g_file_set_display_name&#160;()</title>
<indexterm zone="g-file-set-display-name"><primary sortas="file_set_display_name">g_file_set_display_name</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_set_display_name (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                         <parameter>const <link linkend="char"><type>char</type></link> *display_name</parameter>,
                         <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Renames <parameter>file</parameter>
 to the specified display name.</para>
<para>The display name is converted from UTF-8 to the correct encoding
for the target filesystem if possible and the <parameter>file</parameter>
 is renamed to this.</para>
<para>If you want to implement a rename operation in the user interface the
edit name (<link linkend="G-FILE-ATTRIBUTE-STANDARD-EDIT-NAME:CAPS"><type>G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME</type></link>) should be used as the
initial value in the rename widget, and then the result after editing
should be passed to <link linkend="g-file-set-display-name"><function>g_file_set_display_name()</function></link>.</para>
<para>On success the resulting converted filename is returned.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-display-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>display_name</para></entry>
<entry role="parameter_description"><para>a string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-display-name.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFile"><type>GFile</type></link> specifying what <parameter>file</parameter>
was renamed to,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if there was an error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-set-display-name-async" role="function">
<title>g_file_set_display_name_async&#160;()</title>
<indexterm zone="g-file-set-display-name-async"><primary sortas="file_set_display_name_async">g_file_set_display_name_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_set_display_name_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                               <parameter>const <link linkend="char"><type>char</type></link> *display_name</parameter>,
                               <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                               <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                               <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously sets the display name for a given <link linkend="GFile"><type>GFile</type></link>.</para>
<para>For more details, see <link linkend="g-file-set-display-name"><function>g_file_set_display_name()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-set-display-name-finish"><function>g_file_set_display_name_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-set-display-name-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>display_name</para></entry>
<entry role="parameter_description"><para>a string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-set-display-name-finish" role="function">
<title>g_file_set_display_name_finish&#160;()</title>
<indexterm zone="g-file-set-display-name-finish"><primary sortas="file_set_display_name_finish">g_file_set_display_name_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_set_display_name_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes setting a display name started with
<link linkend="g-file-set-display-name-async"><function>g_file_set_display_name_async()</function></link>.</para>
<refsect3 id="g-file-set-display-name-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-display-name-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFile"><type>GFile</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-delete" role="function">
<title>g_file_delete&#160;()</title>
<indexterm zone="g-file-delete"><primary sortas="file_delete">g_file_delete</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_delete (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Deletes a file. If the <parameter>file</parameter>
 is a directory, it will only be
deleted if it is empty. This has the same semantics as <link linkend="g-unlink"><function>g_unlink()</function></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>Virtual: delete_file</para>
<refsect3 id="g-file-delete.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-delete.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the file was deleted. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-delete-async" role="function" condition="since:2.34">
<title>g_file_delete_async&#160;()</title>
<indexterm zone="g-file-delete-async" role="2.34"><primary sortas="file_delete_async">g_file_delete_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_delete_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                     <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                     <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                     <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                     <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously delete a file. If the <parameter>file</parameter>
 is a directory, it will
only be deleted if it is empty.  This has the same semantics as
<link linkend="g-unlink"><function>g_unlink()</function></link>.</para>
<para>Virtual: delete_file_async</para>
<refsect3 id="g-file-delete-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.34">2.34</link></para></refsect2>
<refsect2 id="g-file-delete-finish" role="function" condition="since:2.34">
<title>g_file_delete_finish&#160;()</title>
<indexterm zone="g-file-delete-finish" role="2.34"><primary sortas="file_delete_finish">g_file_delete_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_delete_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                      <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes deleting a file started with <link linkend="g-file-delete-async"><function>g_file_delete_async()</function></link>.</para>
<para>Virtual: delete_file_finish</para>
<refsect3 id="g-file-delete-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-delete-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the file was deleted. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.34">2.34</link></para></refsect2>
<refsect2 id="g-file-trash" role="function">
<title>g_file_trash&#160;()</title>
<indexterm zone="g-file-trash"><primary sortas="file_trash">g_file_trash</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_trash (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
              <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sends <parameter>file</parameter>
 to the "Trashcan", if possible. This is similar to
deleting it, but the user can recover it before emptying the trashcan.
Not all file systems support trashing, so this call can return the
<link linkend="G-IO-ERROR-NOT-SUPPORTED:CAPS"><literal>G_IO_ERROR_NOT_SUPPORTED</literal></link> error.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>Virtual: trash</para>
<refsect3 id="g-file-trash.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para><link linkend="GFile"><type>GFile</type></link> to send to trash</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-trash.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on successful trash, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-trash-async" role="function" condition="since:2.38">
<title>g_file_trash_async&#160;()</title>
<indexterm zone="g-file-trash-async" role="2.38"><primary sortas="file_trash_async">g_file_trash_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_trash_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                    <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                    <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                    <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                    <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously sends <parameter>file</parameter>
 to the Trash location, if possible.</para>
<para>Virtual: trash_async</para>
<refsect3 id="g-file-trash-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="g-file-trash-finish" role="function" condition="since:2.38">
<title>g_file_trash_finish&#160;()</title>
<indexterm zone="g-file-trash-finish" role="2.38"><primary sortas="file_trash_finish">g_file_trash_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_trash_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                     <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file trashing operation, started with
<link linkend="g-file-trash-async"><function>g_file_trash_async()</function></link>.</para>
<para>Virtual: trash_finish</para>
<refsect3 id="g-file-trash-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-trash-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on successful trash, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="g-file-copy" role="function">
<title>g_file_copy&#160;()</title>
<indexterm zone="g-file-copy"><primary sortas="file_copy">g_file_copy</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_copy (<parameter><link linkend="GFile"><type>GFile</type></link> *source</parameter>,
             <parameter><link linkend="GFile"><type>GFile</type></link> *destination</parameter>,
             <parameter><link linkend="GFileCopyFlags"><type>GFileCopyFlags</type></link> flags</parameter>,
             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
             <parameter><link linkend="GFileProgressCallback"><type>GFileProgressCallback</type></link> progress_callback</parameter>,
             <parameter><link linkend="gpointer"><type>gpointer</type></link> progress_callback_data</parameter>,
             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Copies the file <parameter>source</parameter>
 to the location specified by <parameter>destination</parameter>
.
Can not handle recursive copies of directories.</para>
<para>If the flag <link linkend="G-FILE-COPY-OVERWRITE:CAPS"><type>G_FILE_COPY_OVERWRITE</type></link> is specified an already
existing <parameter>destination</parameter>
 file is overwritten.</para>
<para>If the flag <link linkend="G-FILE-COPY-NOFOLLOW-SYMLINKS:CAPS"><type>G_FILE_COPY_NOFOLLOW_SYMLINKS</type></link> is specified then symlinks
will be copied as symlinks, otherwise the target of the
<parameter>source</parameter>
 symlink will be copied.</para>
<para>If the flag <link linkend="G-FILE-COPY-ALL-METADATA:CAPS"><type>G_FILE_COPY_ALL_METADATA</type></link> is specified then all the metadata
that is possible to copy is copied, not just the default subset (which,
for instance, does not include the owner, see <link linkend="GFileInfo"><type>GFileInfo</type></link>).</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>If <parameter>progress_callback</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be monitored
by setting this to a <link linkend="GFileProgressCallback"><type>GFileProgressCallback</type></link> function.
<parameter>progress_callback_data</parameter>
 will be passed to this function. It is guaranteed
that this callback will be called after all data has been transferred with
the total number of bytes copied during the operation.</para>
<para>If the <parameter>source</parameter>
 file does not exist, then the <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link> error
is returned, independent on the status of the <parameter>destination</parameter>
.</para>
<para>If <link linkend="G-FILE-COPY-OVERWRITE:CAPS"><type>G_FILE_COPY_OVERWRITE</type></link> is not specified and the target exists, then
the error <link linkend="G-IO-ERROR-EXISTS:CAPS"><literal>G_IO_ERROR_EXISTS</literal></link> is returned.</para>
<para>If trying to overwrite a file over a directory, the <link linkend="G-IO-ERROR-IS-DIRECTORY:CAPS"><literal>G_IO_ERROR_IS_DIRECTORY</literal></link>
error is returned. If trying to overwrite a directory with a directory the
<link linkend="G-IO-ERROR-WOULD-MERGE:CAPS"><literal>G_IO_ERROR_WOULD_MERGE</literal></link> error is returned.</para>
<para>If the source is a directory and the target does not exist, or
<link linkend="G-FILE-COPY-OVERWRITE:CAPS"><type>G_FILE_COPY_OVERWRITE</type></link> is specified and the target is a file, then the
<link linkend="G-IO-ERROR-WOULD-RECURSE:CAPS"><literal>G_IO_ERROR_WOULD_RECURSE</literal></link> error is returned.</para>
<para>If you are interested in copying the <link linkend="GFile"><type>GFile</type></link> object itself (not the on-disk
file), see <link linkend="g-file-dup"><function>g_file_dup()</function></link>.</para>
<refsect3 id="g-file-copy.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>source</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destination</para></entry>
<entry role="parameter_description"><para>destination <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>set of <link linkend="GFileCopyFlags"><type>GFileCopyFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_callback</para></entry>
<entry role="parameter_description"><para>function to callback with
progress information, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if progress information is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>scope call</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_callback_data</para></entry>
<entry role="parameter_description"><para>user data to pass to <parameter>progress_callback</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> to set on error, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-copy.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-copy-async" role="function">
<title>g_file_copy_async&#160;()</title>
<indexterm zone="g-file-copy-async"><primary sortas="file_copy_async">g_file_copy_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_copy_async (<parameter><link linkend="GFile"><type>GFile</type></link> *source</parameter>,
                   <parameter><link linkend="GFile"><type>GFile</type></link> *destination</parameter>,
                   <parameter><link linkend="GFileCopyFlags"><type>GFileCopyFlags</type></link> flags</parameter>,
                   <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                   <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                   <parameter><link linkend="GFileProgressCallback"><type>GFileProgressCallback</type></link> progress_callback</parameter>,
                   <parameter><link linkend="gpointer"><type>gpointer</type></link> progress_callback_data</parameter>,
                   <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                   <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Copies the file <parameter>source</parameter>
 to the location specified by <parameter>destination</parameter>

asynchronously. For details of the behaviour, see <link linkend="g-file-copy"><function>g_file_copy()</function></link>.</para>
<para>If <parameter>progress_callback</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then that function that will be called
just like in <link linkend="g-file-copy"><function>g_file_copy()</function></link>. The callback will run in the default main context
of the thread calling <link linkend="g-file-copy-async"><function>g_file_copy_async()</function></link> — the same context as <parameter>callback</parameter>
 is
run in.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called. You can then call
<link linkend="g-file-copy-finish"><function>g_file_copy_finish()</function></link> to get the result of the operation.</para>
<refsect3 id="g-file-copy-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>source</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destination</para></entry>
<entry role="parameter_description"><para>destination <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>set of <link linkend="GFileCopyFlags"><type>GFileCopyFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_callback</para></entry>
<entry role="parameter_description"><para>function to callback with progress
information, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if progress information is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>scope notified</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_callback_data</para></entry>
<entry role="parameter_description"><para>user data to pass to <parameter>progress_callback</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym> progress_callback][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym> callback]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-copy-finish" role="function">
<title>g_file_copy_finish&#160;()</title>
<indexterm zone="g-file-copy-finish"><primary sortas="file_copy_finish">g_file_copy_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_copy_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                    <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                    <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes copying the file started with <link linkend="g-file-copy-async"><function>g_file_copy_async()</function></link>.</para>
<refsect3 id="g-file-copy-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-copy-finish.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.</para>
</refsect3></refsect2>
<refsect2 id="g-file-move" role="function">
<title>g_file_move&#160;()</title>
<indexterm zone="g-file-move"><primary sortas="file_move">g_file_move</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_move (<parameter><link linkend="GFile"><type>GFile</type></link> *source</parameter>,
             <parameter><link linkend="GFile"><type>GFile</type></link> *destination</parameter>,
             <parameter><link linkend="GFileCopyFlags"><type>GFileCopyFlags</type></link> flags</parameter>,
             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
             <parameter><link linkend="GFileProgressCallback"><type>GFileProgressCallback</type></link> progress_callback</parameter>,
             <parameter><link linkend="gpointer"><type>gpointer</type></link> progress_callback_data</parameter>,
             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Tries to move the file or directory <parameter>source</parameter>
 to the location specified
by <parameter>destination</parameter>
. If native move operations are supported then this is
used, otherwise a copy + delete fallback is used. The native
implementation may support moving directories (for instance on moves
inside the same filesystem), but the fallback code does not.</para>
<para>If the flag <link linkend="G-FILE-COPY-OVERWRITE:CAPS"><type>G_FILE_COPY_OVERWRITE</type></link> is specified an already
existing <parameter>destination</parameter>
 file is overwritten.</para>
<para>If the flag <link linkend="G-FILE-COPY-NOFOLLOW-SYMLINKS:CAPS"><type>G_FILE_COPY_NOFOLLOW_SYMLINKS</type></link> is specified then symlinks
will be copied as symlinks, otherwise the target of the
<parameter>source</parameter>
 symlink will be copied.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>If <parameter>progress_callback</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be monitored
by setting this to a <link linkend="GFileProgressCallback"><type>GFileProgressCallback</type></link> function.
<parameter>progress_callback_data</parameter>
 will be passed to this function. It is
guaranteed that this callback will be called after all data has been
transferred with the total number of bytes copied during the operation.</para>
<para>If the <parameter>source</parameter>
 file does not exist, then the <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link>
error is returned, independent on the status of the <parameter>destination</parameter>
.</para>
<para>If <link linkend="G-FILE-COPY-OVERWRITE:CAPS"><type>G_FILE_COPY_OVERWRITE</type></link> is not specified and the target exists,
then the error <link linkend="G-IO-ERROR-EXISTS:CAPS"><literal>G_IO_ERROR_EXISTS</literal></link> is returned.</para>
<para>If trying to overwrite a file over a directory, the <link linkend="G-IO-ERROR-IS-DIRECTORY:CAPS"><literal>G_IO_ERROR_IS_DIRECTORY</literal></link>
error is returned. If trying to overwrite a directory with a directory the
<link linkend="G-IO-ERROR-WOULD-MERGE:CAPS"><literal>G_IO_ERROR_WOULD_MERGE</literal></link> error is returned.</para>
<para>If the source is a directory and the target does not exist, or
<link linkend="G-FILE-COPY-OVERWRITE:CAPS"><type>G_FILE_COPY_OVERWRITE</type></link> is specified and the target is a file, then
the <link linkend="G-IO-ERROR-WOULD-RECURSE:CAPS"><literal>G_IO_ERROR_WOULD_RECURSE</literal></link> error may be returned (if the native
move operation isn't available).</para>
<refsect3 id="g-file-move.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>source</para></entry>
<entry role="parameter_description"><para><link linkend="GFile"><type>GFile</type></link> pointing to the source location</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destination</para></entry>
<entry role="parameter_description"><para><link linkend="GFile"><type>GFile</type></link> pointing to the destination location</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>set of <link linkend="GFileCopyFlags"><type>GFileCopyFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_callback</para></entry>
<entry role="parameter_description"><para><link linkend="GFileProgressCallback"><type>GFileProgressCallback</type></link>
function for updates. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>scope call</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>progress_callback_data</para></entry>
<entry role="parameter_description"><para>gpointer to user data for
the callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for returning error conditions, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-move.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on successful move, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-make-directory" role="function">
<title>g_file_make_directory&#160;()</title>
<indexterm zone="g-file-make-directory"><primary sortas="file_make_directory">g_file_make_directory</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_make_directory (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                       <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                       <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a directory. Note that this will only create a child directory
of the immediate parent directory of the path or URI given by the <link linkend="GFile"><type>GFile</type></link>.
To recursively create directories, see <link linkend="g-file-make-directory-with-parents"><function>g_file_make_directory_with_parents()</function></link>.
This function will fail if the parent directory does not exist, setting
<parameter>error</parameter>
 to <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link>. If the file system doesn't support
creating directories, this function will fail, setting <parameter>error</parameter>
 to
<link linkend="G-IO-ERROR-NOT-SUPPORTED:CAPS"><literal>G_IO_ERROR_NOT_SUPPORTED</literal></link>.</para>
<para>For a local <link linkend="GFile"><type>GFile</type></link> the newly created directory will have the default
(current) ownership and permissions of the current process.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-make-directory.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-make-directory.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on successful creation, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-make-directory-async" role="function" condition="since:2.38">
<title>g_file_make_directory_async&#160;()</title>
<indexterm zone="g-file-make-directory-async" role="2.38"><primary sortas="file_make_directory_async">g_file_make_directory_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_make_directory_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                             <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                             <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously creates a directory.</para>
<para>Virtual: make_directory_async</para>
<refsect3 id="g-file-make-directory-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="g-file-make-directory-finish" role="function" condition="since:2.38">
<title>g_file_make_directory_finish&#160;()</title>
<indexterm zone="g-file-make-directory-finish" role="2.38"><primary sortas="file_make_directory_finish">g_file_make_directory_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_make_directory_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                              <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous directory creation, started with
<link linkend="g-file-make-directory-async"><function>g_file_make_directory_async()</function></link>.</para>
<para>Virtual: make_directory_finish</para>
<refsect3 id="g-file-make-directory-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-make-directory-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on successful directory creation, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="g-file-make-directory-with-parents" role="function" condition="since:2.18">
<title>g_file_make_directory_with_parents&#160;()</title>
<indexterm zone="g-file-make-directory-with-parents" role="2.18"><primary sortas="file_make_directory_with_parents">g_file_make_directory_with_parents</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_make_directory_with_parents (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                    <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                    <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a directory and any parent directories that may not
exist similar to 'mkdir -p'. If the file system does not support
creating directories, this function will fail, setting <parameter>error</parameter>
 to
<link linkend="G-IO-ERROR-NOT-SUPPORTED:CAPS"><literal>G_IO_ERROR_NOT_SUPPORTED</literal></link>. If the directory itself already exists,
this function will fail setting <parameter>error</parameter>
 to <link linkend="G-IO-ERROR-EXISTS:CAPS"><literal>G_IO_ERROR_EXISTS</literal></link>, unlike
the similar <link linkend="g-mkdir-with-parents"><function>g_mkdir_with_parents()</function></link>.</para>
<para>For a local <link linkend="GFile"><type>GFile</type></link> the newly created directories will have the default
(current) ownership and permissions of the current process.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-make-directory-with-parents.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-make-directory-with-parents.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if all directories have been successfully created, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>
otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.18">2.18</link></para></refsect2>
<refsect2 id="g-file-make-symbolic-link" role="function">
<title>g_file_make_symbolic_link&#160;()</title>
<indexterm zone="g-file-make-symbolic-link"><primary sortas="file_make_symbolic_link">g_file_make_symbolic_link</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_make_symbolic_link (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                           <parameter>const <link linkend="char"><type>char</type></link> *symlink_value</parameter>,
                           <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                           <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a symbolic link named <parameter>file</parameter>
 which contains the string
<parameter>symlink_value</parameter>
.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-make-symbolic-link.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link> with the name of the symlink to create</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>symlink_value</para></entry>
<entry role="parameter_description"><para>a string with the path for the target
of the new symlink. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> filename]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-make-symbolic-link.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on the creation of a new symlink, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-query-settable-attributes" role="function">
<title>g_file_query_settable_attributes&#160;()</title>
<indexterm zone="g-file-query-settable-attributes"><primary sortas="file_query_settable_attributes">g_file_query_settable_attributes</primary></indexterm>
<programlisting language="C"><link linkend="GFileAttributeInfoList"><returnvalue>GFileAttributeInfoList</returnvalue></link>&#160;*
g_file_query_settable_attributes (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                  <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Obtain the list of settable attributes for the file.</para>
<para>Returns the type and full attribute name of all the attributes
that can be set on this file. This doesn't mean setting it will
always succeed though, you might get an access failure, or some
specific file may not support a specific attribute.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-query-settable-attributes.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-settable-attributes.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GFileAttributeInfoList"><type>GFileAttributeInfoList</type></link> describing the settable attributes.
When you are done with it, release it with
<link linkend="g-file-attribute-info-list-unref"><function>g_file_attribute_info_list_unref()</function></link></para>
</refsect3></refsect2>
<refsect2 id="g-file-query-writable-namespaces" role="function">
<title>g_file_query_writable_namespaces&#160;()</title>
<indexterm zone="g-file-query-writable-namespaces"><primary sortas="file_query_writable_namespaces">g_file_query_writable_namespaces</primary></indexterm>
<programlisting language="C"><link linkend="GFileAttributeInfoList"><returnvalue>GFileAttributeInfoList</returnvalue></link>&#160;*
g_file_query_writable_namespaces (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                  <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Obtain the list of attribute namespaces where new attributes
can be created by a user. An example of this is extended
attributes (in the "xattr" namespace).</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-query-writable-namespaces.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-query-writable-namespaces.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GFileAttributeInfoList"><type>GFileAttributeInfoList</type></link> describing the writable namespaces.
When you are done with it, release it with
<link linkend="g-file-attribute-info-list-unref"><function>g_file_attribute_info_list_unref()</function></link></para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attribute" role="function">
<title>g_file_set_attribute&#160;()</title>
<indexterm zone="g-file-set-attribute"><primary sortas="file_set_attribute">g_file_set_attribute</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attribute (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                      <parameter>const <link linkend="char"><type>char</type></link> *attribute</parameter>,
                      <parameter><link linkend="GFileAttributeType"><type>GFileAttributeType</type></link> type</parameter>,
                      <parameter><link linkend="gpointer"><type>gpointer</type></link> value_p</parameter>,
                      <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                      <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sets an attribute in the file with attribute name <parameter>attribute</parameter>
 to <parameter>value</parameter>
.</para>
<para>Some attributes can be unset by setting <parameter>type</parameter>
 to
<link linkend="G-FILE-ATTRIBUTE-TYPE-INVALID:CAPS"><literal>G_FILE_ATTRIBUTE_TYPE_INVALID</literal></link> and <parameter>value_p</parameter>
 to <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-attribute.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attribute</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>The type of the attribute</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value_p</para></entry>
<entry role="parameter_description"><para>a pointer to the value (or the pointer
itself if the type is a pointer type). </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attribute.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the attribute was set, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attributes-from-info" role="function">
<title>g_file_set_attributes_from_info&#160;()</title>
<indexterm zone="g-file-set-attributes-from-info"><primary sortas="file_set_attributes_from_info">g_file_set_attributes_from_info</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attributes_from_info (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                 <parameter><link linkend="GFileInfo"><type>GFileInfo</type></link> *info</parameter>,
                                 <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                                 <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                 <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Tries to set all attributes in the <link linkend="GFileInfo"><type>GFileInfo</type></link> on the target
values, not stopping on the first error.</para>
<para>If there is any error during this operation then <parameter>error</parameter>
 will
be set to the first error. Error on particular fields are flagged
by setting the "status" field in the attribute value to
<link linkend="G-FILE-ATTRIBUTE-STATUS-ERROR-SETTING:CAPS"><literal>G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING</literal></link>, which means you can
also detect further errors.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-attributes-from-info.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileInfo"><type>GFileInfo</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attributes-from-info.returns" role="returns">
<title>Returns</title>
<para> <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if there was any error, <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attributes-async" role="function">
<title>g_file_set_attributes_async&#160;()</title>
<indexterm zone="g-file-set-attributes-async"><primary sortas="file_set_attributes_async">g_file_set_attributes_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_set_attributes_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                             <parameter><link linkend="GFileInfo"><type>GFileInfo</type></link> *info</parameter>,
                             <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                             <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                             <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously sets the attributes of <parameter>file</parameter>
 with <parameter>info</parameter>
.</para>
<para>For more details, see <link linkend="g-file-set-attributes-from-info"><function>g_file_set_attributes_from_info()</function></link>,
which is the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-set-attributes-finish"><function>g_file_set_attributes_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-set-attributes-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileInfo"><type>GFileInfo</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>a <link linkend="gpointer"><type>gpointer</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-set-attributes-finish" role="function">
<title>g_file_set_attributes_finish&#160;()</title>
<indexterm zone="g-file-set-attributes-finish"><primary sortas="file_set_attributes_finish">g_file_set_attributes_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attributes_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                              <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                              <parameter><link linkend="GFileInfo"><type>GFileInfo</type></link> **info</parameter>,
                              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes setting an attribute started in <link linkend="g-file-set-attributes-async"><function>g_file_set_attributes_async()</function></link>.</para>
<refsect3 id="g-file-set-attributes-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileInfo"><type>GFileInfo</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attributes-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the attributes were set correctly, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attribute-string" role="function">
<title>g_file_set_attribute_string&#160;()</title>
<indexterm zone="g-file-set-attribute-string"><primary sortas="file_set_attribute_string">g_file_set_attribute_string</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attribute_string (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                             <parameter>const <link linkend="char"><type>char</type></link> *attribute</parameter>,
                             <parameter>const <link linkend="char"><type>char</type></link> *value</parameter>,
                             <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sets <parameter>attribute</parameter>
 of type <link linkend="G-FILE-ATTRIBUTE-TYPE-STRING:CAPS"><literal>G_FILE_ATTRIBUTE_TYPE_STRING</literal></link> to <parameter>value</parameter>
.
If <parameter>attribute</parameter>
 is of a different type, this operation will fail.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-attribute-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attribute</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's value</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attribute-string.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>attribute</parameter>
was successfully set, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attribute-byte-string" role="function">
<title>g_file_set_attribute_byte_string&#160;()</title>
<indexterm zone="g-file-set-attribute-byte-string"><primary sortas="file_set_attribute_byte_string">g_file_set_attribute_byte_string</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attribute_byte_string (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                  <parameter>const <link linkend="char"><type>char</type></link> *attribute</parameter>,
                                  <parameter>const <link linkend="char"><type>char</type></link> *value</parameter>,
                                  <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                                  <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sets <parameter>attribute</parameter>
 of type <link linkend="G-FILE-ATTRIBUTE-TYPE-BYTE-STRING:CAPS"><literal>G_FILE_ATTRIBUTE_TYPE_BYTE_STRING</literal></link> to <parameter>value</parameter>
.
If <parameter>attribute</parameter>
 is of a different type, this operation will fail,
returning <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-attribute-byte-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attribute</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's new value</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attribute-byte-string.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>attribute</parameter>
was successfully set to <parameter>value</parameter>
in the <parameter>file</parameter>
, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attribute-uint32" role="function">
<title>g_file_set_attribute_uint32&#160;()</title>
<indexterm zone="g-file-set-attribute-uint32"><primary sortas="file_set_attribute_uint32">g_file_set_attribute_uint32</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attribute_uint32 (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                             <parameter>const <link linkend="char"><type>char</type></link> *attribute</parameter>,
                             <parameter><link linkend="guint32"><type>guint32</type></link> value</parameter>,
                             <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sets <parameter>attribute</parameter>
 of type <link linkend="G-FILE-ATTRIBUTE-TYPE-UINT32:CAPS"><literal>G_FILE_ATTRIBUTE_TYPE_UINT32</literal></link> to <parameter>value</parameter>
.
If <parameter>attribute</parameter>
 is of a different type, this operation will fail.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-attribute-uint32.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attribute</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a <link linkend="guint32"><type>guint32</type></link> containing the attribute's new value</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attribute-uint32.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>attribute</parameter>
was successfully set to <parameter>value</parameter>
in the <parameter>file</parameter>
, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attribute-int32" role="function">
<title>g_file_set_attribute_int32&#160;()</title>
<indexterm zone="g-file-set-attribute-int32"><primary sortas="file_set_attribute_int32">g_file_set_attribute_int32</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attribute_int32 (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                            <parameter>const <link linkend="char"><type>char</type></link> *attribute</parameter>,
                            <parameter><link linkend="gint32"><type>gint32</type></link> value</parameter>,
                            <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                            <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                            <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sets <parameter>attribute</parameter>
 of type <link linkend="G-FILE-ATTRIBUTE-TYPE-INT32:CAPS"><literal>G_FILE_ATTRIBUTE_TYPE_INT32</literal></link> to <parameter>value</parameter>
.
If <parameter>attribute</parameter>
 is of a different type, this operation will fail.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-attribute-int32.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attribute</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a <link linkend="gint32"><type>gint32</type></link> containing the attribute's new value</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attribute-int32.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>attribute</parameter>
was successfully set to <parameter>value</parameter>
in the <parameter>file</parameter>
, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attribute-uint64" role="function">
<title>g_file_set_attribute_uint64&#160;()</title>
<indexterm zone="g-file-set-attribute-uint64"><primary sortas="file_set_attribute_uint64">g_file_set_attribute_uint64</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attribute_uint64 (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                             <parameter>const <link linkend="char"><type>char</type></link> *attribute</parameter>,
                             <parameter><link linkend="guint64"><type>guint64</type></link> value</parameter>,
                             <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sets <parameter>attribute</parameter>
 of type <link linkend="G-FILE-ATTRIBUTE-TYPE-UINT64:CAPS"><literal>G_FILE_ATTRIBUTE_TYPE_UINT64</literal></link> to <parameter>value</parameter>
.
If <parameter>attribute</parameter>
 is of a different type, this operation will fail.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-attribute-uint64.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attribute</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a <link linkend="guint64"><type>guint64</type></link> containing the attribute's new value</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attribute-uint64.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>attribute</parameter>
was successfully set to <parameter>value</parameter>
in the <parameter>file</parameter>
, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-set-attribute-int64" role="function">
<title>g_file_set_attribute_int64&#160;()</title>
<indexterm zone="g-file-set-attribute-int64"><primary sortas="file_set_attribute_int64">g_file_set_attribute_int64</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_set_attribute_int64 (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                            <parameter>const <link linkend="char"><type>char</type></link> *attribute</parameter>,
                            <parameter><link linkend="gint64"><type>gint64</type></link> value</parameter>,
                            <parameter><link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link> flags</parameter>,
                            <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                            <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sets <parameter>attribute</parameter>
 of type <link linkend="G-FILE-ATTRIBUTE-TYPE-INT64:CAPS"><literal>G_FILE_ATTRIBUTE_TYPE_INT64</literal></link> to <parameter>value</parameter>
.
If <parameter>attribute</parameter>
 is of a different type, this operation will fail.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-set-attribute-int64.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attribute</para></entry>
<entry role="parameter_description"><para>a string containing the attribute's name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a <link linkend="guint64"><type>guint64</type></link> containing the attribute's new value</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFileQueryInfoFlags"><type>GFileQueryInfoFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-set-attribute-int64.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>attribute</parameter>
was successfully set, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-mount-mountable" role="function">
<title>g_file_mount_mountable&#160;()</title>
<indexterm zone="g-file-mount-mountable"><primary sortas="file_mount_mountable">g_file_mount_mountable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_mount_mountable (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                        <parameter><link linkend="GMountMountFlags"><type>GMountMountFlags</type></link> flags</parameter>,
                        <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                        <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Mounts a file of type G_FILE_TYPE_MOUNTABLE.
Using <parameter>mount_operation</parameter>
, you can request callbacks when, for instance,
passwords are needed during authentication.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-mount-mountable-finish"><function>g_file_mount_mountable_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-mount-mountable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link>,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-mount-mountable-finish" role="function">
<title>g_file_mount_mountable_finish&#160;()</title>
<indexterm zone="g-file-mount-mountable-finish"><primary sortas="file_mount_mountable_finish">g_file_mount_mountable_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_file_mount_mountable_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                               <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes a mount operation. See <link linkend="g-file-mount-mountable"><function>g_file_mount_mountable()</function></link> for details.</para>
<para>Finish an asynchronous mount operation that was started
with <link linkend="g-file-mount-mountable"><function>g_file_mount_mountable()</function></link>.</para>
<refsect3 id="g-file-mount-mountable-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-mount-mountable-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFile"><type>GFile</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-unmount-mountable" role="function" condition="deprecated:2.22: Use g_file_unmount_mountable_with_operation() instead.">
<title>g_file_unmount_mountable&#160;()</title>
<indexterm zone="g-file-unmount-mountable" role="deprecated"><primary sortas="file_unmount_mountable">g_file_unmount_mountable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_unmount_mountable (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                          <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                          <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                          <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                          <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<warning><para><literal>g_file_unmount_mountable</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-file-unmount-mountable-with-operation"><function>g_file_unmount_mountable_with_operation()</function></link> instead.</para>
</warning>
<para>Unmounts a file of type G_FILE_TYPE_MOUNTABLE.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-unmount-mountable-finish"><function>g_file_unmount_mountable_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-unmount-mountable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-unmount-mountable-finish" role="function" condition="deprecated">
<title>g_file_unmount_mountable_finish&#160;()</title>
<indexterm zone="g-file-unmount-mountable-finish" role="deprecated"><primary sortas="file_unmount_mountable_finish">g_file_unmount_mountable_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_unmount_mountable_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                 <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                 <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<warning><para><literal>g_file_unmount_mountable_finish</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-file-unmount-mountable-with-operation-finish"><function>g_file_unmount_mountable_with_operation_finish()</function></link>
    instead.</para>
</warning>
<para>Finishes an unmount operation, see <link linkend="g-file-unmount-mountable"><function>g_file_unmount_mountable()</function></link> for details.</para>
<para>Finish an asynchronous unmount operation that was started
with <link linkend="g-file-unmount-mountable"><function>g_file_unmount_mountable()</function></link>.</para>
<refsect3 id="g-file-unmount-mountable-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-unmount-mountable-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the operation finished successfully.
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-unmount-mountable-with-operation" role="function" condition="since:2.22">
<title>g_file_unmount_mountable_with_operation&#160;()</title>
<indexterm zone="g-file-unmount-mountable-with-operation" role="2.22"><primary sortas="file_unmount_mountable_with_operation">g_file_unmount_mountable_with_operation</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_unmount_mountable_with_operation
                               (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                                <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Unmounts a file of type <link linkend="G-FILE-TYPE-MOUNTABLE:CAPS"><type>G_FILE_TYPE_MOUNTABLE</type></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-unmount-mountable-finish"><function>g_file_unmount_mountable_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-unmount-mountable-with-operation.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link>,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-unmount-mountable-with-operation-finish" role="function" condition="since:2.22">
<title>g_file_unmount_mountable_with_operation_finish&#160;()</title>
<indexterm zone="g-file-unmount-mountable-with-operation-finish" role="2.22"><primary sortas="file_unmount_mountable_with_operation_finish">g_file_unmount_mountable_with_operation_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_unmount_mountable_with_operation_finish
                               (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an unmount operation,
see <link linkend="g-file-unmount-mountable-with-operation"><function>g_file_unmount_mountable_with_operation()</function></link> for details.</para>
<para>Finish an asynchronous unmount operation that was started
with <link linkend="g-file-unmount-mountable-with-operation"><function>g_file_unmount_mountable_with_operation()</function></link>.</para>
<refsect3 id="g-file-unmount-mountable-with-operation-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-unmount-mountable-with-operation-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the operation finished successfully.
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-eject-mountable" role="function" condition="deprecated:2.22: Use g_file_eject_mountable_with_operation() instead.">
<title>g_file_eject_mountable&#160;()</title>
<indexterm zone="g-file-eject-mountable" role="deprecated"><primary sortas="file_eject_mountable">g_file_eject_mountable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_eject_mountable (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                        <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                        <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<warning><para><literal>g_file_eject_mountable</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-file-eject-mountable-with-operation"><function>g_file_eject_mountable_with_operation()</function></link> instead.</para>
</warning>
<para>Starts an asynchronous eject on a mountable.
When this operation has completed, <parameter>callback</parameter>
 will be called with
<parameter>user_user</parameter>
 data, and the operation can be finalized with
<link linkend="g-file-eject-mountable-finish"><function>g_file_eject_mountable_finish()</function></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-eject-mountable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-eject-mountable-finish" role="function" condition="deprecated">
<title>g_file_eject_mountable_finish&#160;()</title>
<indexterm zone="g-file-eject-mountable-finish" role="deprecated"><primary sortas="file_eject_mountable_finish">g_file_eject_mountable_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_eject_mountable_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                               <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<warning><para><literal>g_file_eject_mountable_finish</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-file-eject-mountable-with-operation-finish"><function>g_file_eject_mountable_with_operation_finish()</function></link>
    instead.</para>
</warning>
<para>Finishes an asynchronous eject operation started by
<link linkend="g-file-eject-mountable"><function>g_file_eject_mountable()</function></link>.</para>
<refsect3 id="g-file-eject-mountable-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-eject-mountable-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>file</parameter>
was ejected successfully.
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-eject-mountable-with-operation" role="function" condition="since:2.22">
<title>g_file_eject_mountable_with_operation&#160;()</title>
<indexterm zone="g-file-eject-mountable-with-operation" role="2.22"><primary sortas="file_eject_mountable_with_operation">g_file_eject_mountable_with_operation</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_eject_mountable_with_operation (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                       <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                                       <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                                       <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                       <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                       <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Starts an asynchronous eject on a mountable.
When this operation has completed, <parameter>callback</parameter>
 will be called with
<parameter>user_user</parameter>
 data, and the operation can be finalized with
<link linkend="g-file-eject-mountable-with-operation-finish"><function>g_file_eject_mountable_with_operation_finish()</function></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-eject-mountable-with-operation.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link>,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-eject-mountable-with-operation-finish" role="function" condition="since:2.22">
<title>g_file_eject_mountable_with_operation_finish&#160;()</title>
<indexterm zone="g-file-eject-mountable-with-operation-finish" role="2.22"><primary sortas="file_eject_mountable_with_operation_finish">g_file_eject_mountable_with_operation_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_eject_mountable_with_operation_finish
                               (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous eject operation started by
<link linkend="g-file-eject-mountable-with-operation"><function>g_file_eject_mountable_with_operation()</function></link>.</para>
<refsect3 id="g-file-eject-mountable-with-operation-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-eject-mountable-with-operation-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>file</parameter>
was ejected successfully.
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-start-mountable" role="function" condition="since:2.22">
<title>g_file_start_mountable&#160;()</title>
<indexterm zone="g-file-start-mountable" role="2.22"><primary sortas="file_start_mountable">g_file_start_mountable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_start_mountable (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                        <parameter><link linkend="GDriveStartFlags"><type>GDriveStartFlags</type></link> flags</parameter>,
                        <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *start_operation</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                        <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Starts a file of type <link linkend="G-FILE-TYPE-MOUNTABLE:CAPS"><type>G_FILE_TYPE_MOUNTABLE</type></link>.
Using <parameter>start_operation</parameter>
, you can request callbacks when, for instance,
passwords are needed during authentication.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-mount-mountable-finish"><function>g_file_mount_mountable_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-start-mountable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>start_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-start-mountable-finish" role="function" condition="since:2.22">
<title>g_file_start_mountable_finish&#160;()</title>
<indexterm zone="g-file-start-mountable-finish" role="2.22"><primary sortas="file_start_mountable_finish">g_file_start_mountable_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_start_mountable_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                               <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes a start operation. See <link linkend="g-file-start-mountable"><function>g_file_start_mountable()</function></link> for details.</para>
<para>Finish an asynchronous start operation that was started
with <link linkend="g-file-start-mountable"><function>g_file_start_mountable()</function></link>.</para>
<refsect3 id="g-file-start-mountable-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-start-mountable-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the operation finished successfully. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>
otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-stop-mountable" role="function" condition="since:2.22">
<title>g_file_stop_mountable&#160;()</title>
<indexterm zone="g-file-stop-mountable" role="2.22"><primary sortas="file_stop_mountable">g_file_stop_mountable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_stop_mountable (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                       <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                       <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                       <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                       <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                       <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Stops a file of type <link linkend="G-FILE-TYPE-MOUNTABLE:CAPS"><type>G_FILE_TYPE_MOUNTABLE</type></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-stop-mountable-finish"><function>g_file_stop_mountable_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-stop-mountable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link>,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-stop-mountable-finish" role="function" condition="since:2.22">
<title>g_file_stop_mountable_finish&#160;()</title>
<indexterm zone="g-file-stop-mountable-finish" role="2.22"><primary sortas="file_stop_mountable_finish">g_file_stop_mountable_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_stop_mountable_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                              <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an stop operation, see <link linkend="g-file-stop-mountable"><function>g_file_stop_mountable()</function></link> for details.</para>
<para>Finish an asynchronous stop operation that was started
with <link linkend="g-file-stop-mountable"><function>g_file_stop_mountable()</function></link>.</para>
<refsect3 id="g-file-stop-mountable-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-stop-mountable-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the operation finished successfully.
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-poll-mountable" role="function" condition="since:2.22">
<title>g_file_poll_mountable&#160;()</title>
<indexterm zone="g-file-poll-mountable" role="2.22"><primary sortas="file_poll_mountable">g_file_poll_mountable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_poll_mountable (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                       <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                       <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                       <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Polls a file of type <link linkend="G-FILE-TYPE-MOUNTABLE:CAPS"><type>G_FILE_TYPE_MOUNTABLE</type></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-mount-mountable-finish"><function>g_file_mount_mountable_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-poll-mountable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-poll-mountable-finish" role="function" condition="since:2.22">
<title>g_file_poll_mountable_finish&#160;()</title>
<indexterm zone="g-file-poll-mountable-finish" role="2.22"><primary sortas="file_poll_mountable_finish">g_file_poll_mountable_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_poll_mountable_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                              <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes a poll operation. See <link linkend="g-file-poll-mountable"><function>g_file_poll_mountable()</function></link> for details.</para>
<para>Finish an asynchronous poll operation that was polled
with <link linkend="g-file-poll-mountable"><function>g_file_poll_mountable()</function></link>.</para>
<refsect3 id="g-file-poll-mountable-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-poll-mountable-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the operation finished successfully. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>
otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-mount-enclosing-volume" role="function">
<title>g_file_mount_enclosing_volume&#160;()</title>
<indexterm zone="g-file-mount-enclosing-volume"><primary sortas="file_mount_enclosing_volume">g_file_mount_enclosing_volume</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_mount_enclosing_volume (<parameter><link linkend="GFile"><type>GFile</type></link> *location</parameter>,
                               <parameter><link linkend="GMountMountFlags"><type>GMountMountFlags</type></link> flags</parameter>,
                               <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                               <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                               <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Starts a <parameter>mount_operation</parameter>
, mounting the volume that contains
the file <parameter>location</parameter>
.</para>
<para>When this operation has completed, <parameter>callback</parameter>
 will be called with
<parameter>user_user</parameter>
 data, and the operation can be finalized with
<link linkend="g-file-mount-enclosing-volume-finish"><function>g_file_mount_enclosing_volume_finish()</function></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-mount-enclosing-volume.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>location</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-mount-enclosing-volume-finish" role="function">
<title>g_file_mount_enclosing_volume_finish&#160;()</title>
<indexterm zone="g-file-mount-enclosing-volume-finish"><primary sortas="file_mount_enclosing_volume_finish">g_file_mount_enclosing_volume_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_mount_enclosing_volume_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *location</parameter>,
                                      <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes a mount operation started by <link linkend="g-file-mount-enclosing-volume"><function>g_file_mount_enclosing_volume()</function></link>.</para>
<refsect3 id="g-file-mount-enclosing-volume-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>location</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-mount-enclosing-volume-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful. If an error has occurred,
this function will return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> and set <parameter>error</parameter>
appropriately if present.</para>
</refsect3></refsect2>
<refsect2 id="g-file-monitor-directory" role="function">
<title>g_file_monitor_directory&#160;()</title>
<indexterm zone="g-file-monitor-directory"><primary sortas="file_monitor_directory">g_file_monitor_directory</primary></indexterm>
<programlisting language="C"><link linkend="GFileMonitor"><returnvalue>GFileMonitor</returnvalue></link>&#160;*
g_file_monitor_directory (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                          <parameter><link linkend="GFileMonitorFlags"><type>GFileMonitorFlags</type></link> flags</parameter>,
                          <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                          <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Obtains a directory monitor for the given file.
This may fail if directory monitoring is not supported.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>It does not make sense for <parameter>flags</parameter>
 to contain
<link linkend="G-FILE-MONITOR-WATCH-HARD-LINKS:CAPS"><literal>G_FILE_MONITOR_WATCH_HARD_LINKS</literal></link>, since hard links can not be made to
directories.  It is not possible to monitor all the files in a
directory for changes made via hard links; if you want to do this then
you must register individual watches with <link linkend="g-file-monitor"><function>g_file_monitor()</function></link>.</para>
<para>Virtual: monitor_dir</para>
<refsect3 id="g-file-monitor-directory.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileMonitorFlags"><type>GFileMonitorFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-monitor-directory.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileMonitor"><type>GFileMonitor</type></link> for the given <parameter>file</parameter>
,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-monitor-file" role="function">
<title>g_file_monitor_file&#160;()</title>
<indexterm zone="g-file-monitor-file"><primary sortas="file_monitor_file">g_file_monitor_file</primary></indexterm>
<programlisting language="C"><link linkend="GFileMonitor"><returnvalue>GFileMonitor</returnvalue></link>&#160;*
g_file_monitor_file (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                     <parameter><link linkend="GFileMonitorFlags"><type>GFileMonitorFlags</type></link> flags</parameter>,
                     <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Obtains a file monitor for the given file. If no file notification
mechanism exists, then regular polling of the file is used.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>If <parameter>flags</parameter>
 contains <link linkend="G-FILE-MONITOR-WATCH-HARD-LINKS:CAPS"><literal>G_FILE_MONITOR_WATCH_HARD_LINKS</literal></link> then the monitor
will also attempt to report changes made to the file via another
filename (ie, a hard link). Without this flag, you can only rely on
changes made through the filename contained in <parameter>file</parameter>
 to be
reported. Using this flag may result in an increase in resource
usage, and may not have any effect depending on the <link linkend="GFileMonitor"><type>GFileMonitor</type></link>
backend and/or filesystem type.</para>
<refsect3 id="g-file-monitor-file.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileMonitorFlags"><type>GFileMonitorFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-monitor-file.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileMonitor"><type>GFileMonitor</type></link> for the given <parameter>file</parameter>
,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-file-monitor" role="function" condition="since:2.18">
<title>g_file_monitor&#160;()</title>
<indexterm zone="g-file-monitor" role="2.18"><primary sortas="file_monitor">g_file_monitor</primary></indexterm>
<programlisting language="C"><link linkend="GFileMonitor"><returnvalue>GFileMonitor</returnvalue></link>&#160;*
g_file_monitor (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                <parameter><link linkend="GFileMonitorFlags"><type>GFileMonitorFlags</type></link> flags</parameter>,
                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Obtains a file or directory monitor for the given file,
depending on the type of the file.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-monitor.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileMonitorFlags"><type>GFileMonitorFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-monitor.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileMonitor"><type>GFileMonitor</type></link> for the given <parameter>file</parameter>
,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.18">2.18</link></para></refsect2>
<refsect2 id="g-file-load-bytes" role="function" condition="since:2.56">
<title>g_file_load_bytes&#160;()</title>
<indexterm zone="g-file-load-bytes" role="2.56"><primary sortas="file_load_bytes">g_file_load_bytes</primary></indexterm>
<programlisting language="C"><link linkend="GBytes"><returnvalue>GBytes</returnvalue></link>&#160;*
g_file_load_bytes (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                   <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                   <parameter><link linkend="gchar"><type>gchar</type></link> **etag_out</parameter>,
                   <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Loads the contents of <parameter>file</parameter>
 and returns it as <link linkend="GBytes"><type>GBytes</type></link>.</para>
<para>If <parameter>file</parameter>
 is a resource:// based URI, the resulting bytes will reference the
embedded resource instead of a copy. Otherwise, this is equivalent to calling
<link linkend="g-file-load-contents"><function>g_file_load_contents()</function></link> and <link linkend="g-bytes-new-take"><function>g_bytes_new_take()</function></link>.</para>
<para>For resources, <parameter>etag_out</parameter>
 will be set to <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>The data contained in the resulting <link linkend="GBytes"><type>GBytes</type></link> is always zero-terminated, but
this is not included in the <link linkend="GBytes"><type>GBytes</type></link> length. The resulting <link linkend="GBytes"><type>GBytes</type></link> should be
freed with <link linkend="g-bytes-unref"><function>g_bytes_unref()</function></link> when no longer in use.</para>
<refsect3 id="g-file-load-bytes.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>etag_out</para></entry>
<entry role="parameter_description"><para>a location to place the current
entity tag for the file, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the entity tag is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>nullable</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a location for a <link linkend="GError"><type>GError</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-load-bytes.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GBytes"><type>GBytes</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> and <parameter>error</parameter>
is set. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.56">2.56</link></para></refsect2>
<refsect2 id="g-file-load-bytes-async" role="function" condition="since:2.56">
<title>g_file_load_bytes_async&#160;()</title>
<indexterm zone="g-file-load-bytes-async" role="2.56"><primary sortas="file_load_bytes_async">g_file_load_bytes_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_load_bytes_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                         <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                         <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                         <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously loads the contents of <parameter>file</parameter>
 as <link linkend="GBytes"><type>GBytes</type></link>.</para>
<para>If <parameter>file</parameter>
 is a resource:// based URI, the resulting bytes will reference the
embedded resource instead of a copy. Otherwise, this is equivalent to calling
<link linkend="g-file-load-contents-async"><function>g_file_load_contents_async()</function></link> and <link linkend="g-bytes-new-take"><function>g_bytes_new_take()</function></link>.</para>
<para><parameter>callback</parameter>
 should call <link linkend="g-file-load-bytes-finish"><function>g_file_load_bytes_finish()</function></link> to get the result of this
asynchronous operation.</para>
<para>See <link linkend="g-file-load-bytes"><function>g_file_load_bytes()</function></link> for more information.</para>
<refsect3 id="g-file-load-bytes-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the
request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.56">2.56</link></para></refsect2>
<refsect2 id="g-file-load-bytes-finish" role="function" condition="since:2.56">
<title>g_file_load_bytes_finish&#160;()</title>
<indexterm zone="g-file-load-bytes-finish" role="2.56"><primary sortas="file_load_bytes_finish">g_file_load_bytes_finish</primary></indexterm>
<programlisting language="C"><link linkend="GBytes"><returnvalue>GBytes</returnvalue></link>&#160;*
g_file_load_bytes_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                          <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                          <parameter><link linkend="gchar"><type>gchar</type></link> **etag_out</parameter>,
                          <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Completes an asynchronous request to <link linkend="g-file-load-bytes-async"><function>g_file_load_bytes_async()</function></link>.</para>
<para>For resources, <parameter>etag_out</parameter>
 will be set to <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>The data contained in the resulting <link linkend="GBytes"><type>GBytes</type></link> is always zero-terminated, but
this is not included in the <link linkend="GBytes"><type>GBytes</type></link> length. The resulting <link linkend="GBytes"><type>GBytes</type></link> should be
freed with <link linkend="g-bytes-unref"><function>g_bytes_unref()</function></link> when no longer in use.</para>
<para>See <link linkend="g-file-load-bytes"><function>g_file_load_bytes()</function></link> for more information.</para>
<refsect3 id="g-file-load-bytes-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link> provided to the callback</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>etag_out</para></entry>
<entry role="parameter_description"><para>a location to place the current
entity tag for the file, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the entity tag is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>nullable</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a location for a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-load-bytes-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GBytes"><type>GBytes</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> and <parameter>error</parameter>
is set. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.56">2.56</link></para></refsect2>
<refsect2 id="g-file-load-contents" role="function">
<title>g_file_load_contents&#160;()</title>
<indexterm zone="g-file-load-contents"><primary sortas="file_load_contents">g_file_load_contents</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_load_contents (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                      <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                      <parameter><link linkend="char"><type>char</type></link> **contents</parameter>,
                      <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                      <parameter><link linkend="char"><type>char</type></link> **etag_out</parameter>,
                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Loads the content of the file into memory. The data is always
zero-terminated, but this is not included in the resultant <parameter>length</parameter>
.
The returned <parameter>content</parameter>
 should be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer
needed.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-load-contents.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>contents</para></entry>
<entry role="parameter_description"><para>a location to place the contents of the file. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>transfer full</acronym>][<acronym>element-type</acronym> guint8][<acronym>array</acronym> length=length]</emphasis></entry></row>
<row><entry role="parameter_name"><para>length</para></entry>
<entry role="parameter_description"><para>a location to place the length of the contents of the file,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the length is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>etag_out</para></entry>
<entry role="parameter_description"><para>a location to place the current entity tag for the file,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the entity tag is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-load-contents.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>file</parameter>
's contents were successfully loaded.
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if there were errors.</para>
</refsect3></refsect2>
<refsect2 id="g-file-load-contents-async" role="function">
<title>g_file_load_contents_async&#160;()</title>
<indexterm zone="g-file-load-contents-async"><primary sortas="file_load_contents_async">g_file_load_contents_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_load_contents_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                            <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                            <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                            <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Starts an asynchronous load of the <parameter>file</parameter>
's contents.</para>
<para>For more details, see <link linkend="g-file-load-contents"><function>g_file_load_contents()</function></link> which is
the synchronous version of this call.</para>
<para>When the load operation has completed, <parameter>callback</parameter>
 will be called
with <parameter>user</parameter>
 data. To finish the operation, call
<link linkend="g-file-load-contents-finish"><function>g_file_load_contents_finish()</function></link> with the <link linkend="GAsyncResult"><type>GAsyncResult</type></link> returned by
the <parameter>callback</parameter>
.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<refsect3 id="g-file-load-contents-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the request is satisfied</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-load-contents-finish" role="function">
<title>g_file_load_contents_finish&#160;()</title>
<indexterm zone="g-file-load-contents-finish"><primary sortas="file_load_contents_finish">g_file_load_contents_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_load_contents_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                             <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                             <parameter><link linkend="char"><type>char</type></link> **contents</parameter>,
                             <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                             <parameter><link linkend="char"><type>char</type></link> **etag_out</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous load of the <parameter>file</parameter>
's contents.
The contents are placed in <parameter>contents</parameter>
, and <parameter>length</parameter>
 is set to the
size of the <parameter>contents</parameter>
 string. The <parameter>content</parameter>
 should be freed with
<link linkend="g-free"><function>g_free()</function></link> when no longer needed. If <parameter>etag_out</parameter>
 is present, it will be
set to the new entity tag for the <parameter>file</parameter>
.</para>
<refsect3 id="g-file-load-contents-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>contents</para></entry>
<entry role="parameter_description"><para>a location to place the contents of the file. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>transfer full</acronym>][<acronym>element-type</acronym> guint8][<acronym>array</acronym> length=length]</emphasis></entry></row>
<row><entry role="parameter_name"><para>length</para></entry>
<entry role="parameter_description"><para>a location to place the length of the contents of the file,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the length is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>etag_out</para></entry>
<entry role="parameter_description"><para>a location to place the current entity tag for the file,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the entity tag is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-load-contents-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the load was successful. If <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> and <parameter>error</parameter>
is
present, it will be set appropriately.</para>
</refsect3></refsect2>
<refsect2 id="g-file-load-partial-contents-async" role="function">
<title>g_file_load_partial_contents_async&#160;()</title>
<indexterm zone="g-file-load-partial-contents-async"><primary sortas="file_load_partial_contents_async">g_file_load_partial_contents_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_load_partial_contents_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                    <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                    <parameter><link linkend="GFileReadMoreCallback"><type>GFileReadMoreCallback</type></link> read_more_callback</parameter>,
                                    <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                    <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Reads the partial contents of a file. A <link linkend="GFileReadMoreCallback"><type>GFileReadMoreCallback</type></link> should
be used to stop reading from the file when appropriate, else this
function will behave exactly as <link linkend="g-file-load-contents-async"><function>g_file_load_contents_async()</function></link>. This
operation can be finished by <link linkend="g-file-load-partial-contents-finish"><function>g_file_load_partial_contents_finish()</function></link>.</para>
<para>Users of this function should be aware that <parameter>user_data</parameter>
 is passed to
both the <parameter>read_more_callback</parameter>
 and the <parameter>callback</parameter>
.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-file-load-partial-contents-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>read_more_callback</para></entry>
<entry role="parameter_description"><para>a
<link linkend="GFileReadMoreCallback"><type>GFileReadMoreCallback</type></link> to receive partial data
and to specify whether further data should be read. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope call</acronym>][<acronym>closure</acronym> user_data]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>][<acronym>closure</acronym> user_data]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to the callback functions</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-load-partial-contents-finish" role="function">
<title>g_file_load_partial_contents_finish&#160;()</title>
<indexterm zone="g-file-load-partial-contents-finish"><primary sortas="file_load_partial_contents_finish">g_file_load_partial_contents_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_load_partial_contents_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                     <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                                     <parameter><link linkend="char"><type>char</type></link> **contents</parameter>,
                                     <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                     <parameter><link linkend="char"><type>char</type></link> **etag_out</parameter>,
                                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous partial load operation that was started
with <link linkend="g-file-load-partial-contents-async"><function>g_file_load_partial_contents_async()</function></link>. The data is always
zero-terminated, but this is not included in the resultant <parameter>length</parameter>
.
The returned <parameter>content</parameter>
 should be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer
needed.</para>
<refsect3 id="g-file-load-partial-contents-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>contents</para></entry>
<entry role="parameter_description"><para>a location to place the contents of the file. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>transfer full</acronym>][<acronym>element-type</acronym> guint8][<acronym>array</acronym> length=length]</emphasis></entry></row>
<row><entry role="parameter_name"><para>length</para></entry>
<entry role="parameter_description"><para>a location to place the length of the contents of the file,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the length is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>etag_out</para></entry>
<entry role="parameter_description"><para>a location to place the current entity tag for the file,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the entity tag is not needed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-load-partial-contents-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the load was successful. If <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> and <parameter>error</parameter>
is
present, it will be set appropriately.</para>
</refsect3></refsect2>
<refsect2 id="g-file-replace-contents" role="function">
<title>g_file_replace_contents&#160;()</title>
<indexterm zone="g-file-replace-contents"><primary sortas="file_replace_contents">g_file_replace_contents</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_replace_contents (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                         <parameter>const <link linkend="char"><type>char</type></link> *contents</parameter>,
                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>,
                         <parameter>const <link linkend="char"><type>char</type></link> *etag</parameter>,
                         <parameter><link linkend="gboolean"><type>gboolean</type></link> make_backup</parameter>,
                         <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                         <parameter><link linkend="char"><type>char</type></link> **new_etag</parameter>,
                         <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Replaces the contents of <parameter>file</parameter>
 with <parameter>contents</parameter>
 of <parameter>length</parameter>
 bytes.</para>
<para>If <parameter>etag</parameter>
 is specified (not <link linkend="NULL:CAPS"><literal>NULL</literal></link>), any existing file must have that etag,
or the error <link linkend="G-IO-ERROR-WRONG-ETAG:CAPS"><literal>G_IO_ERROR_WRONG_ETAG</literal></link> will be returned.</para>
<para>If <parameter>make_backup</parameter>
 is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, this function will attempt to make a backup
of <parameter>file</parameter>
. Internally, it uses <link linkend="g-file-replace"><function>g_file_replace()</function></link>, so will try to replace the
file contents in the safest way possible. For example, atomic renames are
used when replacing local files’ contents.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>The returned <parameter>new_etag</parameter>
 can be used to verify that the file hasn't
changed the next time it is saved over.</para>
<refsect3 id="g-file-replace-contents.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>contents</para></entry>
<entry role="parameter_description"><para>a string containing the new contents for <parameter>file</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>element-type</acronym> guint8][<acronym>array</acronym> length=length]</emphasis></entry></row>
<row><entry role="parameter_name"><para>length</para></entry>
<entry role="parameter_description"><para>the length of <parameter>contents</parameter>
in bytes</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>etag</para></entry>
<entry role="parameter_description"><para>the old <link linkend="gfile-etag">entity-tag</link> for the document,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>make_backup</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a backup should be created</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>new_etag</para></entry>
<entry role="parameter_description"><para>a location to a new <link linkend="gfile-etag">entity tag</link>
for the document. This should be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer
needed, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-replace-contents.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful. If an error has occurred, this function
will return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> and set <parameter>error</parameter>
appropriately if present.</para>
</refsect3></refsect2>
<refsect2 id="g-file-replace-contents-async" role="function">
<title>g_file_replace_contents_async&#160;()</title>
<indexterm zone="g-file-replace-contents-async"><primary sortas="file_replace_contents_async">g_file_replace_contents_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_replace_contents_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                               <parameter>const <link linkend="char"><type>char</type></link> *contents</parameter>,
                               <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>,
                               <parameter>const <link linkend="char"><type>char</type></link> *etag</parameter>,
                               <parameter><link linkend="gboolean"><type>gboolean</type></link> make_backup</parameter>,
                               <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                               <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                               <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Starts an asynchronous replacement of <parameter>file</parameter>
 with the given
<parameter>contents</parameter>
 of <parameter>length</parameter>
 bytes. <parameter>etag</parameter>
 will replace the document's
current entity tag.</para>
<para>When this operation has completed, <parameter>callback</parameter>
 will be called with
<parameter>user_user</parameter>
 data, and the operation can be finalized with
<link linkend="g-file-replace-contents-finish"><function>g_file_replace_contents_finish()</function></link>.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned.</para>
<para>If <parameter>make_backup</parameter>
 is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, this function will attempt to
make a backup of <parameter>file</parameter>
.</para>
<para>Note that no copy of <parameter>content</parameter>
 will be made, so it must stay valid
until <parameter>callback</parameter>
 is called. See <link linkend="g-file-replace-contents-bytes-async"><function>g_file_replace_contents_bytes_async()</function></link>
for a <link linkend="GBytes"><type>GBytes</type></link> version that will automatically hold a reference to the
contents (without copying) for the duration of the call.</para>
<refsect3 id="g-file-replace-contents-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>contents</para></entry>
<entry role="parameter_description"><para>string of contents to replace the file with. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>element-type</acronym> guint8][<acronym>array</acronym> length=length]</emphasis></entry></row>
<row><entry role="parameter_name"><para>length</para></entry>
<entry role="parameter_description"><para>the length of <parameter>contents</parameter>
in bytes</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>etag</para></entry>
<entry role="parameter_description"><para>a new <link linkend="gfile-etag">entity tag</link> for the <parameter>file</parameter>
, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>make_backup</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a backup should be created</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the request is satisfied</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-file-replace-contents-bytes-async" role="function" condition="since:2.40">
<title>g_file_replace_contents_bytes_async&#160;()</title>
<indexterm zone="g-file-replace-contents-bytes-async" role="2.40"><primary sortas="file_replace_contents_bytes_async">g_file_replace_contents_bytes_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_replace_contents_bytes_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                     <parameter><link linkend="GBytes"><type>GBytes</type></link> *contents</parameter>,
                                     <parameter>const <link linkend="char"><type>char</type></link> *etag</parameter>,
                                     <parameter><link linkend="gboolean"><type>gboolean</type></link> make_backup</parameter>,
                                     <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                                     <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                     <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                     <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Same as <link linkend="g-file-replace-contents-async"><function>g_file_replace_contents_async()</function></link> but takes a <link linkend="GBytes"><type>GBytes</type></link> input instead.
This function will keep a ref on <parameter>contents</parameter>
 until the operation is done.
Unlike <link linkend="g-file-replace-contents-async"><function>g_file_replace_contents_async()</function></link> this allows forgetting about the
content without waiting for the callback.</para>
<para>When this operation has completed, <parameter>callback</parameter>
 will be called with
<parameter>user_user</parameter>
 data, and the operation can be finalized with
<link linkend="g-file-replace-contents-finish"><function>g_file_replace_contents_finish()</function></link>.</para>
<refsect3 id="g-file-replace-contents-bytes-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>contents</para></entry>
<entry role="parameter_description"><para>a <link linkend="GBytes"><type>GBytes</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>etag</para></entry>
<entry role="parameter_description"><para>a new <link linkend="gfile-etag">entity tag</link> for the <parameter>file</parameter>
, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>make_backup</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a backup should be created</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the request is satisfied</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-file-replace-contents-finish" role="function">
<title>g_file_replace_contents_finish&#160;()</title>
<indexterm zone="g-file-replace-contents-finish"><primary sortas="file_replace_contents_finish">g_file_replace_contents_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_replace_contents_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                                <parameter><link linkend="char"><type>char</type></link> **new_etag</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous replace of the given <parameter>file</parameter>
. See
<link linkend="g-file-replace-contents-async"><function>g_file_replace_contents_async()</function></link>. Sets <parameter>new_etag</parameter>
 to the new entity
tag for the document, if present.</para>
<refsect3 id="g-file-replace-contents-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>new_etag</para></entry>
<entry role="parameter_description"><para>a location of a new <link linkend="gfile-etag">entity tag</link>
for the document. This should be freed with <link linkend="g-free"><function>g_free()</function></link> when it is no
longer needed, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-replace-contents-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on failure.</para>
</refsect3></refsect2>
<refsect2 id="g-file-copy-attributes" role="function">
<title>g_file_copy_attributes&#160;()</title>
<indexterm zone="g-file-copy-attributes"><primary sortas="file_copy_attributes">g_file_copy_attributes</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_copy_attributes (<parameter><link linkend="GFile"><type>GFile</type></link> *source</parameter>,
                        <parameter><link linkend="GFile"><type>GFile</type></link> *destination</parameter>,
                        <parameter><link linkend="GFileCopyFlags"><type>GFileCopyFlags</type></link> flags</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                        <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Copies the file attributes from <parameter>source</parameter>
 to <parameter>destination</parameter>
.</para>
<para>Normally only a subset of the file attributes are copied,
those that are copies in a normal file copy operation
(which for instance does not include e.g. owner). However
if <link linkend="G-FILE-COPY-ALL-METADATA:CAPS"><type>G_FILE_COPY_ALL_METADATA</type></link> is specified in <parameter>flags</parameter>
, then
all the metadata that is possible to copy is copied. This
is useful when implementing move by copy + delete source.</para>
<refsect3 id="g-file-copy-attributes.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>source</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link> with attributes</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destination</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link> to copy attributes to</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCopyFlags"><type>GFileCopyFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-copy-attributes.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the attributes were copied successfully,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-file-create-readwrite" role="function" condition="since:2.22">
<title>g_file_create_readwrite&#160;()</title>
<indexterm zone="g-file-create-readwrite" role="2.22"><primary sortas="file_create_readwrite">g_file_create_readwrite</primary></indexterm>
<programlisting language="C"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
g_file_create_readwrite (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                         <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                         <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a new file and returns a stream for reading and
writing to it. The file must not already exist.</para>
<para>By default files created are generally readable by everyone,
but if you pass <link linkend="G-FILE-CREATE-PRIVATE:CAPS"><type>G_FILE_CREATE_PRIVATE</type></link> in <parameter>flags</parameter>
 the file
will be made readable only to the current user, to the level
that is supported on the target filesystem.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be
returned.</para>
<para>If a file or directory with this name already exists, the
<link linkend="G-IO-ERROR-EXISTS:CAPS"><literal>G_IO_ERROR_EXISTS</literal></link> error will be returned. Some file systems don't
allow all file names, and may return an <link linkend="G-IO-ERROR-INVALID-FILENAME:CAPS"><literal>G_IO_ERROR_INVALID_FILENAME</literal></link>
error, and if the name is too long, <link linkend="G-IO-ERROR-FILENAME-TOO-LONG:CAPS"><literal>G_IO_ERROR_FILENAME_TOO_LONG</literal></link>
will be returned. Other errors are possible too, and depend on what
kind of filesystem the file is on.</para>
<para>Note that in many non-local file cases read and write streams are
not supported, so make sure you really need to do read and write
streaming, rather than just opening for reading or writing.</para>
<refsect3 id="g-file-create-readwrite.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>return location for a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-create-readwrite.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileIOStream"><type>GFileIOStream</type></link> for the newly created
file, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-create-readwrite-async" role="function" condition="since:2.22">
<title>g_file_create_readwrite_async&#160;()</title>
<indexterm zone="g-file-create-readwrite-async" role="2.22"><primary sortas="file_create_readwrite_async">g_file_create_readwrite_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_create_readwrite_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                               <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                               <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                               <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                               <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously creates a new file and returns a stream
for reading and writing to it. The file must not already exist.</para>
<para>For more details, see <link linkend="g-file-create-readwrite"><function>g_file_create_readwrite()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-create-readwrite-finish"><function>g_file_create_readwrite_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-create-readwrite-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-create-readwrite-finish" role="function" condition="since:2.22">
<title>g_file_create_readwrite_finish&#160;()</title>
<indexterm zone="g-file-create-readwrite-finish" role="2.22"><primary sortas="file_create_readwrite_finish">g_file_create_readwrite_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
g_file_create_readwrite_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file create operation started with
<link linkend="g-file-create-readwrite-async"><function>g_file_create_readwrite_async()</function></link>.</para>
<refsect3 id="g-file-create-readwrite-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-create-readwrite-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileIOStream"><type>GFileIOStream</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-open-readwrite" role="function" condition="since:2.22">
<title>g_file_open_readwrite&#160;()</title>
<indexterm zone="g-file-open-readwrite" role="2.22"><primary sortas="file_open_readwrite">g_file_open_readwrite</primary></indexterm>
<programlisting language="C"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
g_file_open_readwrite (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                       <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                       <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Opens an existing file for reading and writing. The result is
a <link linkend="GFileIOStream"><type>GFileIOStream</type></link> that can be used to read and write the contents
of the file.</para>
<para>If <parameter>cancellable</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be
returned.</para>
<para>If the file does not exist, the <link linkend="G-IO-ERROR-NOT-FOUND:CAPS"><literal>G_IO_ERROR_NOT_FOUND</literal></link> error will
be returned. If the file is a directory, the <link linkend="G-IO-ERROR-IS-DIRECTORY:CAPS"><literal>G_IO_ERROR_IS_DIRECTORY</literal></link>
error will be returned. Other errors are possible too, and depend on
what kind of filesystem the file is on. Note that in many non-local
file cases read and write streams are not supported, so make sure you
really need to do read and write streaming, rather than just opening
for reading or writing.</para>
<refsect3 id="g-file-open-readwrite.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para><link linkend="GFile"><type>GFile</type></link> to open</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-open-readwrite.returns" role="returns">
<title>Returns</title>
<para><link linkend="GFileIOStream"><type>GFileIOStream</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-open-readwrite-async" role="function" condition="since:2.22">
<title>g_file_open_readwrite_async&#160;()</title>
<indexterm zone="g-file-open-readwrite-async" role="2.22"><primary sortas="file_open_readwrite_async">g_file_open_readwrite_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_open_readwrite_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                             <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                             <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously opens <parameter>file</parameter>
 for reading and writing.</para>
<para>For more details, see <link linkend="g-file-open-readwrite"><function>g_file_open_readwrite()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-open-readwrite-finish"><function>g_file_open_readwrite_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-open-readwrite-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-open-readwrite-finish" role="function" condition="since:2.22">
<title>g_file_open_readwrite_finish&#160;()</title>
<indexterm zone="g-file-open-readwrite-finish" role="2.22"><primary sortas="file_open_readwrite_finish">g_file_open_readwrite_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
g_file_open_readwrite_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                              <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file read operation started with
<link linkend="g-file-open-readwrite-async"><function>g_file_open_readwrite_async()</function></link>.</para>
<refsect3 id="g-file-open-readwrite-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-open-readwrite-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileIOStream"><type>GFileIOStream</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-replace-readwrite" role="function" condition="since:2.22">
<title>g_file_replace_readwrite&#160;()</title>
<indexterm zone="g-file-replace-readwrite" role="2.22"><primary sortas="file_replace_readwrite">g_file_replace_readwrite</primary></indexterm>
<programlisting language="C"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
g_file_replace_readwrite (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                          <parameter>const <link linkend="char"><type>char</type></link> *etag</parameter>,
                          <parameter><link linkend="gboolean"><type>gboolean</type></link> make_backup</parameter>,
                          <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                          <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                          <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Returns an output stream for overwriting the file in readwrite mode,
possibly creating a backup copy of the file first. If the file doesn't
exist, it will be created.</para>
<para>For details about the behaviour, see <link linkend="g-file-replace"><function>g_file_replace()</function></link> which does the
same thing but returns an output stream only.</para>
<para>Note that in many non-local file cases read and write streams are not
supported, so make sure you really need to do read and write streaming,
rather than just opening for reading or writing.</para>
<refsect3 id="g-file-replace-readwrite.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>etag</para></entry>
<entry role="parameter_description"><para>an optional <link linkend="gfile-etag">entity tag</link>
for the current <link linkend="GFile"><type>GFile</type></link>, or <link linkend="NULL:CAPS"><type>NULL</type></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>make_backup</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a backup should be created</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>return location for a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-replace-readwrite.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileIOStream"><type>GFileIOStream</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-replace-readwrite-async" role="function" condition="since:2.22">
<title>g_file_replace_readwrite_async&#160;()</title>
<indexterm zone="g-file-replace-readwrite-async" role="2.22"><primary sortas="file_replace_readwrite_async">g_file_replace_readwrite_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_file_replace_readwrite_async (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                <parameter>const <link linkend="char"><type>char</type></link> *etag</parameter>,
                                <parameter><link linkend="gboolean"><type>gboolean</type></link> make_backup</parameter>,
                                <parameter><link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link> flags</parameter>,
                                <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Asynchronously overwrites the file in read-write mode,
replacing the contents, possibly creating a backup copy
of the file first.</para>
<para>For more details, see <link linkend="g-file-replace-readwrite"><function>g_file_replace_readwrite()</function></link> which is
the synchronous version of this call.</para>
<para>When the operation is finished, <parameter>callback</parameter>
 will be called.
You can then call <link linkend="g-file-replace-readwrite-finish"><function>g_file_replace_readwrite_finish()</function></link> to get
the result of the operation.</para>
<refsect3 id="g-file-replace-readwrite-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>etag</para></entry>
<entry role="parameter_description"><para>an <link linkend="gfile-etag">entity tag</link> for the current <link linkend="GFile"><type>GFile</type></link>,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>make_backup</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if a backup should be created</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a set of <link linkend="GFileCreateFlags"><type>GFileCreateFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the <link linkend="io-priority">I/O priority</link> of the request</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object,
<link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call
when the request is satisfied. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to callback function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-replace-readwrite-finish" role="function" condition="since:2.22">
<title>g_file_replace_readwrite_finish&#160;()</title>
<indexterm zone="g-file-replace-readwrite-finish" role="2.22"><primary sortas="file_replace_readwrite_finish">g_file_replace_readwrite_finish</primary></indexterm>
<programlisting language="C"><link linkend="GFileIOStream"><returnvalue>GFileIOStream</returnvalue></link>&#160;*
g_file_replace_readwrite_finish (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>,
                                 <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *res</parameter>,
                                 <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes an asynchronous file replace operation started with
<link linkend="g-file-replace-readwrite-async"><function>g_file_replace_readwrite_async()</function></link>.</para>
<refsect3 id="g-file-replace-readwrite-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>input <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-replace-readwrite-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFileIOStream"><type>GFileIOStream</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-file-supports-thread-contexts" role="function" condition="since:2.22">
<title>g_file_supports_thread_contexts&#160;()</title>
<indexterm zone="g-file-supports-thread-contexts" role="2.22"><primary sortas="file_supports_thread_contexts">g_file_supports_thread_contexts</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_file_supports_thread_contexts (<parameter><link linkend="GFile"><type>GFile</type></link> *file</parameter>);</programlisting>
<para>Checks if <parameter>file</parameter>
 supports
<link linkend="g-main-context-push-thread-default-context">thread-default contexts</link>.
If this returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, you cannot perform asynchronous operations on
<parameter>file</parameter>
 in a thread that has a thread-default context.</para>
<refsect3 id="g-file-supports-thread-contexts.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>file</para></entry>
<entry role="parameter_description"><para>a <link linkend="GFile"><type>GFile</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-file-supports-thread-contexts.returns" role="returns">
<title>Returns</title>
<para> Whether or not <parameter>file</parameter>
supports thread-default contexts.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>

</refsect1>
<refsect1 id="GFile.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GFile-struct" role="struct">
<title>GFile</title>
<indexterm zone="GFile-struct"><primary sortas="File">GFile</primary></indexterm>
<programlisting language="C">typedef struct _GFile GFile;</programlisting>
<para>A handle to an object implementing the <link linkend="GFileIface"><type>GFileIface</type></link> interface.
Generally stores a location within the file system. Handles do not
necessarily represent files or directories that currently exist.</para>
</refsect2>
<refsect2 id="GFileIface" role="struct">
<title>struct GFileIface</title>
<indexterm zone="GFileIface"><primary sortas="FileIface">GFileIface</primary></indexterm>
<programlisting language="C">struct GFileIface {
  GTypeInterface g_iface;

  /* Virtual Table */

  GFile *             (* dup)                         (GFile         *file);
  guint               (* hash)                        (GFile         *file);
  gboolean            (* equal)                       (GFile         *file1,
                                                       GFile         *file2);
  gboolean            (* is_native)                   (GFile         *file);
  gboolean            (* has_uri_scheme)              (GFile         *file,
                                                       const char    *uri_scheme);
  char *              (* get_uri_scheme)              (GFile         *file);
  char *              (* get_basename)                (GFile         *file);
  char *              (* get_path)                    (GFile         *file);
  char *              (* get_uri)                     (GFile         *file);
  char *              (* get_parse_name)              (GFile         *file);
  GFile *             (* get_parent)                  (GFile         *file);
  gboolean            (* prefix_matches)              (GFile         *prefix,
                                                       GFile         *file);
  char *              (* get_relative_path)           (GFile         *parent,
                                                       GFile         *descendant);
  GFile *             (* resolve_relative_path)       (GFile        *file,
                                                       const char   *relative_path);
  GFile *             (* get_child_for_display_name)  (GFile        *file,
                                                       const char   *display_name,
                                                       GError      **error);

  GFileEnumerator *   (* enumerate_children)          (GFile                *file,
                                                       const char           *attributes,
                                                       GFileQueryInfoFlags   flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* enumerate_children_async)    (GFile                *file,
                                                       const char           *attributes,
                                                       GFileQueryInfoFlags   flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileEnumerator *   (* enumerate_children_finish)   (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileInfo *         (* query_info)                  (GFile                *file,
                                                       const char           *attributes,
                                                       GFileQueryInfoFlags   flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* query_info_async)            (GFile                *file,
                                                       const char           *attributes,
                                                       GFileQueryInfoFlags   flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileInfo *         (* query_info_finish)           (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileInfo *         (* query_filesystem_info)       (GFile                *file,
                                                       const char           *attributes,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* query_filesystem_info_async) (GFile                *file,
                                                       const char           *attributes,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileInfo *         (* query_filesystem_info_finish)(GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GMount *            (* find_enclosing_mount)        (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* find_enclosing_mount_async)  (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GMount *            (* find_enclosing_mount_finish) (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFile *             (* set_display_name)            (GFile                *file,
                                                       const char           *display_name,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* set_display_name_async)      (GFile                *file,
                                                       const char           *display_name,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFile *             (* set_display_name_finish)     (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileAttributeInfoList * (* query_settable_attributes)    (GFile          *file,
                                                             GCancellable   *cancellable,
                                                             GError        **error);
  void                (* _query_settable_attributes_async)  (void);
  void                (* _query_settable_attributes_finish) (void);

  GFileAttributeInfoList * (* query_writable_namespaces)    (GFile          *file,
                                                             GCancellable   *cancellable,
                                                             GError        **error);
  void                (* _query_writable_namespaces_async)  (void);
  void                (* _query_writable_namespaces_finish) (void);

  gboolean            (* set_attribute)               (GFile                *file,
                                                       const char           *attribute,
                                                       GFileAttributeType    type,
                                                       gpointer              value_p,
                                                       GFileQueryInfoFlags   flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  gboolean            (* set_attributes_from_info)    (GFile                *file,
                                                       GFileInfo            *info,
                                                       GFileQueryInfoFlags   flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* set_attributes_async)        (GFile                *file,
                                                       GFileInfo            *info,
                                                       GFileQueryInfoFlags   flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* set_attributes_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GFileInfo           **info,
                                                       GError              **error);

  GFileInputStream *  (* read_fn)                     (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* read_async)                  (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileInputStream *  (* read_finish)                 (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileOutputStream * (* append_to)                   (GFile                *file,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* append_to_async)             (GFile                *file,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileOutputStream * (* append_to_finish)            (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileOutputStream * (* create)                      (GFile                *file,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* create_async)                (GFile                *file,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileOutputStream * (* create_finish)               (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileOutputStream * (* replace)                     (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* replace_async)               (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileOutputStream * (* replace_finish)              (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  gboolean            (* delete_file)                 (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* delete_file_async)           (GFile                *file,
						       int                   io_priority,
						       GCancellable         *cancellable,
						       GAsyncReadyCallback   callback,
						       gpointer              user_data);
  gboolean            (* delete_file_finish)          (GFile                *file,
						       GAsyncResult         *result,
						       GError              **error);

  gboolean            (* trash)                       (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* trash_async)                 (GFile                *file,
						       int                   io_priority,
						       GCancellable         *cancellable,
						       GAsyncReadyCallback   callback,
						       gpointer              user_data);
  gboolean            (* trash_finish)                (GFile                *file,
						       GAsyncResult         *result,
						       GError              **error);

  gboolean            (* make_directory)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* make_directory_async)        (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* make_directory_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  gboolean            (* make_symbolic_link)          (GFile                *file,
                                                       const char           *symlink_value,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* _make_symbolic_link_async)   (void);
  void                (* _make_symbolic_link_finish)  (void);

  gboolean            (* copy)                        (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GError              **error);
  void                (* copy_async)                  (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* copy_finish)                 (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  gboolean            (* move)                        (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GError              **error);
  void                (* _move_async)                 (void);
  void                (* _move_finish)                (void);

  void                (* mount_mountable)             (GFile                *file,
                                                       GMountMountFlags      flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFile *             (* mount_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* unmount_mountable)           (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* unmount_mountable_finish)    (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* eject_mountable)             (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* eject_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* mount_enclosing_volume)      (GFile                *location,
                                                       GMountMountFlags      flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean         (* mount_enclosing_volume_finish)  (GFile                *location,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  GFileMonitor *      (* monitor_dir)                 (GFile                *file,
                                                       GFileMonitorFlags     flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  GFileMonitor *      (* monitor_file)                (GFile                *file,
                                                       GFileMonitorFlags     flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);

  GFileIOStream *     (* open_readwrite)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* open_readwrite_async)        (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* open_readwrite_finish)       (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);
  GFileIOStream *     (* create_readwrite)            (GFile                *file,
						       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* create_readwrite_async)      (GFile                *file,
						       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* create_readwrite_finish)      (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);
  GFileIOStream *     (* replace_readwrite)           (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* replace_readwrite_async)     (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* replace_readwrite_finish)    (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  void                (* start_mountable)             (GFile                *file,
                                                       GDriveStartFlags      flags,
                                                       GMountOperation      *start_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* start_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* stop_mountable)              (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* stop_mountable_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  gboolean            supports_thread_contexts;

  void                (* unmount_mountable_with_operation) (GFile           *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* unmount_mountable_with_operation_finish) (GFile    *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* eject_mountable_with_operation) (GFile             *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* eject_mountable_with_operation_finish) (GFile      *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* poll_mountable)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* poll_mountable_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  gboolean            (* measure_disk_usage)          (GFile                         *file,
                                                       GFileMeasureFlags              flags,
                                                       GCancellable                  *cancellable,
                                                       GFileMeasureProgressCallback   progress_callback,
                                                       gpointer                       progress_data,
                                                       guint64                       *disk_usage,
                                                       guint64                       *num_dirs,
                                                       guint64                       *num_files,
                                                       GError                       **error);
  void                (* measure_disk_usage_async)    (GFile                         *file,
                                                       GFileMeasureFlags              flags,
                                                       gint                           io_priority,
                                                       GCancellable                  *cancellable,
                                                       GFileMeasureProgressCallback   progress_callback,
                                                       gpointer                       progress_data,
                                                       GAsyncReadyCallback            callback,
                                                       gpointer                       user_data);
  gboolean            (* measure_disk_usage_finish)   (GFile                         *file,
                                                       GAsyncResult                  *result,
                                                       guint64                       *disk_usage,
                                                       guint64                       *num_dirs,
                                                       guint64                       *num_files,
                                                       GError                       **error);
};
</programlisting>
<para>An interface for writing VFS file handles.</para>
<refsect3 id="GFileIface.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.dup">dup</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Duplicates a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.hash">hash</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Creates a hash of a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.equal">equal</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Checks equality of two given <link linkend="GFiles"><type>GFiles</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.is-native">is_native</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Checks to see if a file is native to the system.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.has-uri-scheme">has_uri_scheme</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Checks to see if a <link linkend="GFile"><type>GFile</type></link> has a given URI scheme.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.get-uri-scheme">get_uri_scheme</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the URI scheme for a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.get-basename">get_basename</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the basename for a given <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.get-path">get_path</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the current path within a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.get-uri">get_uri</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a URI for the path within a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.get-parse-name">get_parse_name</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the parsed name for the <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.get-parent">get_parent</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the parent directory for the <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.prefix-matches">prefix_matches</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Checks whether a <link linkend="GFile"><type>GFile</type></link> contains a specified file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.get-relative-path">get_relative_path</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the path for a <link linkend="GFile"><type>GFile</type></link> relative to a given path.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.resolve-relative-path">resolve_relative_path</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Resolves a relative path for a <link linkend="GFile"><type>GFile</type></link> to an absolute path.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.get-child-for-display-name">get_child_for_display_name</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the child <link linkend="GFile"><type>GFile</type></link> for a given display name.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.enumerate-children">enumerate_children</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> with the children of a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.enumerate-children-async">enumerate_children_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously gets a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> with the children of a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.enumerate-children-finish">enumerate_children_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously enumerating the children.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.query-info">query_info</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the <link linkend="GFileInfo"><type>GFileInfo</type></link> for a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.query-info-async">query_info_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously gets the <link linkend="GFileInfo"><type>GFileInfo</type></link> for a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.query-info-finish">query_info_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous query info operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.query-filesystem-info">query_filesystem_info</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GFileInfo"><type>GFileInfo</type></link> for the file system <link linkend="GFile"><type>GFile</type></link> is on.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.query-filesystem-info-async">query_filesystem_info_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously gets a <link linkend="GFileInfo"><type>GFileInfo</type></link> for the file system <link linkend="GFile"><type>GFile</type></link> is on.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.query-filesystem-info-finish">query_filesystem_info_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously getting the file system info.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.find-enclosing-mount">find_enclosing_mount</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GMount"><type>GMount</type></link> for the <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.find-enclosing-mount-async">find_enclosing_mount_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously gets the <link linkend="GMount"><type>GMount</type></link> for a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.find-enclosing-mount-finish">find_enclosing_mount_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously getting the volume.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.set-display-name">set_display_name</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Sets the display name for a <link linkend="GFile"><type>GFile</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.set-display-name-async">set_display_name_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously sets a <link linkend="GFile"><type>GFile</type></link>'s display name.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.set-display-name-finish">set_display_name_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously setting a <link linkend="GFile"><type>GFile</type></link>'s display name.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.query-settable-attributes">query_settable_attributes</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns a list of <link linkend="GFileAttributes"><type>GFileAttributes</type></link> that can be set.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.-query-settable-attributes-async">_query_settable_attributes_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously gets a list of <link linkend="GFileAttributes"><type>GFileAttributes</type></link> that can be set.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.-query-settable-attributes-finish">_query_settable_attributes_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously querying settable attributes.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.query-writable-namespaces">query_writable_namespaces</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Returns a list of <link linkend="GFileAttribute"><type>GFileAttribute</type></link> namespaces that are writable.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.-query-writable-namespaces-async">_query_writable_namespaces_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously gets a list of <link linkend="GFileAttribute"><type>GFileAttribute</type></link> namespaces that are writable.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.-query-writable-namespaces-finish">_query_writable_namespaces_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously querying the writable namespaces.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.set-attribute">set_attribute</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Sets a <link linkend="GFileAttribute"><type>GFileAttribute</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.set-attributes-from-info">set_attributes_from_info</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Sets a <link linkend="GFileAttribute"><type>GFileAttribute</type></link> with information from a <link linkend="GFileInfo"><type>GFileInfo</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.set-attributes-async">set_attributes_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously sets a file's attributes.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.set-attributes-finish">set_attributes_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes setting a file's attributes asynchronously.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.read-fn">read_fn</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Reads a file asynchronously.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.read-async">read_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously reads a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.read-finish">read_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously reading a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.append-to">append_to</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Writes to the end of a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.append-to-async">append_to_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously writes to the end of a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.append-to-finish">append_to_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous file append operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.create">create</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Creates a new file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.create-async">create_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously creates a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.create-finish">create_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously creating a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.replace">replace</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Replaces the contents of a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.replace-async">replace_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously replaces the contents of a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.replace-finish">replace_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes asynchronously replacing a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.delete-file">delete_file</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Deletes a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.delete-file-async">delete_file_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously deletes a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.delete-file-finish">delete_file_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous delete.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.trash">trash</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Sends a <link linkend="GFile"><type>GFile</type></link> to the Trash location.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.trash-async">trash_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously sends a <link linkend="GFile"><type>GFile</type></link> to the Trash location.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.trash-finish">trash_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous file trashing operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.make-directory">make_directory</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Makes a directory.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.make-directory-async">make_directory_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously makes a directory.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.make-directory-finish">make_directory_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes making a directory asynchronously.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.make-symbolic-link">make_symbolic_link</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Makes a symbolic link.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.-make-symbolic-link-async">_make_symbolic_link_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously makes a symbolic link</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.-make-symbolic-link-finish">_make_symbolic_link_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes making a symbolic link asynchronously.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.copy">copy</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Copies a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.copy-async">copy_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously copies a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.copy-finish">copy_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous copy operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.move">move</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Moves a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.-move-async">_move_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously moves a file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.-move-finish">_move_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous move operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.mount-mountable">mount_mountable</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Mounts a mountable object.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.mount-mountable-finish">mount_mountable_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes a mounting operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.unmount-mountable">unmount_mountable</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Unmounts a mountable object.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.unmount-mountable-finish">unmount_mountable_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an unmount operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.eject-mountable">eject_mountable</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Ejects a mountable.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.eject-mountable-finish">eject_mountable_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an eject operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.mount-enclosing-volume">mount_enclosing_volume</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Mounts a specified location.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.mount-enclosing-volume-finish">mount_enclosing_volume_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes mounting a specified location.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.monitor-dir">monitor_dir</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Creates a <link linkend="GFileMonitor"><type>GFileMonitor</type></link> for the location.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.monitor-file">monitor_file</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Creates a <link linkend="GFileMonitor"><type>GFileMonitor</type></link> for the location.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.open-readwrite">open_readwrite</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Open file read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.open-readwrite-async">open_readwrite_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously opens file read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.open-readwrite-finish">open_readwrite_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous open read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.create-readwrite">create_readwrite</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Creates file read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.create-readwrite-async">create_readwrite_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously creates file read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.create-readwrite-finish">create_readwrite_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous creates read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.replace-readwrite">replace_readwrite</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Replaces file read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.replace-readwrite-async">replace_readwrite_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously replaces file read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.replace-readwrite-finish">replace_readwrite_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous replace read/write. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.start-mountable">start_mountable</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts a mountable object. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.start-mountable-finish">start_mountable_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an start operation. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.stop-mountable">stop_mountable</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Stops a mountable. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.stop-mountable-finish">stop_mountable_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an stop operation. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="gboolean"><type>gboolean</type></link>&#160;<structfield id="GFileIface.supports-thread-contexts">supports_thread_contexts</structfield>;</para></entry>
<entry role="struct_member_description"><para>a boolean that indicates whether the <link linkend="GFile"><type>GFile</type></link> implementation supports thread-default contexts. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.unmount-mountable-with-operation">unmount_mountable_with_operation</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Unmounts a mountable object using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.unmount-mountable-with-operation-finish">unmount_mountable_with_operation_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an unmount operation using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.eject-mountable-with-operation">eject_mountable_with_operation</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Ejects a mountable object using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.eject-mountable-with-operation-finish">eject_mountable_with_operation_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an eject operation using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.poll-mountable">poll_mountable</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Polls a mountable object for media changes. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.poll-mountable-finish">poll_mountable_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an poll operation for media changes. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.measure-disk-usage">measure_disk_usage</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Recursively measures the disk usage of <parameter>file</parameter>
. Since 2.38</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.measure-disk-usage-async">measure_disk_usage_async</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Asynchronously recursively measures the disk usage of <parameter>file</parameter>
. Since 2.38</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GFileIface.measure-disk-usage-finish">measure_disk_usage_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an asynchronous recursive measurement of the disk usage of <parameter>file</parameter>
. Since 2.38</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="GFileQueryInfoFlags" role="enum">
<title>enum GFileQueryInfoFlags</title>
<indexterm zone="GFileQueryInfoFlags"><primary sortas="FileQueryInfoFlags">GFileQueryInfoFlags</primary></indexterm>
<para>Flags used when querying a <link linkend="GFileInfo"><type>GFileInfo</type></link>.</para>
<refsect3 id="GFileQueryInfoFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-QUERY-INFO-NONE:CAPS">G_FILE_QUERY_INFO_NONE</para></entry>
<entry role="enum_member_description"><para>No flags set.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-QUERY-INFO-NOFOLLOW-SYMLINKS:CAPS">G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</para></entry>
<entry role="enum_member_description"><para>Don't follow symlinks.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GFileCreateFlags" role="enum">
<title>enum GFileCreateFlags</title>
<indexterm zone="GFileCreateFlags"><primary sortas="FileCreateFlags">GFileCreateFlags</primary></indexterm>
<para>Flags used when an operation may create a file.</para>
<refsect3 id="GFileCreateFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-CREATE-NONE:CAPS">G_FILE_CREATE_NONE</para></entry>
<entry role="enum_member_description"><para>No flags set.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-CREATE-PRIVATE:CAPS">G_FILE_CREATE_PRIVATE</para></entry>
<entry role="enum_member_description"><para>Create a file that can only be
   accessed by the current user.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-CREATE-REPLACE-DESTINATION:CAPS">G_FILE_CREATE_REPLACE_DESTINATION</para></entry>
<entry role="enum_member_description"><para>Replace the destination
   as if it didn't exist before. Don't try to keep any old
   permissions, replace instead of following links. This
   is generally useful if you're doing a "copy over"
   rather than a "save new version of" replace operation.
   You can think of it as "unlink destination" before
   writing to it, although the implementation may not
   be exactly like that. Since 2.20</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GFileCopyFlags" role="enum">
<title>enum GFileCopyFlags</title>
<indexterm zone="GFileCopyFlags"><primary sortas="FileCopyFlags">GFileCopyFlags</primary></indexterm>
<para>Flags used when copying or moving files.</para>
<refsect3 id="GFileCopyFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-COPY-NONE:CAPS">G_FILE_COPY_NONE</para></entry>
<entry role="enum_member_description"><para>No flags set.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-COPY-OVERWRITE:CAPS">G_FILE_COPY_OVERWRITE</para></entry>
<entry role="enum_member_description"><para>Overwrite any existing files</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-COPY-BACKUP:CAPS">G_FILE_COPY_BACKUP</para></entry>
<entry role="enum_member_description"><para>Make a backup of any existing files.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-COPY-NOFOLLOW-SYMLINKS:CAPS">G_FILE_COPY_NOFOLLOW_SYMLINKS</para></entry>
<entry role="enum_member_description"><para>Don't follow symlinks.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-COPY-ALL-METADATA:CAPS">G_FILE_COPY_ALL_METADATA</para></entry>
<entry role="enum_member_description"><para>Copy all file metadata instead of just default set used for copy (see <link linkend="GFileInfo"><type>GFileInfo</type></link>).</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-COPY-NO-FALLBACK-FOR-MOVE:CAPS">G_FILE_COPY_NO_FALLBACK_FOR_MOVE</para></entry>
<entry role="enum_member_description"><para>Don't use copy and delete fallback if native move not supported.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-COPY-TARGET-DEFAULT-PERMS:CAPS">G_FILE_COPY_TARGET_DEFAULT_PERMS</para></entry>
<entry role="enum_member_description"><para>Leaves target file with default perms, instead of setting the source file perms.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GFileMonitorFlags" role="enum">
<title>enum GFileMonitorFlags</title>
<indexterm zone="GFileMonitorFlags"><primary sortas="FileMonitorFlags">GFileMonitorFlags</primary></indexterm>
<para>Flags used to set what a <link linkend="GFileMonitor"><type>GFileMonitor</type></link> will watch for.</para>
<refsect3 id="GFileMonitorFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MONITOR-NONE:CAPS">G_FILE_MONITOR_NONE</para></entry>
<entry role="enum_member_description"><para>No flags set.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MONITOR-WATCH-MOUNTS:CAPS">G_FILE_MONITOR_WATCH_MOUNTS</para></entry>
<entry role="enum_member_description"><para>Watch for mount events.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MONITOR-SEND-MOVED:CAPS">G_FILE_MONITOR_SEND_MOVED</para></entry>
<entry role="enum_member_description"><para>Pair DELETED and CREATED events caused
  by file renames (moves) and send a single G_FILE_MONITOR_EVENT_MOVED
  event instead (NB: not supported on all backends; the default
  behaviour -without specifying this flag- is to send single DELETED
  and CREATED events).  Deprecated since 2.46: use
  <link linkend="G-FILE-MONITOR-WATCH-MOVES:CAPS"><literal>G_FILE_MONITOR_WATCH_MOVES</literal></link> instead.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MONITOR-WATCH-HARD-LINKS:CAPS">G_FILE_MONITOR_WATCH_HARD_LINKS</para></entry>
<entry role="enum_member_description"><para>Watch for changes to the file made
  via another hard link. Since 2.36.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MONITOR-WATCH-MOVES:CAPS">G_FILE_MONITOR_WATCH_MOVES</para></entry>
<entry role="enum_member_description"><para>Watch for rename operations on a
  monitored directory.  This causes <link linkend="G-FILE-MONITOR-EVENT-RENAMED:CAPS"><literal>G_FILE_MONITOR_EVENT_RENAMED</literal></link>,
  <link linkend="G-FILE-MONITOR-EVENT-MOVED-IN:CAPS"><literal>G_FILE_MONITOR_EVENT_MOVED_IN</literal></link> and <link linkend="G-FILE-MONITOR-EVENT-MOVED-OUT:CAPS"><literal>G_FILE_MONITOR_EVENT_MOVED_OUT</literal></link>
  events to be emitted when possible.  Since: 2.46.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GFileMeasureFlags" role="enum" condition="since:2.38">
<title>enum GFileMeasureFlags</title>
<indexterm zone="GFileMeasureFlags" role="2.38"><primary sortas="FileMeasureFlags">GFileMeasureFlags</primary></indexterm>
<para>Flags that can be used with <link linkend="g-file-measure-disk-usage"><function>g_file_measure_disk_usage()</function></link>.</para>
<refsect3 id="GFileMeasureFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MEASURE-NONE:CAPS">G_FILE_MEASURE_NONE</para></entry>
<entry role="enum_member_description"><para>No flags set.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MEASURE-REPORT-ANY-ERROR:CAPS">G_FILE_MEASURE_REPORT_ANY_ERROR</para></entry>
<entry role="enum_member_description"><para>Report any error encountered
  while traversing the directory tree.  Normally errors are only
  reported for the toplevel file.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MEASURE-APPARENT-SIZE:CAPS">G_FILE_MEASURE_APPARENT_SIZE</para></entry>
<entry role="enum_member_description"><para>Tally usage based on apparent file
  sizes.  Normally, the block-size is used, if available, as this is a
  more accurate representation of disk space used.
  Compare with <literal>du --apparent-size</literal>.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILE-MEASURE-NO-XDEV:CAPS">G_FILE_MEASURE_NO_XDEV</para></entry>
<entry role="enum_member_description"><para>Do not cross mount point boundaries.
  Compare with <literal>du -x</literal>.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.38">2.38</link></para></refsect2>
<refsect2 id="GFilesystemPreviewType" role="enum">
<title>enum GFilesystemPreviewType</title>
<indexterm zone="GFilesystemPreviewType"><primary sortas="FilesystemPreviewType">GFilesystemPreviewType</primary></indexterm>
<para>Indicates a hint from the file system whether files should be
previewed in a file manager. Returned as the value of the key
<link linkend="G-FILE-ATTRIBUTE-FILESYSTEM-USE-PREVIEW:CAPS"><type>G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW</type></link>.</para>
<refsect3 id="GFilesystemPreviewType.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-FILESYSTEM-PREVIEW-TYPE-IF-ALWAYS:CAPS">G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS</para></entry>
<entry role="enum_member_description"><para>Only preview files if user has explicitly requested it.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILESYSTEM-PREVIEW-TYPE-IF-LOCAL:CAPS">G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL</para></entry>
<entry role="enum_member_description"><para>Preview files if user has requested preview of "local" files.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-FILESYSTEM-PREVIEW-TYPE-NEVER:CAPS">G_FILESYSTEM_PREVIEW_TYPE_NEVER</para></entry>
<entry role="enum_member_description"><para>Never preview files.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>
<refsect1 id="GFile.see-also">
<title>See Also</title>
<para><link linkend="GFileInfo"><type>GFileInfo</type></link>, <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link></para>

</refsect1>

</refentry>
