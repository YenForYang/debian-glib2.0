<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GSimpleAsyncResult">
<refmeta>
<refentrytitle role="top_of_page" id="GSimpleAsyncResult.top_of_page">GSimpleAsyncResult</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GSimpleAsyncResult</refname>
<refpurpose>Simple asynchronous results implementation</refpurpose>
</refnamediv>

<refsect1 id="GSimpleAsyncResult.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GSimpleAsyncThreadFunc">*GSimpleAsyncThreadFunc</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSimpleAsyncResult"><returnvalue>GSimpleAsyncResult</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-simple-async-result-new">g_simple_async_result_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSimpleAsyncResult"><returnvalue>GSimpleAsyncResult</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-simple-async-result-new-error">g_simple_async_result_new_error</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSimpleAsyncResult"><returnvalue>GSimpleAsyncResult</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-simple-async-result-new-from-error">g_simple_async_result_new_from_error</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSimpleAsyncResult"><returnvalue>GSimpleAsyncResult</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-simple-async-result-new-take-error">g_simple_async_result_new_take_error</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-set-check-cancellable">g_simple_async_result_set_check_cancellable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-set-op-res-gpointer">g_simple_async_result_set_op_res_gpointer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gpointer"><returnvalue>gpointer</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-get-op-res-gpointer">g_simple_async_result_get_op_res_gpointer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-set-op-res-gssize">g_simple_async_result_set_op_res_gssize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-get-op-res-gssize">g_simple_async_result_get_op_res_gssize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-set-op-res-gboolean">g_simple_async_result_set_op_res_gboolean</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-get-op-res-gboolean">g_simple_async_result_get_op_res_gboolean</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gpointer"><returnvalue>gpointer</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-get-source-tag">g_simple_async_result_get_source_tag</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-is-valid">g_simple_async_result_is_valid</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-set-handle-cancellation">g_simple_async_result_set_handle_cancellation</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-complete">g_simple_async_result_complete</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-complete-in-idle">g_simple_async_result_complete_in_idle</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-run-in-thread">g_simple_async_result_run_in_thread</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-set-from-error">g_simple_async_result_set_from_error</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-take-error">g_simple_async_result_take_error</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-propagate-error">g_simple_async_result_propagate_error</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-set-error">g_simple_async_result_set_error</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-result-set-error-va">g_simple_async_result_set_error_va</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-report-error-in-idle">g_simple_async_report_error_in_idle</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-report-gerror-in-idle">g_simple_async_report_gerror_in_idle</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-simple-async-report-take-gerror-in-idle">g_simple_async_report_take_gerror_in_idle</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSimpleAsyncResult.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GSimpleAsyncResult-struct">GSimpleAsyncResult</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSimpleAsyncResult.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GSimpleAsyncResult
</screen>
</refsect1>
<refsect1 id="GSimpleAsyncResult.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GSimpleAsyncResult implements
 <link linkend="GAsyncResult">GAsyncResult</link>.</para>

</refsect1>

<refsect1 id="GSimpleAsyncResult.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GSimpleAsyncResult.description" role="desc">
<title role="desc.title">Description</title>
<para>As of GLib 2.46, <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> is deprecated in favor of
<link linkend="GTask"><type>GTask</type></link>, which provides a simpler API.</para>
<para><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> implements <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para>
<para>GSimpleAsyncResult handles <link linkend="GAsyncReadyCallbacks"><type>GAsyncReadyCallbacks</type></link>, error
reporting, operation cancellation and the final state of an operation,
completely transparent to the application. Results can be returned
as a pointer e.g. for functions that return data that is collected
asynchronously, a boolean value for checking the success or failure
of an operation, or a <link linkend="gssize"><type>gssize</type></link> for operations which return the number
of bytes modified by the operation; all of the simple return cases
are covered.</para>
<para>Most of the time, an application will not need to know of the details
of this API; it is handled transparently, and any necessary operations
are handled by <link linkend="GAsyncResult"><type>GAsyncResult</type></link>'s interface. However, if implementing a
new GIO module, for writing language bindings, or for complex
applications that need better control of how asynchronous operations
are completed, it is important to understand this functionality.</para>
<para>GSimpleAsyncResults are tagged with the calling function to ensure
that asynchronous functions and their finishing functions are used
together correctly.</para>
<para>To create a new <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>, call <link linkend="g-simple-async-result-new"><function>g_simple_async_result_new()</function></link>.
If the result needs to be created for a <link linkend="GError"><type>GError</type></link>, use
<link linkend="g-simple-async-result-new-from-error"><function>g_simple_async_result_new_from_error()</function></link> or
<link linkend="g-simple-async-result-new-take-error"><function>g_simple_async_result_new_take_error()</function></link>. If a <link linkend="GError"><type>GError</type></link> is not available
(e.g. the asynchronous operation's doesn't take a <link linkend="GError"><type>GError</type></link> argument),
but the result still needs to be created for an error condition, use
<link linkend="g-simple-async-result-new-error"><function>g_simple_async_result_new_error()</function></link> (or <link linkend="g-simple-async-result-set-error-va"><function>g_simple_async_result_set_error_va()</function></link>
if your application or binding requires passing a variable argument list
directly), and the error can then be propagated through the use of
<link linkend="g-simple-async-result-propagate-error"><function>g_simple_async_result_propagate_error()</function></link>.</para>
<para>An asynchronous operation can be made to ignore a cancellation event by
calling <link linkend="g-simple-async-result-set-handle-cancellation"><function>g_simple_async_result_set_handle_cancellation()</function></link> with a
<link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> for the operation and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>. This is useful for
operations that are dangerous to cancel, such as close (which would
cause a leak if cancelled before being run).</para>
<para>GSimpleAsyncResult can integrate into GLib's event loop, <link linkend="GMainLoop"><type>GMainLoop</type></link>,
or it can use <link linkend="GThreads"><type>GThreads</type></link>.
<link linkend="g-simple-async-result-complete"><function>g_simple_async_result_complete()</function></link> will finish an I/O task directly
from the point where it is called. <link linkend="g-simple-async-result-complete-in-idle"><function>g_simple_async_result_complete_in_idle()</function></link>
will finish it from an idle handler in the 
<link linkend="g-main-context-push-thread-default">thread-default main context</link>
where the <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> was created.
<link linkend="g-simple-async-result-run-in-thread"><function>g_simple_async_result_run_in_thread()</function></link> will run the job in a
separate thread and then use
<link linkend="g-simple-async-result-complete-in-idle"><function>g_simple_async_result_complete_in_idle()</function></link> to deliver the result.</para>
<para>To set the results of an asynchronous function,
<link linkend="g-simple-async-result-set-op-res-gpointer"><function>g_simple_async_result_set_op_res_gpointer()</function></link>,
<link linkend="g-simple-async-result-set-op-res-gboolean"><function>g_simple_async_result_set_op_res_gboolean()</function></link>, and
<link linkend="g-simple-async-result-set-op-res-gssize"><function>g_simple_async_result_set_op_res_gssize()</function></link>
are provided, setting the operation's result to a gpointer, gboolean, or
gssize, respectively.</para>
<para>Likewise, to get the result of an asynchronous function,
<link linkend="g-simple-async-result-get-op-res-gpointer"><function>g_simple_async_result_get_op_res_gpointer()</function></link>,
<link linkend="g-simple-async-result-get-op-res-gboolean"><function>g_simple_async_result_get_op_res_gboolean()</function></link>, and
<link linkend="g-simple-async-result-get-op-res-gssize"><function>g_simple_async_result_get_op_res_gssize()</function></link> are
provided, getting the operation's result as a gpointer, gboolean, and
gssize, respectively.</para>
<para>For the details of the requirements implementations must respect, see
<link linkend="GAsyncResult"><type>GAsyncResult</type></link>.  A typical implementation of an asynchronous operation
using GSimpleAsyncResult looks something like this:</para>
<informalexample><programlisting role="example"><![CDATA[
static void
baked_cb (Cake    *cake,
          gpointer user_data)
{
  // In this example, this callback is not given a reference to the cake,
  // so the GSimpleAsyncResult has to take a reference to it.
  GSimpleAsyncResult *result = user_data;

  if (cake == NULL)
    g_simple_async_result_set_error (result,
                                     BAKER_ERRORS,
                                     BAKER_ERROR_NO_FLOUR,
                                     "Go to the supermarket");
  else
    g_simple_async_result_set_op_res_gpointer (result,
                                               g_object_ref (cake),
                                               g_object_unref);


  // In this example, we assume that baked_cb is called as a callback from
  // the mainloop, so it's safe to complete the operation synchronously here.
  // If, however, _baker_prepare_cake () might call its callback without
  // first returning to the mainloop — inadvisable, but some APIs do so —
  // we would need to use g_simple_async_result_complete_in_idle().
  g_simple_async_result_complete (result);
  g_object_unref (result);
}

void
baker_bake_cake_async (Baker              *self,
                       guint               radius,
                       GAsyncReadyCallback callback,
                       gpointer            user_data)
{
  GSimpleAsyncResult *simple;
  Cake               *cake;

  if (radius < 3)
    {
      g_simple_async_report_error_in_idle (G_OBJECT (self),
                                           callback,
                                           user_data,
                                           BAKER_ERRORS,
                                           BAKER_ERROR_TOO_SMALL,
                                           "%ucm radius cakes are silly",
                                           radius);
      return;
    }

  simple = g_simple_async_result_new (G_OBJECT (self),
                                      callback,
                                      user_data,
                                      baker_bake_cake_async);
  cake = _baker_get_cached_cake (self, radius);

  if (cake != NULL)
    {
      g_simple_async_result_set_op_res_gpointer (simple,
                                                 g_object_ref (cake),
                                                 g_object_unref);
      g_simple_async_result_complete_in_idle (simple);
      g_object_unref (simple);
      // Drop the reference returned by _baker_get_cached_cake();
      // the GSimpleAsyncResult has taken its own reference.
      g_object_unref (cake);
      return;
    }

  _baker_prepare_cake (self, radius, baked_cb, simple);
}

Cake *
baker_bake_cake_finish (Baker        *self,
                        GAsyncResult *result,
                        GError      **error)
{
  GSimpleAsyncResult *simple;
  Cake               *cake;

  g_return_val_if_fail (g_simple_async_result_is_valid (result,
                                                        G_OBJECT (self),
                                                        baker_bake_cake_async),
                        NULL);

  simple = (GSimpleAsyncResult *) result;

  if (g_simple_async_result_propagate_error (simple, error))
    return NULL;

  cake = CAKE (g_simple_async_result_get_op_res_gpointer (simple));
  return g_object_ref (cake);
}
]]></programlisting></informalexample>
<para></para>

</refsect1>
<refsect1 id="GSimpleAsyncResult.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="GSimpleAsyncThreadFunc" role="function">
<title>GSimpleAsyncThreadFunc&#160;()</title>
<indexterm zone="GSimpleAsyncThreadFunc"><primary sortas="SimpleAsyncThreadFunc">GSimpleAsyncThreadFunc</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GSimpleAsyncThreadFunc<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *res</parameter>,
                           <parameter><link linkend="GObject"><type>GObject</type></link> *object</parameter>,
                           <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>);</programlisting>
<para>Simple thread function that runs an asynchronous operation and
checks for cancellation.</para>
<refsect3 id="GSimpleAsyncThreadFunc.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-new" role="function" condition="deprecated:2.46: Use g_task_new() instead.">
<title>g_simple_async_result_new&#160;()</title>
<indexterm zone="g-simple-async-result-new" role="deprecated"><primary sortas="simple_async_result_new">g_simple_async_result_new</primary></indexterm>
<programlisting language="C"><link linkend="GSimpleAsyncResult"><returnvalue>GSimpleAsyncResult</returnvalue></link>&#160;*
g_simple_async_result_new (<parameter><link linkend="GObject"><type>GObject</type></link> *source_object</parameter>,
                           <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                           <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                           <parameter><link linkend="gpointer"><type>gpointer</type></link> source_tag</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_new</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="g-task-new"><function>g_task_new()</function></link> instead.</para>
</warning>
<para>Creates a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para>
<para>The common convention is to create the <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> in the
function that starts the asynchronous operation and use that same
function as the <parameter>source_tag</parameter>
.</para>
<para>If your operation supports cancellation with <link linkend="GCancellable"><type>GCancellable</type></link> (which it
probably should) then you should provide the user's cancellable to
<link linkend="g-simple-async-result-set-check-cancellable"><function>g_simple_async_result_set_check_cancellable()</function></link> immediately after
this function returns.</para>
<refsect3 id="g-simple-async-result-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>source_object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>source_tag</para></entry>
<entry role="parameter_description"><para>the asynchronous function.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-new.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-new-error" role="function" condition="deprecated:2.46: Use g_task_new() and g_task_return_new_error() instead.">
<title>g_simple_async_result_new_error&#160;()</title>
<indexterm zone="g-simple-async-result-new-error" role="deprecated"><primary sortas="simple_async_result_new_error">g_simple_async_result_new_error</primary></indexterm>
<programlisting language="C"><link linkend="GSimpleAsyncResult"><returnvalue>GSimpleAsyncResult</returnvalue></link>&#160;*
g_simple_async_result_new_error (<parameter><link linkend="GObject"><type>GObject</type></link> *source_object</parameter>,
                                 <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                 <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                                 <parameter><link linkend="GQuark"><type>GQuark</type></link> domain</parameter>,
                                 <parameter><link linkend="gint"><type>gint</type></link> code</parameter>,
                                 <parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                 <parameter>...</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_new_error</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="g-task-new"><function>g_task_new()</function></link> and <link linkend="g-task-return-new-error"><function>g_task_return_new_error()</function></link> instead.</para>
</warning>
<para>Creates a new <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> with a set error.</para>
<refsect3 id="g-simple-async-result-new-error.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>source_object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>domain</para></entry>
<entry role="parameter_description"><para>a <link linkend="GQuark"><type>GQuark</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>code</para></entry>
<entry role="parameter_description"><para>an error code.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>format</para></entry>
<entry role="parameter_description"><para>a string with format characters.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>a list of values to insert into <parameter>format</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-new-error.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-new-from-error" role="function" condition="deprecated:2.46: Use g_task_new() and g_task_return_error() instead.">
<title>g_simple_async_result_new_from_error&#160;()</title>
<indexterm zone="g-simple-async-result-new-from-error" role="deprecated"><primary sortas="simple_async_result_new_from_error">g_simple_async_result_new_from_error</primary></indexterm>
<programlisting language="C"><link linkend="GSimpleAsyncResult"><returnvalue>GSimpleAsyncResult</returnvalue></link>&#160;*
g_simple_async_result_new_from_error (<parameter><link linkend="GObject"><type>GObject</type></link> *source_object</parameter>,
                                      <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                      <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                                      <parameter>const <link linkend="GError"><type>GError</type></link> *error</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_new_from_error</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="g-task-new"><function>g_task_new()</function></link> and <link linkend="g-task-return-error"><function>g_task_return_error()</function></link> instead.</para>
</warning>
<para>Creates a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> from an error condition.</para>
<refsect3 id="g-simple-async-result-new-from-error.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>source_object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-new-from-error.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-new-take-error" role="function" condition="deprecated:2.46: Use g_task_new() and g_task_return_error() instead.|since:2.28">
<title>g_simple_async_result_new_take_error&#160;()</title>
<indexterm zone="g-simple-async-result-new-take-error" role="deprecated"><primary sortas="simple_async_result_new_take_error">g_simple_async_result_new_take_error</primary></indexterm><indexterm zone="g-simple-async-result-new-take-error" role="2.28"><primary sortas="simple_async_result_new_take_error">g_simple_async_result_new_take_error</primary></indexterm>
<programlisting language="C"><link linkend="GSimpleAsyncResult"><returnvalue>GSimpleAsyncResult</returnvalue></link>&#160;*
g_simple_async_result_new_take_error (<parameter><link linkend="GObject"><type>GObject</type></link> *source_object</parameter>,
                                      <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                      <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                                      <parameter><link linkend="GError"><type>GError</type></link> *error</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_new_take_error</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="g-task-new"><function>g_task_new()</function></link> and <link linkend="g-task-return-error"><function>g_task_return_error()</function></link> instead.</para>
</warning>
<para>Creates a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> from an error condition, and takes over the
caller's ownership of <parameter>error</parameter>
, so the caller does not need to free it anymore.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-result-new-take-error.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>source_object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-new-take-error.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-simple-async-result-set-check-cancellable" role="function" condition="deprecated:2.46: Use #GTask instead.|since:2.32">
<title>g_simple_async_result_set_check_cancellable&#160;()</title>
<indexterm zone="g-simple-async-result-set-check-cancellable" role="deprecated"><primary sortas="simple_async_result_set_check_cancellable">g_simple_async_result_set_check_cancellable</primary></indexterm><indexterm zone="g-simple-async-result-set-check-cancellable" role="2.32"><primary sortas="simple_async_result_set_check_cancellable">g_simple_async_result_set_check_cancellable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_set_check_cancellable
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *check_cancellable</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_set_check_cancellable</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> instead.</para>
</warning>
<para>Sets a <link linkend="GCancellable"><type>GCancellable</type></link> to check before dispatching results.</para>
<para>This function has one very specific purpose: the provided cancellable
is checked at the time of <link linkend="g-simple-async-result-propagate-error"><function>g_simple_async_result_propagate_error()</function></link> If
it is cancelled, these functions will return an "Operation was
cancelled" error (<link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link>).</para>
<para>Implementors of cancellable asynchronous functions should use this in
order to provide a guarantee to their callers that cancelling an
async operation will reliably result in an error being returned for
that operation (even if a positive result for the operation has
already been sent as an idle to the main context to be dispatched).</para>
<para>The checking described above is done regardless of any call to the
unrelated <link linkend="g-simple-async-result-set-handle-cancellation"><function>g_simple_async_result_set_handle_cancellation()</function></link> function.</para>
<refsect3 id="g-simple-async-result-set-check-cancellable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>check_cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link> to check, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to unset. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-simple-async-result-set-op-res-gpointer" role="function" condition="deprecated:2.46: Use #GTask and g_task_return_pointer() instead.">
<title>g_simple_async_result_set_op_res_gpointer&#160;()</title>
<indexterm zone="g-simple-async-result-set-op-res-gpointer" role="deprecated"><primary sortas="simple_async_result_set_op_res_gpointer">g_simple_async_result_set_op_res_gpointer</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_set_op_res_gpointer
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                <parameter><link linkend="gpointer"><type>gpointer</type></link> op_res</parameter>,
                                <parameter><link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> destroy_op_res</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_set_op_res_gpointer</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-return-pointer"><function>g_task_return_pointer()</function></link> instead.</para>
</warning>
<para>Sets the operation result within the asynchronous result to a pointer.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-result-set-op-res-gpointer.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>op_res</para></entry>
<entry role="parameter_description"><para>a pointer result from an asynchronous function.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destroy_op_res</para></entry>
<entry role="parameter_description"><para>a <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-get-op-res-gpointer" role="function" condition="deprecated:2.46: Use #GTask and g_task_propagate_pointer() instead.">
<title>g_simple_async_result_get_op_res_gpointer&#160;()</title>
<indexterm zone="g-simple-async-result-get-op-res-gpointer" role="deprecated"><primary sortas="simple_async_result_get_op_res_gpointer">g_simple_async_result_get_op_res_gpointer</primary></indexterm>
<programlisting language="C"><link linkend="gpointer"><returnvalue>gpointer</returnvalue></link>
g_simple_async_result_get_op_res_gpointer
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_get_op_res_gpointer</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-propagate-pointer"><function>g_task_propagate_pointer()</function></link> instead.</para>
</warning>
<para>Gets a pointer result as returned by the asynchronous function.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-result-get-op-res-gpointer.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-get-op-res-gpointer.returns" role="returns">
<title>Returns</title>
<para> a pointer from the result.</para>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-set-op-res-gssize" role="function" condition="deprecated:2.46: Use #GTask and g_task_return_int() instead.">
<title>g_simple_async_result_set_op_res_gssize&#160;()</title>
<indexterm zone="g-simple-async-result-set-op-res-gssize" role="deprecated"><primary sortas="simple_async_result_set_op_res_gssize">g_simple_async_result_set_op_res_gssize</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_set_op_res_gssize
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                <parameter><link linkend="gssize"><type>gssize</type></link> op_res</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_set_op_res_gssize</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-return-int"><function>g_task_return_int()</function></link> instead.</para>
</warning>
<para>Sets the operation result within the asynchronous result to
the given <parameter>op_res</parameter>
.</para>
<refsect3 id="g-simple-async-result-set-op-res-gssize.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>op_res</para></entry>
<entry role="parameter_description"><para>a <link linkend="gssize"><type>gssize</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-get-op-res-gssize" role="function" condition="deprecated:2.46: Use #GTask and g_task_propagate_int() instead.">
<title>g_simple_async_result_get_op_res_gssize&#160;()</title>
<indexterm zone="g-simple-async-result-get-op-res-gssize" role="deprecated"><primary sortas="simple_async_result_get_op_res_gssize">g_simple_async_result_get_op_res_gssize</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_simple_async_result_get_op_res_gssize
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_get_op_res_gssize</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-propagate-int"><function>g_task_propagate_int()</function></link> instead.</para>
</warning>
<para>Gets a gssize from the asynchronous result.</para>
<refsect3 id="g-simple-async-result-get-op-res-gssize.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-get-op-res-gssize.returns" role="returns">
<title>Returns</title>
<para> a gssize returned from the asynchronous function.</para>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-set-op-res-gboolean" role="function" condition="deprecated:2.46: Use #GTask and g_task_return_boolean() instead.">
<title>g_simple_async_result_set_op_res_gboolean&#160;()</title>
<indexterm zone="g-simple-async-result-set-op-res-gboolean" role="deprecated"><primary sortas="simple_async_result_set_op_res_gboolean">g_simple_async_result_set_op_res_gboolean</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_set_op_res_gboolean
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                <parameter><link linkend="gboolean"><type>gboolean</type></link> op_res</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_set_op_res_gboolean</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-return-boolean"><function>g_task_return_boolean()</function></link> instead.</para>
</warning>
<para>Sets the operation result to a boolean within the asynchronous result.</para>
<refsect3 id="g-simple-async-result-set-op-res-gboolean.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>op_res</para></entry>
<entry role="parameter_description"><para>a <link linkend="gboolean"><type>gboolean</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-get-op-res-gboolean" role="function" condition="deprecated:2.46: Use #GTask and g_task_propagate_boolean() instead.">
<title>g_simple_async_result_get_op_res_gboolean&#160;()</title>
<indexterm zone="g-simple-async-result-get-op-res-gboolean" role="deprecated"><primary sortas="simple_async_result_get_op_res_gboolean">g_simple_async_result_get_op_res_gboolean</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_simple_async_result_get_op_res_gboolean
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_get_op_res_gboolean</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-propagate-boolean"><function>g_task_propagate_boolean()</function></link> instead.</para>
</warning>
<para>Gets the operation result boolean from within the asynchronous result.</para>
<refsect3 id="g-simple-async-result-get-op-res-gboolean.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-get-op-res-gboolean.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the operation's result was <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>
if the operation's result was <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-get-source-tag" role="function" condition="deprecated:2.46. Use #GTask and g_task_get_source_tag() instead.">
<title>g_simple_async_result_get_source_tag&#160;()</title>
<indexterm zone="g-simple-async-result-get-source-tag" role="deprecated"><primary sortas="simple_async_result_get_source_tag">g_simple_async_result_get_source_tag</primary></indexterm>
<programlisting language="C"><link linkend="gpointer"><returnvalue>gpointer</returnvalue></link>
g_simple_async_result_get_source_tag (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_get_source_tag</literal> has been deprecated since version 2.46. and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-get-source-tag"><function>g_task_get_source_tag()</function></link> instead.</para>
</warning>
<para>Gets the source tag for the <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-result-get-source-tag.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-get-source-tag.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="gpointer"><type>gpointer</type></link> to the source object for the <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-is-valid" role="function" condition="deprecated:2.46: Use #GTask and g_task_is_valid() instead.|since:2.20">
<title>g_simple_async_result_is_valid&#160;()</title>
<indexterm zone="g-simple-async-result-is-valid" role="deprecated"><primary sortas="simple_async_result_is_valid">g_simple_async_result_is_valid</primary></indexterm><indexterm zone="g-simple-async-result-is-valid" role="2.20"><primary sortas="simple_async_result_is_valid">g_simple_async_result_is_valid</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_simple_async_result_is_valid (<parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                <parameter><link linkend="GObject"><type>GObject</type></link> *source</parameter>,
                                <parameter><link linkend="gpointer"><type>gpointer</type></link> source_tag</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_is_valid</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-is-valid"><function>g_task_is_valid()</function></link> instead.</para>
</warning>
<para>Ensures that the data passed to the _finish function of an async
operation is consistent.  Three checks are performed.</para>
<para>First, <parameter>result</parameter>
 is checked to ensure that it is really a
<link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.  Second, <parameter>source</parameter>
 is checked to ensure that it
matches the source object of <parameter>result</parameter>
.  Third, <parameter>source_tag</parameter>
 is
checked to ensure that it is equal to the <parameter>source_tag</parameter>
 argument given
to <link linkend="g-simple-async-result-new"><function>g_simple_async_result_new()</function></link> (which, by convention, is a pointer
to the _async function corresponding to the _finish function from
which this function is called).  (Alternatively, if either
<parameter>source_tag</parameter>
 or <parameter>result</parameter>
's source tag is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then the source tag
check is skipped.)</para>
<refsect3 id="g-simple-async-result-is-valid.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>the <link linkend="GAsyncResult"><type>GAsyncResult</type></link> passed to the _finish function.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>source</para></entry>
<entry role="parameter_description"><para>the <link linkend="GObject"><type>GObject</type></link> passed to the _finish function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>source_tag</para></entry>
<entry role="parameter_description"><para>the asynchronous function. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-is-valid.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><type>TRUE</type></link> if all checks passed or <link linkend="FALSE:CAPS"><type>FALSE</type></link> if any failed.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.20">2.20</link></para></refsect2>
<refsect2 id="g-simple-async-result-set-handle-cancellation" role="function" condition="deprecated:2.46">
<title>g_simple_async_result_set_handle_cancellation&#160;()</title>
<indexterm zone="g-simple-async-result-set-handle-cancellation" role="deprecated"><primary sortas="simple_async_result_set_handle_cancellation">g_simple_async_result_set_handle_cancellation</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_set_handle_cancellation
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                <parameter><link linkend="gboolean"><type>gboolean</type></link> handle_cancellation</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_set_handle_cancellation</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para></warning>
<para>Sets whether to handle cancellation within the asynchronous operation.</para>
<para>This function has nothing to do with
<link linkend="g-simple-async-result-set-check-cancellable"><function>g_simple_async_result_set_check_cancellable()</function></link>.  It only refers to the
<link linkend="GCancellable"><type>GCancellable</type></link> passed to <link linkend="g-simple-async-result-run-in-thread"><function>g_simple_async_result_run_in_thread()</function></link>.</para>
<refsect3 id="g-simple-async-result-set-handle-cancellation.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>handle_cancellation</para></entry>
<entry role="parameter_description"><para>a <link linkend="gboolean"><type>gboolean</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-complete" role="function" condition="deprecated:2.46: Use #GTask instead.">
<title>g_simple_async_result_complete&#160;()</title>
<indexterm zone="g-simple-async-result-complete" role="deprecated"><primary sortas="simple_async_result_complete">g_simple_async_result_complete</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_complete (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_complete</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> instead.</para>
</warning>
<para>Completes an asynchronous I/O job immediately. Must be called in
the thread where the asynchronous result was to be delivered, as it
invokes the callback directly. If you are in a different thread use
<link linkend="g-simple-async-result-complete-in-idle"><function>g_simple_async_result_complete_in_idle()</function></link>.</para>
<para>Calling this function takes a reference to <parameter>simple</parameter>
 for as long as
is needed to complete the call.</para>
<refsect3 id="g-simple-async-result-complete.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-complete-in-idle" role="function" condition="deprecated:2.46: Use #GTask instead.">
<title>g_simple_async_result_complete_in_idle&#160;()</title>
<indexterm zone="g-simple-async-result-complete-in-idle" role="deprecated"><primary sortas="simple_async_result_complete_in_idle">g_simple_async_result_complete_in_idle</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_complete_in_idle
                               (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_complete_in_idle</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> instead.</para>
</warning>
<para>Completes an asynchronous function in an idle handler in the
<link linkend="g-main-context-push-thread-default">thread-default main context</link>
of the thread that <parameter>simple</parameter>
 was initially created in
(and re-pushes that context around the invocation of the callback).</para>
<para>Calling this function takes a reference to <parameter>simple</parameter>
 for as long as
is needed to complete the call.</para>
<refsect3 id="g-simple-async-result-complete-in-idle.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-run-in-thread" role="function" condition="deprecated:2.46: Use #GTask and g_task_run_in_thread() instead.">
<title>g_simple_async_result_run_in_thread&#160;()</title>
<indexterm zone="g-simple-async-result-run-in-thread" role="deprecated"><primary sortas="simple_async_result_run_in_thread">g_simple_async_result_run_in_thread</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_run_in_thread (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                     <parameter><link linkend="GSimpleAsyncThreadFunc"><type>GSimpleAsyncThreadFunc</type></link> func</parameter>,
                                     <parameter><link linkend="int"><type>int</type></link> io_priority</parameter>,
                                     <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_run_in_thread</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-run-in-thread"><function>g_task_run_in_thread()</function></link> instead.</para>
</warning>
<para>Runs the asynchronous job in a separate thread and then calls
<link linkend="g-simple-async-result-complete-in-idle"><function>g_simple_async_result_complete_in_idle()</function></link> on <parameter>simple</parameter>
 to return
the result to the appropriate main loop.</para>
<para>Calling this function takes a reference to <parameter>simple</parameter>
 for as long as
is needed to run the job and report its completion.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-result-run-in-thread.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>func</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncThreadFunc"><type>GSimpleAsyncThreadFunc</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>io_priority</para></entry>
<entry role="parameter_description"><para>the io priority of the request.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-set-from-error" role="function" condition="deprecated:2.46: Use #GTask and g_task_return_error() instead.">
<title>g_simple_async_result_set_from_error&#160;()</title>
<indexterm zone="g-simple-async-result-set-from-error" role="deprecated"><primary sortas="simple_async_result_set_from_error">g_simple_async_result_set_from_error</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_set_from_error (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                      <parameter>const <link linkend="GError"><type>GError</type></link> *error</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_set_from_error</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-return-error"><function>g_task_return_error()</function></link> instead.</para>
</warning>
<para>Sets the result from a <link linkend="GError"><type>GError</type></link>.</para>
<refsect3 id="g-simple-async-result-set-from-error.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-take-error" role="function" condition="deprecated:2.46: Use #GTask and g_task_return_error() instead.|since:2.28">
<title>g_simple_async_result_take_error&#160;()</title>
<indexterm zone="g-simple-async-result-take-error" role="deprecated"><primary sortas="simple_async_result_take_error">g_simple_async_result_take_error</primary></indexterm><indexterm zone="g-simple-async-result-take-error" role="2.28"><primary sortas="simple_async_result_take_error">g_simple_async_result_take_error</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_take_error (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                  <parameter><link linkend="GError"><type>GError</type></link> *error</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_take_error</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-return-error"><function>g_task_return_error()</function></link> instead.</para>
</warning>
<para>Sets the result from <parameter>error</parameter>
, and takes over the caller's ownership
of <parameter>error</parameter>
, so the caller does not need to free it any more.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-result-take-error.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-simple-async-result-propagate-error" role="function" condition="deprecated:2.46: Use #GTask instead.">
<title>g_simple_async_result_propagate_error&#160;()</title>
<indexterm zone="g-simple-async-result-propagate-error" role="deprecated"><primary sortas="simple_async_result_propagate_error">g_simple_async_result_propagate_error</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_simple_async_result_propagate_error (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                       <parameter><link linkend="GError"><type>GError</type></link> **dest</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_propagate_error</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> instead.</para>
</warning>
<para>Propagates an error from within the simple asynchronous result to
a given destination.</para>
<para>If the <link linkend="GCancellable"><type>GCancellable</type></link> given to a prior call to
<link linkend="g-simple-async-result-set-check-cancellable"><function>g_simple_async_result_set_check_cancellable()</function></link> is cancelled then this
function will return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> with <parameter>dest</parameter>
 set appropriately.</para>
<refsect3 id="g-simple-async-result-propagate-error.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>dest</para></entry>
<entry role="parameter_description"><para>a location to propagate the error to. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-simple-async-result-propagate-error.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the error was propagated to <parameter>dest</parameter>
. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-set-error" role="function" condition="deprecated:2.46: Use #GTask and g_task_return_new_error() instead.">
<title>g_simple_async_result_set_error&#160;()</title>
<indexterm zone="g-simple-async-result-set-error" role="deprecated"><primary sortas="simple_async_result_set_error">g_simple_async_result_set_error</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_set_error (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                 <parameter><link linkend="GQuark"><type>GQuark</type></link> domain</parameter>,
                                 <parameter><link linkend="gint"><type>gint</type></link> code</parameter>,
                                 <parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                 <parameter>...</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_set_error</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-return-new-error"><function>g_task_return_new_error()</function></link> instead.</para>
</warning>
<para>Sets an error within the asynchronous result without a <link linkend="GError"><type>GError</type></link>.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-result-set-error.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>domain</para></entry>
<entry role="parameter_description"><para>a <link linkend="GQuark"><type>GQuark</type></link> (usually <link linkend="G-IO-ERROR:CAPS"><type>G_IO_ERROR</type></link>).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>code</para></entry>
<entry role="parameter_description"><para>an error code.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>format</para></entry>
<entry role="parameter_description"><para>a formatted error reporting string.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>a list of variables to fill in <parameter>format</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-result-set-error-va" role="function" condition="deprecated:2.46: Use #GTask and g_task_return_error() instead.">
<title>g_simple_async_result_set_error_va&#160;()</title>
<indexterm zone="g-simple-async-result-set-error-va" role="deprecated"><primary sortas="simple_async_result_set_error_va">g_simple_async_result_set_error_va</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_result_set_error_va (<parameter><link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link> *simple</parameter>,
                                    <parameter><link linkend="GQuark"><type>GQuark</type></link> domain</parameter>,
                                    <parameter><link linkend="gint"><type>gint</type></link> code</parameter>,
                                    <parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                    <parameter><link linkend="va-list"><type>va_list</type></link> args</parameter>);</programlisting>
<warning><para><literal>g_simple_async_result_set_error_va</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="GTask"><type>GTask</type></link> and <link linkend="g-task-return-error"><function>g_task_return_error()</function></link> instead.</para>
</warning>
<para>Sets an error within the asynchronous result without a <link linkend="GError"><type>GError</type></link>.
Unless writing a binding, see <link linkend="g-simple-async-result-set-error"><function>g_simple_async_result_set_error()</function></link>.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-result-set-error-va.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>simple</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSimpleAsyncResult"><type>GSimpleAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>domain</para></entry>
<entry role="parameter_description"><para>a <link linkend="GQuark"><type>GQuark</type></link> (usually <link linkend="G-IO-ERROR:CAPS"><type>G_IO_ERROR</type></link>).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>code</para></entry>
<entry role="parameter_description"><para>an error code.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>format</para></entry>
<entry role="parameter_description"><para>a formatted error reporting string.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>args</para></entry>
<entry role="parameter_description"><para>va_list of arguments.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-report-error-in-idle" role="function" condition="deprecated:2.46: Use g_task_report_error().">
<title>g_simple_async_report_error_in_idle&#160;()</title>
<indexterm zone="g-simple-async-report-error-in-idle" role="deprecated"><primary sortas="simple_async_report_error_in_idle">g_simple_async_report_error_in_idle</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_report_error_in_idle (<parameter><link linkend="GObject"><type>GObject</type></link> *object</parameter>,
                                     <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                     <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                                     <parameter><link linkend="GQuark"><type>GQuark</type></link> domain</parameter>,
                                     <parameter><link linkend="gint"><type>gint</type></link> code</parameter>,
                                     <parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                     <parameter>...</parameter>);</programlisting>
<warning><para><literal>g_simple_async_report_error_in_idle</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="g-task-report-error"><function>g_task_report_error()</function></link>.</para>
</warning>
<para>Reports an error in an asynchronous function in an idle function by
directly setting the contents of the <link linkend="GAsyncResult"><type>GAsyncResult</type></link> with the given error
information.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-report-error-in-idle.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>domain</para></entry>
<entry role="parameter_description"><para>a <link linkend="GQuark"><type>GQuark</type></link> containing the error domain (usually <link linkend="G-IO-ERROR:CAPS"><type>G_IO_ERROR</type></link>).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>code</para></entry>
<entry role="parameter_description"><para>a specific error code.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>format</para></entry>
<entry role="parameter_description"><para>a formatted error reporting string.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>a list of variables to fill in <parameter>format</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-report-gerror-in-idle" role="function" condition="deprecated:2.46: Use g_task_report_error().">
<title>g_simple_async_report_gerror_in_idle&#160;()</title>
<indexterm zone="g-simple-async-report-gerror-in-idle" role="deprecated"><primary sortas="simple_async_report_gerror_in_idle">g_simple_async_report_gerror_in_idle</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_report_gerror_in_idle (<parameter><link linkend="GObject"><type>GObject</type></link> *object</parameter>,
                                      <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                      <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                                      <parameter>const <link linkend="GError"><type>GError</type></link> *error</parameter>);</programlisting>
<warning><para><literal>g_simple_async_report_gerror_in_idle</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="g-task-report-error"><function>g_task_report_error()</function></link>.</para>
</warning>
<para>Reports an error in an idle function. Similar to
<link linkend="g-simple-async-report-error-in-idle"><function>g_simple_async_report_error_in_idle()</function></link>, but takes a <link linkend="GError"><type>GError</type></link> rather
than building a new one.</para>
<refsect3 id="g-simple-async-report-gerror-in-idle.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope async</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>the <link linkend="GError"><type>GError</type></link> to report</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-simple-async-report-take-gerror-in-idle" role="function" condition="deprecated:2.46: Use g_task_report_error().|since:2.28">
<title>g_simple_async_report_take_gerror_in_idle&#160;()</title>
<indexterm zone="g-simple-async-report-take-gerror-in-idle" role="deprecated"><primary sortas="simple_async_report_take_gerror_in_idle">g_simple_async_report_take_gerror_in_idle</primary></indexterm><indexterm zone="g-simple-async-report-take-gerror-in-idle" role="2.28"><primary sortas="simple_async_report_take_gerror_in_idle">g_simple_async_report_take_gerror_in_idle</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_simple_async_report_take_gerror_in_idle
                               (<parameter><link linkend="GObject"><type>GObject</type></link> *object</parameter>,
                                <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> *error</parameter>);</programlisting>
<warning><para><literal>g_simple_async_report_take_gerror_in_idle</literal> has been deprecated since version 2.46 and should not be used in newly-written code.</para> <para>Use <link linkend="g-task-report-error"><function>g_task_report_error()</function></link>.</para>
</warning>
<para>Reports an error in an idle function. Similar to
<link linkend="g-simple-async-report-gerror-in-idle"><function>g_simple_async_report_gerror_in_idle()</function></link>, but takes over the caller's
ownership of <parameter>error</parameter>
, so the caller does not have to free it any more.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-simple-async-report-take-gerror-in-idle.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>the <link linkend="GError"><type>GError</type></link> to report</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>

</refsect1>
<refsect1 id="GSimpleAsyncResult.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GSimpleAsyncResult-struct" role="struct">
<title>GSimpleAsyncResult</title>
<indexterm zone="GSimpleAsyncResult-struct"><primary sortas="SimpleAsyncResult">GSimpleAsyncResult</primary></indexterm>
<programlisting language="C">typedef struct _GSimpleAsyncResult GSimpleAsyncResult;</programlisting>
<para>A simple implementation of <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para>
</refsect2>

</refsect1>
<refsect1 id="GSimpleAsyncResult.see-also">
<title>See Also</title>
<para><link linkend="GAsyncResult"><type>GAsyncResult</type></link>, <link linkend="GTask"><type>GTask</type></link></para>

</refsect1>

</refentry>
