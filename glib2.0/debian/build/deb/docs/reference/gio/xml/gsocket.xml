<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GSocket">
<refmeta>
<refentrytitle role="top_of_page" id="GSocket.top_of_page">GSocket</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GSocket</refname>
<refpurpose>Low-level socket object</refpurpose>
</refnamediv>

<refsect1 id="GSocket.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GSocketSourceFunc">*GSocketSourceFunc</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocket"><returnvalue>GSocket</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-socket-new">g_socket_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocket"><returnvalue>GSocket</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-socket-new-from-fd">g_socket_new_from_fd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-bind">g_socket_bind</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-listen">g_socket_listen</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocket"><returnvalue>GSocket</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-socket-accept">g_socket_accept</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-connect">g_socket_connect</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-check-connect-result">g_socket_check_connect_result</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-receive">g_socket_receive</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-receive-from">g_socket_receive_from</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-receive-message">g_socket_receive_message</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gint"><returnvalue>gint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-receive-messages">g_socket_receive_messages</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-receive-with-blocking">g_socket_receive_with_blocking</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-send">g_socket_send</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-send-to">g_socket_send_to</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-send-message">g_socket_send_message</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gint"><returnvalue>gint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-send-messages">g_socket_send_messages</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-send-with-blocking">g_socket_send_with_blocking</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-close">g_socket_close</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-is-closed">g_socket_is_closed</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-shutdown">g_socket_shutdown</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-is-connected">g_socket_is_connected</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSource"><returnvalue>GSource</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-socket-create-source">g_socket_create_source</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GIOCondition"><returnvalue>GIOCondition</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-condition-check">g_socket_condition_check</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-condition-wait">g_socket_condition_wait</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-condition-timed-wait">g_socket_condition_timed_wait</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-available-bytes">g_socket_get_available_bytes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-listen-backlog">g_socket_set_listen_backlog</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gint"><returnvalue>gint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-listen-backlog">g_socket_get_listen_backlog</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-blocking">g_socket_get_blocking</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-blocking">g_socket_set_blocking</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-keepalive">g_socket_get_keepalive</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-keepalive">g_socket_set_keepalive</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint"><returnvalue>guint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-timeout">g_socket_get_timeout</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-timeout">g_socket_set_timeout</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-ttl">g_socket_set_ttl</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint"><returnvalue>guint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-ttl">g_socket_get_ttl</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-broadcast">g_socket_get_broadcast</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-broadcast">g_socket_set_broadcast</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-option">g_socket_get_option</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-option">g_socket_set_option</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocketFamily"><returnvalue>GSocketFamily</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-family">g_socket_get_family</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-fd">g_socket_get_fd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-socket-get-local-address">g_socket_get_local_address</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocketProtocol"><returnvalue>GSocketProtocol</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-protocol">g_socket_get_protocol</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-socket-get-remote-address">g_socket_get_remote_address</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSocketType"><returnvalue>GSocketType</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-socket-type">g_socket_get_socket_type</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-speaks-ipv4">g_socket_speaks_ipv4</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GCredentials"><returnvalue>GCredentials</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-socket-get-credentials">g_socket_get_credentials</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-join-multicast-group">g_socket_join_multicast_group</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-leave-multicast-group">g_socket_leave_multicast_group</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-join-multicast-group-ssm">g_socket_join_multicast_group_ssm</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-leave-multicast-group-ssm">g_socket_leave_multicast_group_ssm</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-multicast-loopback">g_socket_get_multicast_loopback</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-multicast-loopback">g_socket_set_multicast_loopback</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint"><returnvalue>guint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-get-multicast-ttl">g_socket_get_multicast_ttl</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-socket-set-multicast-ttl">g_socket_set_multicast_ttl</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSocket.properties" role="properties">
<title role="properties.title">Properties</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="properties_type" colwidth="150px"/>
<colspec colname="properties_name" colwidth="300px"/>
<colspec colname="properties_flags" colwidth="200px"/>
<tbody>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GSocket--blocking">blocking</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GSocket--broadcast">broadcast</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="GSocketFamily"><type>GSocketFamily</type></link></entry><entry role="property_name"><link linkend="GSocket--family">family</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gint"><type>gint</type></link></entry><entry role="property_name"><link linkend="GSocket--fd">fd</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GSocket--keepalive">keepalive</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="gint"><type>gint</type></link></entry><entry role="property_name"><link linkend="GSocket--listen-backlog">listen-backlog</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="GSocketAddress"><type>GSocketAddress</type></link>&#160;*</entry><entry role="property_name"><link linkend="GSocket--local-address">local-address</link></entry><entry role="property_flags">Read</entry></row>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GSocket--multicast-loopback">multicast-loopback</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="guint"><type>guint</type></link></entry><entry role="property_name"><link linkend="GSocket--multicast-ttl">multicast-ttl</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="GSocketProtocol"><type>GSocketProtocol</type></link></entry><entry role="property_name"><link linkend="GSocket--protocol">protocol</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="GSocketAddress"><type>GSocketAddress</type></link>&#160;*</entry><entry role="property_name"><link linkend="GSocket--remote-address">remote-address</link></entry><entry role="property_flags">Read</entry></row>
<row><entry role="property_type"><link linkend="guint"><type>guint</type></link></entry><entry role="property_name"><link linkend="GSocket--timeout">timeout</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="guint"><type>guint</type></link></entry><entry role="property_name"><link linkend="GSocket--ttl">ttl</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="GSocketType"><type>GSocketType</type></link></entry><entry role="property_name"><link linkend="GSocket--type">type</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSocket.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GSocket-struct">GSocket</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GSocketType">GSocketType</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GSocketProtocol">GSocketProtocol</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GSocketMsgFlags">GSocketMsgFlags</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GInputVector">GInputVector</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GInputMessage">GInputMessage</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GOutputVector">GOutputVector</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GOutputMessage">GOutputMessage</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSocket.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GEnum">GEnum</link>
    <phrase role="lineart">&#9500;&#9472;&#9472;</phrase> GSocketProtocol
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GSocketType
    <link linkend="GFlags">GFlags</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GSocketMsgFlags
    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GSocket
</screen>
</refsect1>
<refsect1 id="GSocket.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GSocket implements
 <link linkend="GInitable">GInitable</link> and  <link linkend="GDatagramBased">GDatagramBased</link>.</para>

</refsect1>

<refsect1 id="GSocket.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GSocket.description" role="desc">
<title role="desc.title">Description</title>
<para>A <link linkend="GSocket"><type>GSocket</type></link> is a low-level networking primitive. It is a more or less
direct mapping of the BSD socket API in a portable GObject based API.
It supports both the UNIX socket implementations and winsock2 on Windows.</para>
<para><link linkend="GSocket"><type>GSocket</type></link> is the platform independent base upon which the higher level
network primitives are based. Applications are not typically meant to
use it directly, but rather through classes like <link linkend="GSocketClient"><type>GSocketClient</type></link>,
<link linkend="GSocketService"><type>GSocketService</type></link> and <link linkend="GSocketConnection"><type>GSocketConnection</type></link>. However there may be cases where
direct use of <link linkend="GSocket"><type>GSocket</type></link> is useful.</para>
<para><link linkend="GSocket"><type>GSocket</type></link> implements the <link linkend="GInitable"><type>GInitable</type></link> interface, so if it is manually constructed
by e.g. <link linkend="g-object-new"><function>g_object_new()</function></link> you must call <link linkend="g-initable-init"><function>g_initable_init()</function></link> and check the
results before using the object. This is done automatically in
<link linkend="g-socket-new"><function>g_socket_new()</function></link> and <link linkend="g-socket-new-from-fd"><function>g_socket_new_from_fd()</function></link>, so these functions can return
<link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>Sockets operate in two general modes, blocking or non-blocking. When
in blocking mode all operations (which don’t take an explicit blocking
parameter) block until the requested operation
is finished or there is an error. In non-blocking mode all calls that
would block return immediately with a <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> error.
To know when a call would successfully run you can call <link linkend="g-socket-condition-check"><function>g_socket_condition_check()</function></link>,
or <link linkend="g-socket-condition-wait"><function>g_socket_condition_wait()</function></link>. You can also use <link linkend="g-socket-create-source"><function>g_socket_create_source()</function></link> and
attach it to a <link linkend="GMainContext"><type>GMainContext</type></link> to get callbacks when I/O is possible.
Note that all sockets are always set to non blocking mode in the system, and
blocking mode is emulated in GSocket.</para>
<para>When working in non-blocking mode applications should always be able to
handle getting a <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> error even when some other
function said that I/O was possible. This can easily happen in case
of a race condition in the application, but it can also happen for other
reasons. For instance, on Windows a socket is always seen as writable
until a write returns <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link>.</para>
<para><link linkend="GSockets"><type>GSockets</type></link> can be either connection oriented or datagram based.
For connection oriented types you must first establish a connection by
either connecting to an address or accepting a connection from another
address. For connectionless socket types the target/source address is
specified or received in each I/O operation.</para>
<para>All socket file descriptors are set to be close-on-exec.</para>
<para>Note that creating a <link linkend="GSocket"><type>GSocket</type></link> causes the signal <link linkend="SIGPIPE:CAPS"><literal>SIGPIPE</literal></link> to be
ignored for the remainder of the program. If you are writing a
command-line utility that uses <link linkend="GSocket"><type>GSocket</type></link>, you may need to take into
account the fact that your program will not automatically be killed
if it tries to write to <link linkend="stdout"><literal>stdout</literal></link> after it has been closed.</para>
<para>Like most other APIs in GLib, <link linkend="GSocket"><type>GSocket</type></link> is not inherently thread safe. To use
a <link linkend="GSocket"><type>GSocket</type></link> concurrently from multiple threads, you must implement your own
locking.</para>

</refsect1>
<refsect1 id="GSocket.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="GSocketSourceFunc" role="function" condition="since:2.22">
<title>GSocketSourceFunc&#160;()</title>
<indexterm zone="GSocketSourceFunc" role="2.22"><primary sortas="SocketSourceFunc">GSocketSourceFunc</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GSocketSourceFunc<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                      <parameter><link linkend="GIOCondition"><type>GIOCondition</type></link> condition</parameter>,
                      <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>This is the function type of the callback used for the <link linkend="GSource"><type>GSource</type></link>
returned by <link linkend="g-socket-create-source"><function>g_socket_create_source()</function></link>.</para>
<refsect3 id="GSocketSourceFunc.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>the <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>condition</para></entry>
<entry role="parameter_description"><para>the current condition at the source fired.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>data passed in by the user.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="GSocketSourceFunc.returns" role="returns">
<title>Returns</title>
<para> it should return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the source should be removed.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-new" role="function" condition="since:2.22">
<title>g_socket_new&#160;()</title>
<indexterm zone="g-socket-new" role="2.22"><primary sortas="socket_new">g_socket_new</primary></indexterm>
<programlisting language="C"><link linkend="GSocket"><returnvalue>GSocket</returnvalue></link>&#160;*
g_socket_new (<parameter><link linkend="GSocketFamily"><type>GSocketFamily</type></link> family</parameter>,
              <parameter><link linkend="GSocketType"><type>GSocketType</type></link> type</parameter>,
              <parameter><link linkend="GSocketProtocol"><type>GSocketProtocol</type></link> protocol</parameter>,
              <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a new <link linkend="GSocket"><type>GSocket</type></link> with the defined family, type and protocol.
If <parameter>protocol</parameter>
 is 0 (<link linkend="G-SOCKET-PROTOCOL-DEFAULT:CAPS"><literal>G_SOCKET_PROTOCOL_DEFAULT</literal></link>) the default protocol type
for the family and type is used.</para>
<para>The <parameter>protocol</parameter>
 is a family and type specific int that specifies what
kind of protocol to use. <link linkend="GSocketProtocol"><type>GSocketProtocol</type></link> lists several common ones.
Many families only support one protocol, and use 0 for this, others
support several and using 0 means to use the default protocol for
the family and type.</para>
<para>The protocol id is passed directly to the operating
system, so you can use protocols not listed in <link linkend="GSocketProtocol"><type>GSocketProtocol</type></link> if you
know the protocol number used for it.</para>
<refsect3 id="g-socket-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>family</para></entry>
<entry role="parameter_description"><para>the socket family to use, e.g. <link linkend="G-SOCKET-FAMILY-IPV4:CAPS"><literal>G_SOCKET_FAMILY_IPV4</literal></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>the socket type to use.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>protocol</para></entry>
<entry role="parameter_description"><para>the id of the protocol to use, or 0 for default.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-new.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GSocket"><type>GSocket</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-new-from-fd" role="function" condition="since:2.22">
<title>g_socket_new_from_fd&#160;()</title>
<indexterm zone="g-socket-new-from-fd" role="2.22"><primary sortas="socket_new_from_fd">g_socket_new_from_fd</primary></indexterm>
<programlisting language="C"><link linkend="GSocket"><returnvalue>GSocket</returnvalue></link>&#160;*
g_socket_new_from_fd (<parameter><link linkend="gint"><type>gint</type></link> fd</parameter>,
                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Creates a new <link linkend="GSocket"><type>GSocket</type></link> from a native file descriptor
or winsock SOCKET handle.</para>
<para>This reads all the settings from the file descriptor so that
all properties should work. Note that the file descriptor
will be set to non-blocking mode, independent on the blocking
mode of the <link linkend="GSocket"><type>GSocket</type></link>.</para>
<para>On success, the returned <link linkend="GSocket"><type>GSocket</type></link> takes ownership of <parameter>fd</parameter>
. On failure, the
caller must close <parameter>fd</parameter>
 themselves.</para>
<para>Since GLib 2.46, it is no longer a fatal error to call this on a non-socket
descriptor.  Instead, a GError will be set with code <link linkend="G-IO-ERROR-FAILED:CAPS"><literal>G_IO_ERROR_FAILED</literal></link></para>
<refsect3 id="g-socket-new-from-fd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>fd</para></entry>
<entry role="parameter_description"><para>a native socket file descriptor.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-new-from-fd.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GSocket"><type>GSocket</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-bind" role="function" condition="since:2.22">
<title>g_socket_bind&#160;()</title>
<indexterm zone="g-socket-bind" role="2.22"><primary sortas="socket_bind">g_socket_bind</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_bind (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
               <parameter><link linkend="GSocketAddress"><type>GSocketAddress</type></link> *address</parameter>,
               <parameter><link linkend="gboolean"><type>gboolean</type></link> allow_reuse</parameter>,
               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>When a socket is created it is attached to an address family, but it
doesn't have an address in this family. <link linkend="g-socket-bind"><function>g_socket_bind()</function></link> assigns the
address (sometimes called name) of the socket.</para>
<para>It is generally required to bind to a local address before you can
receive connections. (See <link linkend="g-socket-listen"><function>g_socket_listen()</function></link> and <link linkend="g-socket-accept"><function>g_socket_accept()</function></link> ).
In certain situations, you may also want to bind a socket that will be
used to initiate connections, though this is not normally required.</para>
<para>If <parameter>socket</parameter>
 is a TCP socket, then <parameter>allow_reuse</parameter>
 controls the setting
of the <literal>SO_REUSEADDR</literal> socket option; normally it should be <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> for
server sockets (sockets that you will eventually call
<link linkend="g-socket-accept"><function>g_socket_accept()</function></link> on), and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> for client sockets. (Failing to
set this flag on a server socket may cause <link linkend="g-socket-bind"><function>g_socket_bind()</function></link> to return
<link linkend="G-IO-ERROR-ADDRESS-IN-USE:CAPS"><literal>G_IO_ERROR_ADDRESS_IN_USE</literal></link> if the server program is stopped and then
immediately restarted.)</para>
<para>If <parameter>socket</parameter>
 is a UDP socket, then <parameter>allow_reuse</parameter>
 determines whether or
not other UDP sockets can be bound to the same address at the same
time. In particular, you can have several UDP sockets bound to the
same address, and they will all receive all of the multicast and
broadcast packets sent to that address. (The behavior of unicast
UDP packets to an address with multiple listeners is not defined.)</para>
<refsect3 id="g-socket-bind.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocketAddress"><type>GSocketAddress</type></link> specifying the local address.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>allow_reuse</para></entry>
<entry role="parameter_description"><para>whether to allow reusing this address</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-bind.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-listen" role="function" condition="since:2.22">
<title>g_socket_listen&#160;()</title>
<indexterm zone="g-socket-listen" role="2.22"><primary sortas="socket_listen">g_socket_listen</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_listen (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                 <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Marks the socket as a server socket, i.e. a socket that is used
to accept incoming requests using <link linkend="g-socket-accept"><function>g_socket_accept()</function></link>.</para>
<para>Before calling this the socket must be bound to a local address using
<link linkend="g-socket-bind"><function>g_socket_bind()</function></link>.</para>
<para>To set the maximum amount of outstanding clients, use
<link linkend="g-socket-set-listen-backlog"><function>g_socket_set_listen_backlog()</function></link>.</para>
<refsect3 id="g-socket-listen.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-listen.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-accept" role="function" condition="since:2.22">
<title>g_socket_accept&#160;()</title>
<indexterm zone="g-socket-accept" role="2.22"><primary sortas="socket_accept">g_socket_accept</primary></indexterm>
<programlisting language="C"><link linkend="GSocket"><returnvalue>GSocket</returnvalue></link>&#160;*
g_socket_accept (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                 <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                 <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Accept incoming connections on a connection-based socket. This removes
the first outstanding connection request from the listening socket and
creates a <link linkend="GSocket"><type>GSocket</type></link> object for it.</para>
<para>The <parameter>socket</parameter>
 must be bound to a local address with <link linkend="g-socket-bind"><function>g_socket_bind()</function></link> and
must be listening for incoming connections (<link linkend="g-socket-listen"><function>g_socket_listen()</function></link>).</para>
<para>If there are no outstanding connections then the operation will block
or return <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> if non-blocking I/O is enabled.
To be notified of an incoming connection, wait for the <link linkend="G-IO-IN:CAPS"><literal>G_IO_IN</literal></link> condition.</para>
<refsect3 id="g-socket-accept.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-accept.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GSocket"><type>GSocket</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-connect" role="function" condition="since:2.22">
<title>g_socket_connect&#160;()</title>
<indexterm zone="g-socket-connect" role="2.22"><primary sortas="socket_connect">g_socket_connect</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_connect (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                  <parameter><link linkend="GSocketAddress"><type>GSocketAddress</type></link> *address</parameter>,
                  <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Connect the socket to the specified remote address.</para>
<para>For connection oriented socket this generally means we attempt to make
a connection to the <parameter>address</parameter>
. For a connection-less socket it sets
the default address for <link linkend="g-socket-send"><function>g_socket_send()</function></link> and discards all incoming datagrams
from other sources.</para>
<para>Generally connection oriented sockets can only connect once, but
connection-less sockets can connect multiple times to change the
default address.</para>
<para>If the connect call needs to do network I/O it will block, unless
non-blocking I/O is enabled. Then <link linkend="G-IO-ERROR-PENDING:CAPS"><literal>G_IO_ERROR_PENDING</literal></link> is returned
and the user can be notified of the connection finishing by waiting
for the G_IO_OUT condition. The result of the connection must then be
checked with <link linkend="g-socket-check-connect-result"><function>g_socket_check_connect_result()</function></link>.</para>
<refsect3 id="g-socket-connect.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocketAddress"><type>GSocketAddress</type></link> specifying the remote address.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-connect.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if connected, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-check-connect-result" role="function" condition="since:2.22">
<title>g_socket_check_connect_result&#160;()</title>
<indexterm zone="g-socket-check-connect-result" role="2.22"><primary sortas="socket_check_connect_result">g_socket_check_connect_result</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_check_connect_result (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Checks and resets the pending connect error for the socket.
This is used to check for errors when <link linkend="g-socket-connect"><function>g_socket_connect()</function></link> is
used in non-blocking mode.</para>
<refsect3 id="g-socket-check-connect-result.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-check-connect-result.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if no error, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise, setting <parameter>error</parameter>
to the error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-receive" role="function" condition="since:2.22">
<title>g_socket_receive&#160;()</title>
<indexterm zone="g-socket-receive" role="2.22"><primary sortas="socket_receive">g_socket_receive</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_receive (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                  <parameter><link linkend="gchar"><type>gchar</type></link> *buffer</parameter>,
                  <parameter><link linkend="gsize"><type>gsize</type></link> size</parameter>,
                  <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Receive data (up to <parameter>size</parameter>
 bytes) from a socket. This is mainly used by
connection-oriented sockets; it is identical to <link linkend="g-socket-receive-from"><function>g_socket_receive_from()</function></link>
with <parameter>address</parameter>
 set to <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>For <link linkend="G-SOCKET-TYPE-DATAGRAM:CAPS"><literal>G_SOCKET_TYPE_DATAGRAM</literal></link> and <link linkend="G-SOCKET-TYPE-SEQPACKET:CAPS"><literal>G_SOCKET_TYPE_SEQPACKET</literal></link> sockets,
<link linkend="g-socket-receive"><function>g_socket_receive()</function></link> will always read either 0 or 1 complete messages from
the socket. If the received message is too large to fit in <parameter>buffer</parameter>
, then
the data beyond <parameter>size</parameter>
 bytes will be discarded, without any explicit
indication that this has occurred.</para>
<para>For <link linkend="G-SOCKET-TYPE-STREAM:CAPS"><literal>G_SOCKET_TYPE_STREAM</literal></link> sockets, <link linkend="g-socket-receive"><function>g_socket_receive()</function></link> can return any
number of bytes, up to <parameter>size</parameter>
. If more than <parameter>size</parameter>
 bytes have been
received, the additional data will be returned in future calls to
<link linkend="g-socket-receive"><function>g_socket_receive()</function></link>.</para>
<para>If the socket is in blocking mode the call will block until there
is some data to receive, the connection is closed, or there is an
error. If there is no data available and the socket is in
non-blocking mode, a <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> error will be
returned. To be notified when data is available, wait for the
<link linkend="G-IO-IN:CAPS"><literal>G_IO_IN</literal></link> condition.</para>
<para>On error -1 is returned and <parameter>error</parameter>
 is set accordingly.</para>
<refsect3 id="g-socket-receive.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>a buffer to
read data into (which should be at least <parameter>size</parameter>
bytes long). </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=size][<acronym>element-type</acronym> guint8]</emphasis></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the number of bytes you want to read from the socket</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-receive.returns" role="returns">
<title>Returns</title>
<para> Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-receive-from" role="function" condition="since:2.22">
<title>g_socket_receive_from&#160;()</title>
<indexterm zone="g-socket-receive-from" role="2.22"><primary sortas="socket_receive_from">g_socket_receive_from</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_receive_from (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                       <parameter><link linkend="GSocketAddress"><type>GSocketAddress</type></link> **address</parameter>,
                       <parameter><link linkend="gchar"><type>gchar</type></link> *buffer</parameter>,
                       <parameter><link linkend="gsize"><type>gsize</type></link> size</parameter>,
                       <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                       <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Receive data (up to <parameter>size</parameter>
 bytes) from a socket.</para>
<para>If <parameter>address</parameter>
 is non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> then <parameter>address</parameter>
 will be set equal to the
source address of the received packet.
<parameter>address</parameter>
 is owned by the caller.</para>
<para>See <link linkend="g-socket-receive"><function>g_socket_receive()</function></link> for additional information.</para>
<refsect3 id="g-socket-receive-from.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a pointer to a <link linkend="GSocketAddress"><type>GSocketAddress</type></link>
pointer, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>a buffer to
read data into (which should be at least <parameter>size</parameter>
bytes long). </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=size][<acronym>element-type</acronym> guint8]</emphasis></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the number of bytes you want to read from the socket</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-receive-from.returns" role="returns">
<title>Returns</title>
<para> Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-receive-message" role="function" condition="since:2.22">
<title>g_socket_receive_message&#160;()</title>
<indexterm zone="g-socket-receive-message" role="2.22"><primary sortas="socket_receive_message">g_socket_receive_message</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_receive_message (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                          <parameter><link linkend="GSocketAddress"><type>GSocketAddress</type></link> **address</parameter>,
                          <parameter><link linkend="GInputVector"><type>GInputVector</type></link> *vectors</parameter>,
                          <parameter><link linkend="gint"><type>gint</type></link> num_vectors</parameter>,
                          <parameter><link linkend="GSocketControlMessage"><type>GSocketControlMessage</type></link> ***messages</parameter>,
                          <parameter><link linkend="gint"><type>gint</type></link> *num_messages</parameter>,
                          <parameter><link linkend="gint"><type>gint</type></link> *flags</parameter>,
                          <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                          <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Receive data from a socket.  For receiving multiple messages, see
<link linkend="g-socket-receive-messages"><function>g_socket_receive_messages()</function></link>; for easier use, see
<link linkend="g-socket-receive"><function>g_socket_receive()</function></link> and <link linkend="g-socket-receive-from"><function>g_socket_receive_from()</function></link>.</para>
<para>If <parameter>address</parameter>
 is non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> then <parameter>address</parameter>
 will be set equal to the
source address of the received packet.
<parameter>address</parameter>
 is owned by the caller.</para>
<para><parameter>vector</parameter>
 must point to an array of <link linkend="GInputVector"><type>GInputVector</type></link> structs and
<parameter>num_vectors</parameter>
 must be the length of this array.  These structs
describe the buffers that received data will be scattered into.
If <parameter>num_vectors</parameter>
 is -1, then <parameter>vectors</parameter>
 is assumed to be terminated
by a <link linkend="GInputVector"><type>GInputVector</type></link> with a <link linkend="NULL:CAPS"><literal>NULL</literal></link> buffer pointer.</para>
<para>As a special case, if <parameter>num_vectors</parameter>
 is 0 (in which case, <parameter>vectors</parameter>

may of course be <link linkend="NULL:CAPS"><literal>NULL</literal></link>), then a single byte is received and
discarded. This is to facilitate the common practice of sending a
single '\0' byte for the purposes of transferring ancillary data.</para>
<para><parameter>messages</parameter>
, if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be set to point to a newly-allocated
array of <link linkend="GSocketControlMessage"><type>GSocketControlMessage</type></link> instances or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such
messages was received. These correspond to the control messages
received from the kernel, one <link linkend="GSocketControlMessage"><type>GSocketControlMessage</type></link> per message
from the kernel. This array is <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated and must be freed
by the caller using <link linkend="g-free"><function>g_free()</function></link> after calling <link linkend="g-object-unref"><function>g_object_unref()</function></link> on each
element. If <parameter>messages</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, any control messages received will
be discarded.</para>
<para><parameter>num_messages</parameter>
, if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be set to the number of control
messages received.</para>
<para>If both <parameter>messages</parameter>
 and <parameter>num_messages</parameter>
 are non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, then
<parameter>num_messages</parameter>
 gives the number of <link linkend="GSocketControlMessage"><type>GSocketControlMessage</type></link> instances
in <parameter>messages</parameter>
 (ie: not including the <link linkend="NULL:CAPS"><literal>NULL</literal></link> terminator).</para>
<para><parameter>flags</parameter>
 is an in/out parameter. The commonly available arguments
for this are available in the <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too
(and <link linkend="g-socket-receive-message"><function>g_socket_receive_message()</function></link> may pass system-specific flags out).
Flags passed in to the parameter affect the receive operation; flags returned
out of it are relevant to the specific returned message.</para>
<para>As with <link linkend="g-socket-receive"><function>g_socket_receive()</function></link>, data may be discarded if <parameter>socket</parameter>
 is
<link linkend="G-SOCKET-TYPE-DATAGRAM:CAPS"><literal>G_SOCKET_TYPE_DATAGRAM</literal></link> or <link linkend="G-SOCKET-TYPE-SEQPACKET:CAPS"><literal>G_SOCKET_TYPE_SEQPACKET</literal></link> and you do not
provide enough buffer space to read a complete message. You can pass
<link linkend="G-SOCKET-MSG-PEEK:CAPS"><literal>G_SOCKET_MSG_PEEK</literal></link> in <parameter>flags</parameter>
 to peek at the current message without
removing it from the receive queue, but there is no portable way to find
out the length of the message other than by reading it into a
sufficiently-large buffer.</para>
<para>If the socket is in blocking mode the call will block until there
is some data to receive, the connection is closed, or there is an
error. If there is no data available and the socket is in
non-blocking mode, a <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> error will be
returned. To be notified when data is available, wait for the
<link linkend="G-IO-IN:CAPS"><literal>G_IO_IN</literal></link> condition.</para>
<para>On error -1 is returned and <parameter>error</parameter>
 is set accordingly.</para>
<refsect3 id="g-socket-receive-message.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a pointer to a <link linkend="GSocketAddress"><type>GSocketAddress</type></link>
pointer, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>vectors</para></entry>
<entry role="parameter_description"><para>an array of <link linkend="GInputVector"><type>GInputVector</type></link> structs. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=num_vectors]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_vectors</para></entry>
<entry role="parameter_description"><para>the number of elements in <parameter>vectors</parameter>
, or -1</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>messages</para></entry>
<entry role="parameter_description"><para>a pointer
which may be filled with an array of <link linkend="GSocketControlMessages"><type>GSocketControlMessages</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=num_messages][<acronym>out</acronym>][<acronym>optional</acronym>][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_messages</para></entry>
<entry role="parameter_description"><para>a pointer which will be filled with the number of
elements in <parameter>messages</parameter>
, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>a pointer to an int containing <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> flags. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>inout</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> pointer, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-receive-message.returns" role="returns">
<title>Returns</title>
<para> Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-receive-messages" role="function" condition="since:2.48">
<title>g_socket_receive_messages&#160;()</title>
<indexterm zone="g-socket-receive-messages" role="2.48"><primary sortas="socket_receive_messages">g_socket_receive_messages</primary></indexterm>
<programlisting language="C"><link linkend="gint"><returnvalue>gint</returnvalue></link>
g_socket_receive_messages (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                           <parameter><link linkend="GInputMessage"><type>GInputMessage</type></link> *messages</parameter>,
                           <parameter><link linkend="guint"><type>guint</type></link> num_messages</parameter>,
                           <parameter><link linkend="gint"><type>gint</type></link> flags</parameter>,
                           <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                           <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Receive multiple data messages from <parameter>socket</parameter>
 in one go.  This is the most
complicated and fully-featured version of this call. For easier use, see
<link linkend="g-socket-receive"><function>g_socket_receive()</function></link>, <link linkend="g-socket-receive-from"><function>g_socket_receive_from()</function></link>, and <link linkend="g-socket-receive-message"><function>g_socket_receive_message()</function></link>.</para>
<para><parameter>messages</parameter>
 must point to an array of <link linkend="GInputMessage"><type>GInputMessage</type></link> structs and
<parameter>num_messages</parameter>
 must be the length of this array. Each <link linkend="GInputMessage"><type>GInputMessage</type></link>
contains a pointer to an array of <link linkend="GInputVector"><type>GInputVector</type></link> structs describing the
buffers that the data received in each message will be written to. Using
multiple <link linkend="GInputVectors"><type>GInputVectors</type></link> is more memory-efficient than manually copying data
out of a single buffer to multiple sources, and more system-call-efficient
than making multiple calls to <link linkend="g-socket-receive"><function>g_socket_receive()</function></link>, such as in scenarios where
a lot of data packets need to be received (e.g. high-bandwidth video
streaming over RTP/UDP).</para>
<para><parameter>flags</parameter>
 modify how all messages are received. The commonly available
arguments for this are available in the <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too. These
flags affect the overall receive operation. Flags affecting individual
messages are returned in <link linkend="GInputMessage.flags"><type>GInputMessage.flags</type></link>.</para>
<para>The other members of <link linkend="GInputMessage"><type>GInputMessage</type></link> are treated as described in its
documentation.</para>
<para>If <link linkend="GSocket--blocking"><type>“blocking”</type></link> is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> the call will block until <parameter>num_messages</parameter>
 have
been received, or the end of the stream is reached.</para>
<para>If <link linkend="GSocket--blocking"><type>“blocking”</type></link> is <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> the call will return up to <parameter>num_messages</parameter>

without blocking, or <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> if no messages are queued in the
operating system to be received.</para>
<para>In blocking mode, if <link linkend="GSocket--timeout"><type>“timeout”</type></link> is positive and is reached before any
messages are received, <link linkend="G-IO-ERROR-TIMED-OUT:CAPS"><literal>G_IO_ERROR_TIMED_OUT</literal></link> is returned, otherwise up to
<parameter>num_messages</parameter>
 are returned. (Note: This is effectively the
behaviour of <literal>MSG_WAITFORONE</literal> with <link linkend="recvmmsg"><function>recvmmsg()</function></link>.)</para>
<para>To be notified when messages are available, wait for the
<link linkend="G-IO-IN:CAPS"><literal>G_IO_IN</literal></link> condition. Note though that you may still receive
<link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> from <link linkend="g-socket-receive-messages"><function>g_socket_receive_messages()</function></link> even if you were
previously notified of a <link linkend="G-IO-IN:CAPS"><literal>G_IO_IN</literal></link> condition.</para>
<para>If the remote peer closes the connection, any messages queued in the
operating system will be returned, and subsequent calls to
<link linkend="g-socket-receive-messages"><function>g_socket_receive_messages()</function></link> will return 0 (with no error set).</para>
<para>On error -1 is returned and <parameter>error</parameter>
 is set accordingly. An error will only
be returned if zero messages could be received; otherwise the number of
messages successfully received before the error will be returned.</para>
<refsect3 id="g-socket-receive-messages.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>messages</para></entry>
<entry role="parameter_description"><para>an array of <link linkend="GInputMessage"><type>GInputMessage</type></link> structs. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=num_messages]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_messages</para></entry>
<entry role="parameter_description"><para>the number of elements in <parameter>messages</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>an int containing <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> flags for the overall operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-receive-messages.returns" role="returns">
<title>Returns</title>
<para> number of messages received, or -1 on error. Note that the number
of messages received may be smaller than <parameter>num_messages</parameter>
if in non-blocking
mode, if the peer closed the connection, or if <parameter>num_messages</parameter>
was larger than <literal>UIO_MAXIOV</literal> (1024), in which case the caller may re-try
to receive the remaining messages.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.48">2.48</link></para></refsect2>
<refsect2 id="g-socket-receive-with-blocking" role="function" condition="since:2.26">
<title>g_socket_receive_with_blocking&#160;()</title>
<indexterm zone="g-socket-receive-with-blocking" role="2.26"><primary sortas="socket_receive_with_blocking">g_socket_receive_with_blocking</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_receive_with_blocking (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                                <parameter><link linkend="gchar"><type>gchar</type></link> *buffer</parameter>,
                                <parameter><link linkend="gsize"><type>gsize</type></link> size</parameter>,
                                <parameter><link linkend="gboolean"><type>gboolean</type></link> blocking</parameter>,
                                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>This behaves exactly the same as <link linkend="g-socket-receive"><function>g_socket_receive()</function></link>, except that
the choice of blocking or non-blocking behavior is determined by
the <parameter>blocking</parameter>
 argument rather than by <parameter>socket</parameter>
's properties.</para>
<refsect3 id="g-socket-receive-with-blocking.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>a buffer to
read data into (which should be at least <parameter>size</parameter>
bytes long). </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=size][<acronym>element-type</acronym> guint8]</emphasis></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the number of bytes you want to read from the socket</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>blocking</para></entry>
<entry role="parameter_description"><para>whether to do blocking or non-blocking I/O</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-receive-with-blocking.returns" role="returns">
<title>Returns</title>
<para> Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-socket-send" role="function" condition="since:2.22">
<title>g_socket_send&#160;()</title>
<indexterm zone="g-socket-send" role="2.22"><primary sortas="socket_send">g_socket_send</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_send (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
               <parameter>const <link linkend="gchar"><type>gchar</type></link> *buffer</parameter>,
               <parameter><link linkend="gsize"><type>gsize</type></link> size</parameter>,
               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Tries to send <parameter>size</parameter>
 bytes from <parameter>buffer</parameter>
 on the socket. This is
mainly used by connection-oriented sockets; it is identical to
<link linkend="g-socket-send-to"><function>g_socket_send_to()</function></link> with <parameter>address</parameter>
 set to <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> error
will be returned. To be notified when space is available, wait for the
<link linkend="G-IO-OUT:CAPS"><literal>G_IO_OUT</literal></link> condition. Note though that you may still receive
<link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> from <link linkend="g-socket-send"><function>g_socket_send()</function></link> even if you were previously
notified of a <link linkend="G-IO-OUT:CAPS"><literal>G_IO_OUT</literal></link> condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)</para>
<para>On error -1 is returned and <parameter>error</parameter>
 is set accordingly.</para>
<refsect3 id="g-socket-send.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>the buffer
containing the data to send. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=size][<acronym>element-type</acronym> guint8]</emphasis></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the number of bytes to send</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-send.returns" role="returns">
<title>Returns</title>
<para> Number of bytes written (which may be less than <parameter>size</parameter>
), or -1
on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-send-to" role="function" condition="since:2.22">
<title>g_socket_send_to&#160;()</title>
<indexterm zone="g-socket-send-to" role="2.22"><primary sortas="socket_send_to">g_socket_send_to</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_send_to (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                  <parameter><link linkend="GSocketAddress"><type>GSocketAddress</type></link> *address</parameter>,
                  <parameter>const <link linkend="gchar"><type>gchar</type></link> *buffer</parameter>,
                  <parameter><link linkend="gsize"><type>gsize</type></link> size</parameter>,
                  <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                  <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Tries to send <parameter>size</parameter>
 bytes from <parameter>buffer</parameter>
 to <parameter>address</parameter>
. If <parameter>address</parameter>
 is
<link linkend="NULL:CAPS"><literal>NULL</literal></link> then the message is sent to the default receiver (set by
<link linkend="g-socket-connect"><function>g_socket_connect()</function></link>).</para>
<para>See <link linkend="g-socket-send"><function>g_socket_send()</function></link> for additional information.</para>
<refsect3 id="g-socket-send-to.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocketAddress"><type>GSocketAddress</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>the buffer
containing the data to send. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=size][<acronym>element-type</acronym> guint8]</emphasis></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the number of bytes to send</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-send-to.returns" role="returns">
<title>Returns</title>
<para> Number of bytes written (which may be less than <parameter>size</parameter>
), or -1
on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-send-message" role="function" condition="since:2.22">
<title>g_socket_send_message&#160;()</title>
<indexterm zone="g-socket-send-message" role="2.22"><primary sortas="socket_send_message">g_socket_send_message</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_send_message (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                       <parameter><link linkend="GSocketAddress"><type>GSocketAddress</type></link> *address</parameter>,
                       <parameter><link linkend="GOutputVector"><type>GOutputVector</type></link> *vectors</parameter>,
                       <parameter><link linkend="gint"><type>gint</type></link> num_vectors</parameter>,
                       <parameter><link linkend="GSocketControlMessage"><type>GSocketControlMessage</type></link> **messages</parameter>,
                       <parameter><link linkend="gint"><type>gint</type></link> num_messages</parameter>,
                       <parameter><link linkend="gint"><type>gint</type></link> flags</parameter>,
                       <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                       <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Send data to <parameter>address</parameter>
 on <parameter>socket</parameter>
.  For sending multiple messages see
<link linkend="g-socket-send-messages"><function>g_socket_send_messages()</function></link>; for easier use, see
<link linkend="g-socket-send"><function>g_socket_send()</function></link> and <link linkend="g-socket-send-to"><function>g_socket_send_to()</function></link>.</para>
<para>If <parameter>address</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then the message is sent to the default receiver
(set by <link linkend="g-socket-connect"><function>g_socket_connect()</function></link>).</para>
<para><parameter>vectors</parameter>
 must point to an array of <link linkend="GOutputVector"><type>GOutputVector</type></link> structs and
<parameter>num_vectors</parameter>
 must be the length of this array. (If <parameter>num_vectors</parameter>
 is -1,
then <parameter>vectors</parameter>
 is assumed to be terminated by a <link linkend="GOutputVector"><type>GOutputVector</type></link> with a
<link linkend="NULL:CAPS"><literal>NULL</literal></link> buffer pointer.) The <link linkend="GOutputVector"><type>GOutputVector</type></link> structs describe the buffers
that the sent data will be gathered from. Using multiple
<link linkend="GOutputVectors"><type>GOutputVectors</type></link> is more memory-efficient than manually copying
data from multiple sources into a single buffer, and more
network-efficient than making multiple calls to <link linkend="g-socket-send"><function>g_socket_send()</function></link>.</para>
<para><parameter>messages</parameter>
, if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, is taken to point to an array of <parameter>num_messages</parameter>

<link linkend="GSocketControlMessage"><type>GSocketControlMessage</type></link> instances. These correspond to the control
messages to be sent on the socket.
If <parameter>num_messages</parameter>
 is -1 then <parameter>messages</parameter>
 is treated as a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated
array.</para>
<para><parameter>flags</parameter>
 modify how the message is sent. The commonly available arguments
for this are available in the <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too.</para>
<para>If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> error
will be returned. To be notified when space is available, wait for the
<link linkend="G-IO-OUT:CAPS"><literal>G_IO_OUT</literal></link> condition. Note though that you may still receive
<link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> from <link linkend="g-socket-send"><function>g_socket_send()</function></link> even if you were previously
notified of a <link linkend="G-IO-OUT:CAPS"><literal>G_IO_OUT</literal></link> condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)</para>
<para>On error -1 is returned and <parameter>error</parameter>
 is set accordingly.</para>
<refsect3 id="g-socket-send-message.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>address</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocketAddress"><type>GSocketAddress</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>vectors</para></entry>
<entry role="parameter_description"><para>an array of <link linkend="GOutputVector"><type>GOutputVector</type></link> structs. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=num_vectors]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_vectors</para></entry>
<entry role="parameter_description"><para>the number of elements in <parameter>vectors</parameter>
, or -1</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>messages</para></entry>
<entry role="parameter_description"><para>a pointer to an
array of <link linkend="GSocketControlMessages"><type>GSocketControlMessages</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=num_messages][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_messages</para></entry>
<entry role="parameter_description"><para>number of elements in <parameter>messages</parameter>
, or -1.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>an int containing <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> flags</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-send-message.returns" role="returns">
<title>Returns</title>
<para> Number of bytes written (which may be less than <parameter>size</parameter>
), or -1
on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-send-messages" role="function" condition="since:2.44">
<title>g_socket_send_messages&#160;()</title>
<indexterm zone="g-socket-send-messages" role="2.44"><primary sortas="socket_send_messages">g_socket_send_messages</primary></indexterm>
<programlisting language="C"><link linkend="gint"><returnvalue>gint</returnvalue></link>
g_socket_send_messages (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                        <parameter><link linkend="GOutputMessage"><type>GOutputMessage</type></link> *messages</parameter>,
                        <parameter><link linkend="guint"><type>guint</type></link> num_messages</parameter>,
                        <parameter><link linkend="gint"><type>gint</type></link> flags</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                        <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Send multiple data messages from <parameter>socket</parameter>
 in one go.  This is the most
complicated and fully-featured version of this call. For easier use, see
<link linkend="g-socket-send"><function>g_socket_send()</function></link>, <link linkend="g-socket-send-to"><function>g_socket_send_to()</function></link>, and <link linkend="g-socket-send-message"><function>g_socket_send_message()</function></link>.</para>
<para><parameter>messages</parameter>
 must point to an array of <link linkend="GOutputMessage"><type>GOutputMessage</type></link> structs and
<parameter>num_messages</parameter>
 must be the length of this array. Each <link linkend="GOutputMessage"><type>GOutputMessage</type></link>
contains an address to send the data to, and a pointer to an array of
<link linkend="GOutputVector"><type>GOutputVector</type></link> structs to describe the buffers that the data to be sent
for each message will be gathered from. Using multiple <link linkend="GOutputVectors"><type>GOutputVectors</type></link> is
more memory-efficient than manually copying data from multiple sources
into a single buffer, and more network-efficient than making multiple
calls to <link linkend="g-socket-send"><function>g_socket_send()</function></link>. Sending multiple messages in one go avoids the
overhead of making a lot of syscalls in scenarios where a lot of data
packets need to be sent (e.g. high-bandwidth video streaming over RTP/UDP),
or where the same data needs to be sent to multiple recipients.</para>
<para><parameter>flags</parameter>
 modify how the message is sent. The commonly available arguments
for this are available in the <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too.</para>
<para>If the socket is in blocking mode the call will block until there is
space for all the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> error
will be returned if no data was written at all, otherwise the number of
messages sent will be returned. To be notified when space is available,
wait for the <link linkend="G-IO-OUT:CAPS"><literal>G_IO_OUT</literal></link> condition. Note though that you may still receive
<link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> from <link linkend="g-socket-send"><function>g_socket_send()</function></link> even if you were previously
notified of a <link linkend="G-IO-OUT:CAPS"><literal>G_IO_OUT</literal></link> condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)</para>
<para>On error -1 is returned and <parameter>error</parameter>
 is set accordingly. An error will only
be returned if zero messages could be sent; otherwise the number of messages
successfully sent before the error will be returned.</para>
<refsect3 id="g-socket-send-messages.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>messages</para></entry>
<entry role="parameter_description"><para>an array of <link linkend="GOutputMessage"><type>GOutputMessage</type></link> structs. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=num_messages]</emphasis></entry></row>
<row><entry role="parameter_name"><para>num_messages</para></entry>
<entry role="parameter_description"><para>the number of elements in <parameter>messages</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>an int containing <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> flags</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-send-messages.returns" role="returns">
<title>Returns</title>
<para> number of messages sent, or -1 on error. Note that the number of
messages sent may be smaller than <parameter>num_messages</parameter>
if the socket is
non-blocking or if <parameter>num_messages</parameter>
was larger than UIO_MAXIOV (1024),
in which case the caller may re-try to send the remaining messages.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.44">2.44</link></para></refsect2>
<refsect2 id="g-socket-send-with-blocking" role="function" condition="since:2.26">
<title>g_socket_send_with_blocking&#160;()</title>
<indexterm zone="g-socket-send-with-blocking" role="2.26"><primary sortas="socket_send_with_blocking">g_socket_send_with_blocking</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_send_with_blocking (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                             <parameter>const <link linkend="gchar"><type>gchar</type></link> *buffer</parameter>,
                             <parameter><link linkend="gsize"><type>gsize</type></link> size</parameter>,
                             <parameter><link linkend="gboolean"><type>gboolean</type></link> blocking</parameter>,
                             <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>This behaves exactly the same as <link linkend="g-socket-send"><function>g_socket_send()</function></link>, except that
the choice of blocking or non-blocking behavior is determined by
the <parameter>blocking</parameter>
 argument rather than by <parameter>socket</parameter>
's properties.</para>
<refsect3 id="g-socket-send-with-blocking.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>the buffer
containing the data to send. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=size][<acronym>element-type</acronym> guint8]</emphasis></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the number of bytes to send</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>blocking</para></entry>
<entry role="parameter_description"><para>whether to do blocking or non-blocking I/O</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-send-with-blocking.returns" role="returns">
<title>Returns</title>
<para> Number of bytes written (which may be less than <parameter>size</parameter>
), or -1
on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-socket-close" role="function" condition="since:2.22">
<title>g_socket_close&#160;()</title>
<indexterm zone="g-socket-close" role="2.22"><primary sortas="socket_close">g_socket_close</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_close (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Closes the socket, shutting down any active connection.</para>
<para>Closing a socket does not wait for all outstanding I/O operations
to finish, so the caller should not rely on them to be guaranteed
to complete even if the close returns with no error.</para>
<para>Once the socket is closed, all other operations will return
<link linkend="G-IO-ERROR-CLOSED:CAPS"><literal>G_IO_ERROR_CLOSED</literal></link>. Closing a socket multiple times will not
return an error.</para>
<para>Sockets will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.</para>
<para>Beware that due to the way that TCP works, it is possible for
recently-sent data to be lost if either you close a socket while the
<link linkend="G-IO-IN:CAPS"><literal>G_IO_IN</literal></link> condition is set, or else if the remote connection tries to
send something to you after you close the socket but before it has
finished reading all of the data you sent. There is no easy generic
way to avoid this problem; the easiest fix is to design the network
protocol such that the client will never send data "out of turn".
Another solution is for the server to half-close the connection by
calling <link linkend="g-socket-shutdown"><function>g_socket_shutdown()</function></link> with only the <parameter>shutdown_write</parameter>
 flag set,
and then wait for the client to notice this and close its side of the
connection, after which the server can safely call <link linkend="g-socket-close"><function>g_socket_close()</function></link>.
(This is what <link linkend="GTcpConnection"><type>GTcpConnection</type></link> does if you call
<link linkend="g-tcp-connection-set-graceful-disconnect"><function>g_tcp_connection_set_graceful_disconnect()</function></link>. But of course, this
only works if the client will close its connection after the server
does.)</para>
<refsect3 id="g-socket-close.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-close.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-is-closed" role="function" condition="since:2.22">
<title>g_socket_is_closed&#160;()</title>
<indexterm zone="g-socket-is-closed" role="2.22"><primary sortas="socket_is_closed">g_socket_is_closed</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_is_closed (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Checks whether a socket is closed.</para>
<refsect3 id="g-socket-is-closed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-is-closed.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if socket is closed, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-shutdown" role="function" condition="since:2.22">
<title>g_socket_shutdown&#160;()</title>
<indexterm zone="g-socket-shutdown" role="2.22"><primary sortas="socket_shutdown">g_socket_shutdown</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_shutdown (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                   <parameter><link linkend="gboolean"><type>gboolean</type></link> shutdown_read</parameter>,
                   <parameter><link linkend="gboolean"><type>gboolean</type></link> shutdown_write</parameter>,
                   <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Shut down part or all of a full-duplex connection.</para>
<para>If <parameter>shutdown_read</parameter>
 is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> then the receiving side of the connection
is shut down, and further reading is disallowed.</para>
<para>If <parameter>shutdown_write</parameter>
 is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> then the sending side of the connection
is shut down, and further writing is disallowed.</para>
<para>It is allowed for both <parameter>shutdown_read</parameter>
 and <parameter>shutdown_write</parameter>
 to be <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>.</para>
<para>One example where it is useful to shut down only one side of a connection is
graceful disconnect for TCP connections where you close the sending side,
then wait for the other side to close the connection, thus ensuring that the
other side saw all sent data.</para>
<refsect3 id="g-socket-shutdown.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>shutdown_read</para></entry>
<entry role="parameter_description"><para>whether to shut down the read side</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>shutdown_write</para></entry>
<entry role="parameter_description"><para>whether to shut down the write side</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-shutdown.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-is-connected" role="function" condition="since:2.22">
<title>g_socket_is_connected&#160;()</title>
<indexterm zone="g-socket-is-connected" role="2.22"><primary sortas="socket_is_connected">g_socket_is_connected</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_is_connected (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Check whether the socket is connected. This is only useful for
connection-oriented sockets.</para>
<para>If using <link linkend="g-socket-shutdown"><function>g_socket_shutdown()</function></link>, this function will return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> until the
socket has been shut down for reading and writing. If you do a non-blocking
connect, this function will not return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> until after you call
<link linkend="g-socket-check-connect-result"><function>g_socket_check_connect_result()</function></link>.</para>
<refsect3 id="g-socket-is-connected.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-is-connected.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if socket is connected, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-create-source" role="function" condition="since:2.22">
<title>g_socket_create_source&#160;()</title>
<indexterm zone="g-socket-create-source" role="2.22"><primary sortas="socket_create_source">g_socket_create_source</primary></indexterm>
<programlisting language="C"><link linkend="GSource"><returnvalue>GSource</returnvalue></link>&#160;*
g_socket_create_source (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                        <parameter><link linkend="GIOCondition"><type>GIOCondition</type></link> condition</parameter>,
                        <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>);</programlisting>
<para>Creates a <link linkend="GSource"><type>GSource</type></link> that can be attached to a <link linkend="GMainContext"><literal>GMainContext</literal></link> to monitor
for the availability of the specified <parameter>condition</parameter>
 on the socket. The <link linkend="GSource"><type>GSource</type></link>
keeps a reference to the <parameter>socket</parameter>
.</para>
<para>The callback on the source is of the <link linkend="GSocketSourceFunc"><type>GSocketSourceFunc</type></link> type.</para>
<para>It is meaningless to specify <link linkend="G-IO-ERR:CAPS"><literal>G_IO_ERR</literal></link> or <link linkend="G-IO-HUP:CAPS"><literal>G_IO_HUP</literal></link> in <parameter>condition</parameter>
;
these conditions will always be reported output if they are true.</para>
<para><parameter>cancellable</parameter>
 if not <link linkend="NULL:CAPS"><literal>NULL</literal></link> can be used to cancel the source, which will
cause the source to trigger, reporting the current condition (which
is likely 0 unless cancellation happened at the same time as a
condition change). You can check for this in the callback using
<link linkend="g-cancellable-is-cancelled"><function>g_cancellable_is_cancelled()</function></link>.</para>
<para>If <parameter>socket</parameter>
 has a timeout set, and it is reached before <parameter>condition</parameter>

occurs, the source will then trigger anyway, reporting <link linkend="G-IO-IN:CAPS"><literal>G_IO_IN</literal></link> or
<link linkend="G-IO-OUT:CAPS"><literal>G_IO_OUT</literal></link> depending on <parameter>condition</parameter>
. However, <parameter>socket</parameter>
 will have been
marked as having had a timeout, and so the next <link linkend="GSocket"><type>GSocket</type></link> I/O method
you call will then fail with a <link linkend="G-IO-ERROR-TIMED-OUT:CAPS"><literal>G_IO_ERROR_TIMED_OUT</literal></link>.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-socket-create-source.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>condition</para></entry>
<entry role="parameter_description"><para>a <link linkend="GIOCondition"><type>GIOCondition</type></link> mask to monitor</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><literal>GCancellable</literal></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-create-source.returns" role="returns">
<title>Returns</title>
<para>a newly allocated <link linkend="GSource"><literal>GSource</literal></link>, free with <link linkend="g-source-unref"><function>g_source_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-condition-check" role="function" condition="since:2.22">
<title>g_socket_condition_check&#160;()</title>
<indexterm zone="g-socket-condition-check" role="2.22"><primary sortas="socket_condition_check">g_socket_condition_check</primary></indexterm>
<programlisting language="C"><link linkend="GIOCondition"><returnvalue>GIOCondition</returnvalue></link>
g_socket_condition_check (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                          <parameter><link linkend="GIOCondition"><type>GIOCondition</type></link> condition</parameter>);</programlisting>
<para>Checks on the readiness of <parameter>socket</parameter>
 to perform operations.
The operations specified in <parameter>condition</parameter>
 are checked for and masked
against the currently-satisfied conditions on <parameter>socket</parameter>
. The result
is returned.</para>
<para>Note that on Windows, it is possible for an operation to return
<link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> even immediately after
<link linkend="g-socket-condition-check"><function>g_socket_condition_check()</function></link> has claimed that the socket is ready for
writing. Rather than calling <link linkend="g-socket-condition-check"><function>g_socket_condition_check()</function></link> and then
writing to the socket if it succeeds, it is generally better to
simply try writing to the socket right away, and try again later if
the initial attempt returns <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link>.</para>
<para>It is meaningless to specify <link linkend="G-IO-ERR:CAPS"><literal>G_IO_ERR</literal></link> or <link linkend="G-IO-HUP:CAPS"><literal>G_IO_HUP</literal></link> in condition;
these conditions will always be set in the output if they are true.</para>
<para>This call never blocks.</para>
<refsect3 id="g-socket-condition-check.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>condition</para></entry>
<entry role="parameter_description"><para>a <link linkend="GIOCondition"><type>GIOCondition</type></link> mask to check</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-condition-check.returns" role="returns">
<title>Returns</title>
<para> the <parameter>GIOCondition</parameter>
mask of the current state</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-condition-wait" role="function" condition="since:2.22">
<title>g_socket_condition_wait&#160;()</title>
<indexterm zone="g-socket-condition-wait" role="2.22"><primary sortas="socket_condition_wait">g_socket_condition_wait</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_condition_wait (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                         <parameter><link linkend="GIOCondition"><type>GIOCondition</type></link> condition</parameter>,
                         <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Waits for <parameter>condition</parameter>
 to become true on <parameter>socket</parameter>
. When the condition
is met, <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned.</para>
<para>If <parameter>cancellable</parameter>
 is cancelled before the condition is met, or if the
socket has a timeout set and it is reached before the condition is
met, then <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned and <parameter>error</parameter>
, if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, is set to
the appropriate value (<link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> or
<link linkend="G-IO-ERROR-TIMED-OUT:CAPS"><literal>G_IO_ERROR_TIMED_OUT</literal></link>).</para>
<para>See also <link linkend="g-socket-condition-timed-wait"><function>g_socket_condition_timed_wait()</function></link>.</para>
<refsect3 id="g-socket-condition-wait.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>condition</para></entry>
<entry role="parameter_description"><para>a <link linkend="GIOCondition"><type>GIOCondition</type></link> mask to wait for</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> pointer, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-condition-wait.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the condition was met, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-condition-timed-wait" role="function" condition="since:2.32">
<title>g_socket_condition_timed_wait&#160;()</title>
<indexterm zone="g-socket-condition-timed-wait" role="2.32"><primary sortas="socket_condition_timed_wait">g_socket_condition_timed_wait</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_condition_timed_wait (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                               <parameter><link linkend="GIOCondition"><type>GIOCondition</type></link> condition</parameter>,
                               <parameter><link linkend="gint64"><type>gint64</type></link> timeout</parameter>,
                               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Waits for up to <parameter>timeout</parameter>
 microseconds for <parameter>condition</parameter>
 to become true
on <parameter>socket</parameter>
. If the condition is met, <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned.</para>
<para>If <parameter>cancellable</parameter>
 is cancelled before the condition is met, or if
<parameter>timeout</parameter>
 (or the socket's <link linkend="GSocket--timeout"><type>“timeout”</type></link>) is reached before the
condition is met, then <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned and <parameter>error</parameter>
, if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>,
is set to the appropriate value (<link linkend="G-IO-ERROR-CANCELLED:CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> or
<link linkend="G-IO-ERROR-TIMED-OUT:CAPS"><literal>G_IO_ERROR_TIMED_OUT</literal></link>).</para>
<para>If you don't want a timeout, use <link linkend="g-socket-condition-wait"><function>g_socket_condition_wait()</function></link>.
(Alternatively, you can pass -1 for <parameter>timeout</parameter>
.)</para>
<para>Note that although <parameter>timeout</parameter>
 is in microseconds for consistency with
other GLib APIs, this function actually only has millisecond
resolution, and the behavior is undefined if <parameter>timeout</parameter>
 is not an
exact number of milliseconds.</para>
<refsect3 id="g-socket-condition-timed-wait.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>condition</para></entry>
<entry role="parameter_description"><para>a <link linkend="GIOCondition"><type>GIOCondition</type></link> mask to wait for</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>timeout</para></entry>
<entry role="parameter_description"><para>the maximum time (in microseconds) to wait, or -1</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> pointer, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-condition-timed-wait.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the condition was met, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-get-available-bytes" role="function" condition="since:2.32">
<title>g_socket_get_available_bytes&#160;()</title>
<indexterm zone="g-socket-get-available-bytes" role="2.32"><primary sortas="socket_get_available_bytes">g_socket_get_available_bytes</primary></indexterm>
<programlisting language="C"><link linkend="gssize"><returnvalue>gssize</returnvalue></link>
g_socket_get_available_bytes (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Get the amount of data pending in the OS input buffer, without blocking.</para>
<para>If <parameter>socket</parameter>
 is a UDP or SCTP socket, this will return the size of
just the next packet, even if additional packets are buffered after
that one.</para>
<para>Note that on Windows, this function is rather inefficient in the
UDP case, and so if you know any plausible upper bound on the size
of the incoming packet, it is better to just do a
<link linkend="g-socket-receive"><function>g_socket_receive()</function></link> with a buffer of that size, rather than calling
<link linkend="g-socket-get-available-bytes"><function>g_socket_get_available_bytes()</function></link> first and then doing a receive of
exactly the right size.</para>
<refsect3 id="g-socket-get-available-bytes.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-available-bytes.returns" role="returns">
<title>Returns</title>
<para> the number of bytes that can be read from the socket
without blocking or truncating, or -1 on error.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-set-listen-backlog" role="function" condition="since:2.22">
<title>g_socket_set_listen_backlog&#160;()</title>
<indexterm zone="g-socket-set-listen-backlog" role="2.22"><primary sortas="socket_set_listen_backlog">g_socket_set_listen_backlog</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_socket_set_listen_backlog (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                             <parameter><link linkend="gint"><type>gint</type></link> backlog</parameter>);</programlisting>
<para>Sets the maximum number of outstanding connections allowed
when listening on this socket. If more clients than this are
connecting to the socket and the application is not handling them
on time then the new connections will be refused.</para>
<para>Note that this must be called before <link linkend="g-socket-listen"><function>g_socket_listen()</function></link> and has no
effect if called after that.</para>
<refsect3 id="g-socket-set-listen-backlog.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>backlog</para></entry>
<entry role="parameter_description"><para>the maximum number of pending connections.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-listen-backlog" role="function" condition="since:2.22">
<title>g_socket_get_listen_backlog&#160;()</title>
<indexterm zone="g-socket-get-listen-backlog" role="2.22"><primary sortas="socket_get_listen_backlog">g_socket_get_listen_backlog</primary></indexterm>
<programlisting language="C"><link linkend="gint"><returnvalue>gint</returnvalue></link>
g_socket_get_listen_backlog (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the listen backlog setting of the socket. For details on this,
see <link linkend="g-socket-set-listen-backlog"><function>g_socket_set_listen_backlog()</function></link>.</para>
<refsect3 id="g-socket-get-listen-backlog.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-listen-backlog.returns" role="returns">
<title>Returns</title>
<para> the maximum number of pending connections.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-blocking" role="function" condition="since:2.22">
<title>g_socket_get_blocking&#160;()</title>
<indexterm zone="g-socket-get-blocking" role="2.22"><primary sortas="socket_get_blocking">g_socket_get_blocking</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_get_blocking (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the blocking mode of the socket. For details on blocking I/O,
see <link linkend="g-socket-set-blocking"><function>g_socket_set_blocking()</function></link>.</para>
<refsect3 id="g-socket-get-blocking.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-blocking.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if blocking I/O is used, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-set-blocking" role="function" condition="since:2.22">
<title>g_socket_set_blocking&#160;()</title>
<indexterm zone="g-socket-set-blocking" role="2.22"><primary sortas="socket_set_blocking">g_socket_set_blocking</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_socket_set_blocking (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                       <parameter><link linkend="gboolean"><type>gboolean</type></link> blocking</parameter>);</programlisting>
<para>Sets the blocking mode of the socket. In blocking mode
all operations (which don’t take an explicit blocking parameter) block until
they succeed or there is an error. In
non-blocking mode all functions return results immediately or
with a <link linkend="G-IO-ERROR-WOULD-BLOCK:CAPS"><literal>G_IO_ERROR_WOULD_BLOCK</literal></link> error.</para>
<para>All sockets are created in blocking mode. However, note that the
platform level socket is always non-blocking, and blocking mode
is a GSocket level feature.</para>
<refsect3 id="g-socket-set-blocking.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>blocking</para></entry>
<entry role="parameter_description"><para>Whether to use blocking I/O or not.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-keepalive" role="function" condition="since:2.22">
<title>g_socket_get_keepalive&#160;()</title>
<indexterm zone="g-socket-get-keepalive" role="2.22"><primary sortas="socket_get_keepalive">g_socket_get_keepalive</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_get_keepalive (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the keepalive mode of the socket. For details on this,
see <link linkend="g-socket-set-keepalive"><function>g_socket_set_keepalive()</function></link>.</para>
<refsect3 id="g-socket-get-keepalive.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-keepalive.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if keepalive is active, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-set-keepalive" role="function" condition="since:2.22">
<title>g_socket_set_keepalive&#160;()</title>
<indexterm zone="g-socket-set-keepalive" role="2.22"><primary sortas="socket_set_keepalive">g_socket_set_keepalive</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_socket_set_keepalive (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                        <parameter><link linkend="gboolean"><type>gboolean</type></link> keepalive</parameter>);</programlisting>
<para>Sets or unsets the <link linkend="SO-KEEPALIVE:CAPS"><literal>SO_KEEPALIVE</literal></link> flag on the underlying socket. When
this flag is set on a socket, the system will attempt to verify that the
remote socket endpoint is still present if a sufficiently long period of
time passes with no data being exchanged. If the system is unable to
verify the presence of the remote endpoint, it will automatically close
the connection.</para>
<para>This option is only functional on certain kinds of sockets. (Notably,
<link linkend="G-SOCKET-PROTOCOL-TCP:CAPS"><literal>G_SOCKET_PROTOCOL_TCP</literal></link> sockets.)</para>
<para>The exact time between pings is system- and protocol-dependent, but will
normally be at least two hours. Most commonly, you would set this flag
on a server socket if you want to allow clients to remain idle for long
periods of time, but also want to ensure that connections are eventually
garbage-collected if clients crash or become unreachable.</para>
<refsect3 id="g-socket-set-keepalive.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keepalive</para></entry>
<entry role="parameter_description"><para>Value for the keepalive flag</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-timeout" role="function" condition="since:2.26">
<title>g_socket_get_timeout&#160;()</title>
<indexterm zone="g-socket-get-timeout" role="2.26"><primary sortas="socket_get_timeout">g_socket_get_timeout</primary></indexterm>
<programlisting language="C"><link linkend="guint"><returnvalue>guint</returnvalue></link>
g_socket_get_timeout (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the timeout setting of the socket. For details on this, see
<link linkend="g-socket-set-timeout"><function>g_socket_set_timeout()</function></link>.</para>
<refsect3 id="g-socket-get-timeout.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-timeout.returns" role="returns">
<title>Returns</title>
<para> the timeout in seconds</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-socket-set-timeout" role="function" condition="since:2.26">
<title>g_socket_set_timeout&#160;()</title>
<indexterm zone="g-socket-set-timeout" role="2.26"><primary sortas="socket_set_timeout">g_socket_set_timeout</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_socket_set_timeout (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                      <parameter><link linkend="guint"><type>guint</type></link> timeout</parameter>);</programlisting>
<para>Sets the time in seconds after which I/O operations on <parameter>socket</parameter>
 will
time out if they have not yet completed.</para>
<para>On a blocking socket, this means that any blocking <link linkend="GSocket"><type>GSocket</type></link>
operation will time out after <parameter>timeout</parameter>
 seconds of inactivity,
returning <link linkend="G-IO-ERROR-TIMED-OUT:CAPS"><literal>G_IO_ERROR_TIMED_OUT</literal></link>.</para>
<para>On a non-blocking socket, calls to <link linkend="g-socket-condition-wait"><function>g_socket_condition_wait()</function></link> will
also fail with <link linkend="G-IO-ERROR-TIMED-OUT:CAPS"><literal>G_IO_ERROR_TIMED_OUT</literal></link> after the given time. Sources
created with <link linkend="g-socket-create-source"><function>g_socket_create_source()</function></link> will trigger after
<parameter>timeout</parameter>
 seconds of inactivity, with the requested condition
set, at which point calling <link linkend="g-socket-receive"><function>g_socket_receive()</function></link>, <link linkend="g-socket-send"><function>g_socket_send()</function></link>,
<link linkend="g-socket-check-connect-result"><function>g_socket_check_connect_result()</function></link>, etc, will fail with
<link linkend="G-IO-ERROR-TIMED-OUT:CAPS"><literal>G_IO_ERROR_TIMED_OUT</literal></link>.</para>
<para>If <parameter>timeout</parameter>
 is 0 (the default), operations will never time out
on their own.</para>
<para>Note that if an I/O operation is interrupted by a signal, this may
cause the timeout to be reset.</para>
<refsect3 id="g-socket-set-timeout.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>timeout</para></entry>
<entry role="parameter_description"><para>the timeout for <parameter>socket</parameter>
, in seconds, or 0 for none</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-socket-set-ttl" role="function" condition="since:2.32">
<title>g_socket_set_ttl&#160;()</title>
<indexterm zone="g-socket-set-ttl" role="2.32"><primary sortas="socket_set_ttl">g_socket_set_ttl</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_socket_set_ttl (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                  <parameter><link linkend="guint"><type>guint</type></link> ttl</parameter>);</programlisting>
<para>Sets the time-to-live for outgoing unicast packets on <parameter>socket</parameter>
.
By default the platform-specific default value is used.</para>
<refsect3 id="g-socket-set-ttl.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ttl</para></entry>
<entry role="parameter_description"><para>the time-to-live value for all unicast packets on <parameter>socket</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-get-ttl" role="function" condition="since:2.32">
<title>g_socket_get_ttl&#160;()</title>
<indexterm zone="g-socket-get-ttl" role="2.32"><primary sortas="socket_get_ttl">g_socket_get_ttl</primary></indexterm>
<programlisting language="C"><link linkend="guint"><returnvalue>guint</returnvalue></link>
g_socket_get_ttl (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the unicast time-to-live setting on <parameter>socket</parameter>
; see
<link linkend="g-socket-set-ttl"><function>g_socket_set_ttl()</function></link> for more details.</para>
<refsect3 id="g-socket-get-ttl.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-ttl.returns" role="returns">
<title>Returns</title>
<para> the time-to-live setting on <parameter>socket</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-get-broadcast" role="function" condition="since:2.32">
<title>g_socket_get_broadcast&#160;()</title>
<indexterm zone="g-socket-get-broadcast" role="2.32"><primary sortas="socket_get_broadcast">g_socket_get_broadcast</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_get_broadcast (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the broadcast setting on <parameter>socket</parameter>
; if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>,
it is possible to send packets to broadcast
addresses.</para>
<refsect3 id="g-socket-get-broadcast.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-broadcast.returns" role="returns">
<title>Returns</title>
<para> the broadcast setting on <parameter>socket</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-set-broadcast" role="function" condition="since:2.32">
<title>g_socket_set_broadcast&#160;()</title>
<indexterm zone="g-socket-set-broadcast" role="2.32"><primary sortas="socket_set_broadcast">g_socket_set_broadcast</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_socket_set_broadcast (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                        <parameter><link linkend="gboolean"><type>gboolean</type></link> broadcast</parameter>);</programlisting>
<para>Sets whether <parameter>socket</parameter>
 should allow sending to broadcast addresses.
This is <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> by default.</para>
<refsect3 id="g-socket-set-broadcast.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>broadcast</para></entry>
<entry role="parameter_description"><para>whether <parameter>socket</parameter>
should allow sending to broadcast
addresses</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-get-option" role="function" condition="since:2.36">
<title>g_socket_get_option&#160;()</title>
<indexterm zone="g-socket-get-option" role="2.36"><primary sortas="socket_get_option">g_socket_get_option</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_get_option (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                     <parameter><link linkend="gint"><type>gint</type></link> level</parameter>,
                     <parameter><link linkend="gint"><type>gint</type></link> optname</parameter>,
                     <parameter><link linkend="gint"><type>gint</type></link> *value</parameter>,
                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Gets the value of an integer-valued option on <parameter>socket</parameter>
, as with
<link linkend="getsockopt"><function>getsockopt()</function></link>. (If you need to fetch a  non-integer-valued option,
you will need to call <link linkend="getsockopt"><function>getsockopt()</function></link> directly.)</para>
<para>The <link linkend="gio-gnetworking.h">&amp;lt;gio/gnetworking.h&gt;</link>
header pulls in system headers that will define most of the
standard/portable socket options. For unusual socket protocols or
platform-dependent options, you may need to include additional
headers.</para>
<para>Note that even for socket options that are a single byte in size,
<parameter>value</parameter>
 is still a pointer to a <link linkend="gint"><type>gint</type></link> variable, not a <link linkend="guchar"><type>guchar</type></link>;
<link linkend="g-socket-get-option"><function>g_socket_get_option()</function></link> will handle the conversion internally.</para>
<refsect3 id="g-socket-get-option.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>level</para></entry>
<entry role="parameter_description"><para>the "API level" of the option (eg, <literal>SOL_SOCKET</literal>)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>optname</para></entry>
<entry role="parameter_description"><para>the "name" of the option (eg, <literal>SO_BROADCAST</literal>)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>return location for the option value. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-option.returns" role="returns">
<title>Returns</title>
<para> success or failure. On failure, <parameter>error</parameter>
will be set, and
the system error value (<literal>errno</literal> or <link linkend="WSAGetLastError"><function>WSAGetLastError()</function></link>) will still
be set to the result of the <link linkend="getsockopt"><function>getsockopt()</function></link> call.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.36">2.36</link></para></refsect2>
<refsect2 id="g-socket-set-option" role="function" condition="since:2.36">
<title>g_socket_set_option&#160;()</title>
<indexterm zone="g-socket-set-option" role="2.36"><primary sortas="socket_set_option">g_socket_set_option</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_set_option (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                     <parameter><link linkend="gint"><type>gint</type></link> level</parameter>,
                     <parameter><link linkend="gint"><type>gint</type></link> optname</parameter>,
                     <parameter><link linkend="gint"><type>gint</type></link> value</parameter>,
                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Sets the value of an integer-valued option on <parameter>socket</parameter>
, as with
<link linkend="setsockopt"><function>setsockopt()</function></link>. (If you need to set a non-integer-valued option,
you will need to call <link linkend="setsockopt"><function>setsockopt()</function></link> directly.)</para>
<para>The <link linkend="gio-gnetworking.h">&amp;lt;gio/gnetworking.h&gt;</link>
header pulls in system headers that will define most of the
standard/portable socket options. For unusual socket protocols or
platform-dependent options, you may need to include additional
headers.</para>
<refsect3 id="g-socket-set-option.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>level</para></entry>
<entry role="parameter_description"><para>the "API level" of the option (eg, <literal>SOL_SOCKET</literal>)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>optname</para></entry>
<entry role="parameter_description"><para>the "name" of the option (eg, <literal>SO_BROADCAST</literal>)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set the option to</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-set-option.returns" role="returns">
<title>Returns</title>
<para> success or failure. On failure, <parameter>error</parameter>
will be set, and
the system error value (<literal>errno</literal> or <link linkend="WSAGetLastError"><function>WSAGetLastError()</function></link>) will still
be set to the result of the <link linkend="setsockopt"><function>setsockopt()</function></link> call.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.36">2.36</link></para></refsect2>
<refsect2 id="g-socket-get-family" role="function" condition="since:2.22">
<title>g_socket_get_family&#160;()</title>
<indexterm zone="g-socket-get-family" role="2.22"><primary sortas="socket_get_family">g_socket_get_family</primary></indexterm>
<programlisting language="C"><link linkend="GSocketFamily"><returnvalue>GSocketFamily</returnvalue></link>
g_socket_get_family (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the socket family of the socket.</para>
<refsect3 id="g-socket-get-family.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-family.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GSocketFamily"><type>GSocketFamily</type></link></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-fd" role="function" condition="since:2.22">
<title>g_socket_get_fd&#160;()</title>
<indexterm zone="g-socket-get-fd" role="2.22"><primary sortas="socket_get_fd">g_socket_get_fd</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
g_socket_get_fd (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Returns the underlying OS socket object. On unix this
is a socket file descriptor, and on Windows this is
a Winsock2 SOCKET handle. This may be useful for
doing platform specific or otherwise unusual operations
on the socket.</para>
<refsect3 id="g-socket-get-fd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-fd.returns" role="returns">
<title>Returns</title>
<para> the file descriptor of the socket.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-local-address" role="function" condition="since:2.22">
<title>g_socket_get_local_address&#160;()</title>
<indexterm zone="g-socket-get-local-address" role="2.22"><primary sortas="socket_get_local_address">g_socket_get_local_address</primary></indexterm>
<programlisting language="C"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
g_socket_get_local_address (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                            <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Try to get the local address of a bound socket. This is only
useful if the socket has been bound to a local address,
either explicitly or implicitly when connecting.</para>
<refsect3 id="g-socket-get-local-address.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-local-address.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GSocketAddress"><type>GSocketAddress</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-protocol" role="function" condition="since:2.22">
<title>g_socket_get_protocol&#160;()</title>
<indexterm zone="g-socket-get-protocol" role="2.22"><primary sortas="socket_get_protocol">g_socket_get_protocol</primary></indexterm>
<programlisting language="C"><link linkend="GSocketProtocol"><returnvalue>GSocketProtocol</returnvalue></link>
g_socket_get_protocol (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the socket protocol id the socket was created with.
In case the protocol is unknown, -1 is returned.</para>
<refsect3 id="g-socket-get-protocol.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-protocol.returns" role="returns">
<title>Returns</title>
<para> a protocol id, or -1 if unknown</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-remote-address" role="function" condition="since:2.22">
<title>g_socket_get_remote_address&#160;()</title>
<indexterm zone="g-socket-get-remote-address" role="2.22"><primary sortas="socket_get_remote_address">g_socket_get_remote_address</primary></indexterm>
<programlisting language="C"><link linkend="GSocketAddress"><returnvalue>GSocketAddress</returnvalue></link>&#160;*
g_socket_get_remote_address (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                             <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Try to get the remote address of a connected socket. This is only
useful for connection oriented sockets that have been connected.</para>
<refsect3 id="g-socket-get-remote-address.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-remote-address.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GSocketAddress"><type>GSocketAddress</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-socket-type" role="function" condition="since:2.22">
<title>g_socket_get_socket_type&#160;()</title>
<indexterm zone="g-socket-get-socket-type" role="2.22"><primary sortas="socket_get_socket_type">g_socket_get_socket_type</primary></indexterm>
<programlisting language="C"><link linkend="GSocketType"><returnvalue>GSocketType</returnvalue></link>
g_socket_get_socket_type (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the socket type of the socket.</para>
<refsect3 id="g-socket-get-socket-type.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-socket-type.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GSocketType"><type>GSocketType</type></link></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-speaks-ipv4" role="function" condition="since:2.22">
<title>g_socket_speaks_ipv4&#160;()</title>
<indexterm zone="g-socket-speaks-ipv4" role="2.22"><primary sortas="socket_speaks_ipv4">g_socket_speaks_ipv4</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_speaks_ipv4 (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Checks if a socket is capable of speaking IPv4.</para>
<para>IPv4 sockets are capable of speaking IPv4.  On some operating systems
and under some combinations of circumstances IPv6 sockets are also
capable of speaking IPv4.  See RFC 3493 section 3.7 for more
information.</para>
<para>No other types of sockets are currently considered as being capable
of speaking IPv4.</para>
<refsect3 id="g-socket-speaks-ipv4.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-speaks-ipv4.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if this socket can be used with IPv4.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-socket-get-credentials" role="function" condition="since:2.26">
<title>g_socket_get_credentials&#160;()</title>
<indexterm zone="g-socket-get-credentials" role="2.26"><primary sortas="socket_get_credentials">g_socket_get_credentials</primary></indexterm>
<programlisting language="C"><link linkend="GCredentials"><returnvalue>GCredentials</returnvalue></link>&#160;*
g_socket_get_credentials (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                          <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Returns the credentials of the foreign process connected to this
socket, if any (e.g. it is only supported for <link linkend="G-SOCKET-FAMILY-UNIX:CAPS"><literal>G_SOCKET_FAMILY_UNIX</literal></link>
sockets).</para>
<para>If this operation isn't supported on the OS, the method fails with
the <link linkend="G-IO-ERROR-NOT-SUPPORTED:CAPS"><literal>G_IO_ERROR_NOT_SUPPORTED</literal></link> error. On Linux this is implemented
by reading the <link linkend="SO-PEERCRED:CAPS"><literal>SO_PEERCRED</literal></link> option on the underlying socket.</para>
<para>Other ways to obtain credentials from a foreign peer includes the
<link linkend="GUnixCredentialsMessage"><type>GUnixCredentialsMessage</type></link> type and
<link linkend="g-unix-connection-send-credentials"><function>g_unix_connection_send_credentials()</function></link> /
<link linkend="g-unix-connection-receive-credentials"><function>g_unix_connection_receive_credentials()</function></link> functions.</para>
<refsect3 id="g-socket-get-credentials.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-credentials.returns" role="returns">
<title>Returns</title>
<para><link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>error</parameter>
is set, otherwise a <link linkend="GCredentials"><type>GCredentials</type></link> object
that must be freed with <link linkend="g-object-unref"><function>g_object_unref()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-socket-join-multicast-group" role="function" condition="since:2.32">
<title>g_socket_join_multicast_group&#160;()</title>
<indexterm zone="g-socket-join-multicast-group" role="2.32"><primary sortas="socket_join_multicast_group">g_socket_join_multicast_group</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_join_multicast_group (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                               <parameter><link linkend="GInetAddress"><type>GInetAddress</type></link> *group</parameter>,
                               <parameter><link linkend="gboolean"><type>gboolean</type></link> source_specific</parameter>,
                               <parameter>const <link linkend="gchar"><type>gchar</type></link> *iface</parameter>,
                               <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Registers <parameter>socket</parameter>
 to receive multicast messages sent to <parameter>group</parameter>
.
<parameter>socket</parameter>
 must be a <link linkend="G-SOCKET-TYPE-DATAGRAM:CAPS"><literal>G_SOCKET_TYPE_DATAGRAM</literal></link> socket, and must have
been bound to an appropriate interface and port with
<link linkend="g-socket-bind"><function>g_socket_bind()</function></link>.</para>
<para>If <parameter>iface</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the system will automatically pick an interface
to bind to based on <parameter>group</parameter>
.</para>
<para>If <parameter>source_specific</parameter>
 is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, source-specific multicast as defined
in RFC 4604 is used. Note that on older platforms this may fail
with a <link linkend="G-IO-ERROR-NOT-SUPPORTED:CAPS"><literal>G_IO_ERROR_NOT_SUPPORTED</literal></link> error.</para>
<para>To bind to a given source-specific multicast address, use
<link linkend="g-socket-join-multicast-group-ssm"><function>g_socket_join_multicast_group_ssm()</function></link> instead.</para>
<refsect3 id="g-socket-join-multicast-group.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>group</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetAddress"><type>GInetAddress</type></link> specifying the group address to join.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>iface</para></entry>
<entry role="parameter_description"><para>Name of the interface to use, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>source_specific</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if source-specific multicast should be used</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-join-multicast-group.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-leave-multicast-group" role="function" condition="since:2.32">
<title>g_socket_leave_multicast_group&#160;()</title>
<indexterm zone="g-socket-leave-multicast-group" role="2.32"><primary sortas="socket_leave_multicast_group">g_socket_leave_multicast_group</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_leave_multicast_group (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                                <parameter><link linkend="GInetAddress"><type>GInetAddress</type></link> *group</parameter>,
                                <parameter><link linkend="gboolean"><type>gboolean</type></link> source_specific</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *iface</parameter>,
                                <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Removes <parameter>socket</parameter>
 from the multicast group defined by <parameter>group</parameter>
, <parameter>iface</parameter>
,
and <parameter>source_specific</parameter>
 (which must all have the same values they had
when you joined the group).</para>
<para><parameter>socket</parameter>
 remains bound to its address and port, and can still receive
unicast messages after calling this.</para>
<para>To unbind to a given source-specific multicast address, use
<link linkend="g-socket-leave-multicast-group-ssm"><function>g_socket_leave_multicast_group_ssm()</function></link> instead.</para>
<refsect3 id="g-socket-leave-multicast-group.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>group</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetAddress"><type>GInetAddress</type></link> specifying the group address to leave.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>iface</para></entry>
<entry role="parameter_description"><para>Interface used. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>source_specific</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if source-specific multicast was used</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-leave-multicast-group.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-join-multicast-group-ssm" role="function" condition="since:2.56">
<title>g_socket_join_multicast_group_ssm&#160;()</title>
<indexterm zone="g-socket-join-multicast-group-ssm" role="2.56"><primary sortas="socket_join_multicast_group_ssm">g_socket_join_multicast_group_ssm</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_join_multicast_group_ssm (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                                   <parameter><link linkend="GInetAddress"><type>GInetAddress</type></link> *group</parameter>,
                                   <parameter><link linkend="GInetAddress"><type>GInetAddress</type></link> *source_specific</parameter>,
                                   <parameter>const <link linkend="gchar"><type>gchar</type></link> *iface</parameter>,
                                   <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Registers <parameter>socket</parameter>
 to receive multicast messages sent to <parameter>group</parameter>
.
<parameter>socket</parameter>
 must be a <link linkend="G-SOCKET-TYPE-DATAGRAM:CAPS"><literal>G_SOCKET_TYPE_DATAGRAM</literal></link> socket, and must have
been bound to an appropriate interface and port with
<link linkend="g-socket-bind"><function>g_socket_bind()</function></link>.</para>
<para>If <parameter>iface</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the system will automatically pick an interface
to bind to based on <parameter>group</parameter>
.</para>
<para>If <parameter>source_specific</parameter>
 is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, use source-specific multicast as
defined in RFC 4604. Note that on older platforms this may fail
with a <link linkend="G-IO-ERROR-NOT-SUPPORTED:CAPS"><literal>G_IO_ERROR_NOT_SUPPORTED</literal></link> error.</para>
<para>Note that this function can be called multiple times for the same
<parameter>group</parameter>
 with different <parameter>source_specific</parameter>
 in order to receive multicast
packets from more than one source.</para>
<refsect3 id="g-socket-join-multicast-group-ssm.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>group</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetAddress"><type>GInetAddress</type></link> specifying the group address to join.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>source_specific</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetAddress"><type>GInetAddress</type></link> specifying the
source-specific multicast address or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>iface</para></entry>
<entry role="parameter_description"><para>Name of the interface to use, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-join-multicast-group-ssm.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.56">2.56</link></para></refsect2>
<refsect2 id="g-socket-leave-multicast-group-ssm" role="function" condition="since:2.56">
<title>g_socket_leave_multicast_group_ssm&#160;()</title>
<indexterm zone="g-socket-leave-multicast-group-ssm" role="2.56"><primary sortas="socket_leave_multicast_group_ssm">g_socket_leave_multicast_group_ssm</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_leave_multicast_group_ssm (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                                    <parameter><link linkend="GInetAddress"><type>GInetAddress</type></link> *group</parameter>,
                                    <parameter><link linkend="GInetAddress"><type>GInetAddress</type></link> *source_specific</parameter>,
                                    <parameter>const <link linkend="gchar"><type>gchar</type></link> *iface</parameter>,
                                    <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Removes <parameter>socket</parameter>
 from the multicast group defined by <parameter>group</parameter>
, <parameter>iface</parameter>
,
and <parameter>source_specific</parameter>
 (which must all have the same values they had
when you joined the group).</para>
<para><parameter>socket</parameter>
 remains bound to its address and port, and can still receive
unicast messages after calling this.</para>
<refsect3 id="g-socket-leave-multicast-group-ssm.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>group</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetAddress"><type>GInetAddress</type></link> specifying the group address to leave.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>source_specific</para></entry>
<entry role="parameter_description"><para>a <link linkend="GInetAddress"><type>GInetAddress</type></link> specifying the
source-specific multicast address or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>iface</para></entry>
<entry role="parameter_description"><para>Name of the interface to use, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para><link linkend="GError"><type>GError</type></link> for error reporting, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-leave-multicast-group-ssm.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.56">2.56</link></para></refsect2>
<refsect2 id="g-socket-get-multicast-loopback" role="function" condition="since:2.32">
<title>g_socket_get_multicast_loopback&#160;()</title>
<indexterm zone="g-socket-get-multicast-loopback" role="2.32"><primary sortas="socket_get_multicast_loopback">g_socket_get_multicast_loopback</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_socket_get_multicast_loopback (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the multicast loopback setting on <parameter>socket</parameter>
; if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> (the
default), outgoing multicast packets will be looped back to
multicast listeners on the same host.</para>
<refsect3 id="g-socket-get-multicast-loopback.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-multicast-loopback.returns" role="returns">
<title>Returns</title>
<para> the multicast loopback setting on <parameter>socket</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-set-multicast-loopback" role="function" condition="since:2.32">
<title>g_socket_set_multicast_loopback&#160;()</title>
<indexterm zone="g-socket-set-multicast-loopback" role="2.32"><primary sortas="socket_set_multicast_loopback">g_socket_set_multicast_loopback</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_socket_set_multicast_loopback (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                                 <parameter><link linkend="gboolean"><type>gboolean</type></link> loopback</parameter>);</programlisting>
<para>Sets whether outgoing multicast packets will be received by sockets
listening on that multicast address on the same host. This is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
by default.</para>
<refsect3 id="g-socket-set-multicast-loopback.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>loopback</para></entry>
<entry role="parameter_description"><para>whether <parameter>socket</parameter>
should receive messages sent to its
multicast groups from the local host</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-get-multicast-ttl" role="function" condition="since:2.32">
<title>g_socket_get_multicast_ttl&#160;()</title>
<indexterm zone="g-socket-get-multicast-ttl" role="2.32"><primary sortas="socket_get_multicast_ttl">g_socket_get_multicast_ttl</primary></indexterm>
<programlisting language="C"><link linkend="guint"><returnvalue>guint</returnvalue></link>
g_socket_get_multicast_ttl (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>);</programlisting>
<para>Gets the multicast time-to-live setting on <parameter>socket</parameter>
; see
<link linkend="g-socket-set-multicast-ttl"><function>g_socket_set_multicast_ttl()</function></link> for more details.</para>
<refsect3 id="g-socket-get-multicast-ttl.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-socket-get-multicast-ttl.returns" role="returns">
<title>Returns</title>
<para> the multicast time-to-live setting on <parameter>socket</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-socket-set-multicast-ttl" role="function" condition="since:2.32">
<title>g_socket_set_multicast_ttl&#160;()</title>
<indexterm zone="g-socket-set-multicast-ttl" role="2.32"><primary sortas="socket_set_multicast_ttl">g_socket_set_multicast_ttl</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_socket_set_multicast_ttl (<parameter><link linkend="GSocket"><type>GSocket</type></link> *socket</parameter>,
                            <parameter><link linkend="guint"><type>guint</type></link> ttl</parameter>);</programlisting>
<para>Sets the time-to-live for outgoing multicast datagrams on <parameter>socket</parameter>
.
By default, this is 1, meaning that multicast packets will not leave
the local network.</para>
<refsect3 id="g-socket-set-multicast-ttl.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>socket</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSocket"><type>GSocket</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ttl</para></entry>
<entry role="parameter_description"><para>the time-to-live value for all multicast datagrams on <parameter>socket</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>

</refsect1>
<refsect1 id="GSocket.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GSocket-struct" role="struct">
<title>GSocket</title>
<indexterm zone="GSocket-struct" role="2.22"><primary sortas="Socket">GSocket</primary></indexterm>
<programlisting language="C">typedef struct _GSocket GSocket;</programlisting>
<para>A lowlevel network socket object.</para>
<para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="GSocketType" role="enum" condition="since:2.22">
<title>enum GSocketType</title>
<indexterm zone="GSocketType" role="2.22"><primary sortas="SocketType">GSocketType</primary></indexterm>
<para>Flags used when creating a <link linkend="GSocket"><type>GSocket</type></link>. Some protocols may not implement
all the socket types.</para>
<refsect3 id="GSocketType.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-TYPE-INVALID:CAPS">G_SOCKET_TYPE_INVALID</para></entry>
<entry role="enum_member_description"><para>Type unknown or wrong</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-TYPE-STREAM:CAPS">G_SOCKET_TYPE_STREAM</para></entry>
<entry role="enum_member_description"><para>Reliable connection-based byte streams (e.g. TCP).</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-TYPE-DATAGRAM:CAPS">G_SOCKET_TYPE_DATAGRAM</para></entry>
<entry role="enum_member_description"><para>Connectionless, unreliable datagram passing.
    (e.g. UDP)</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-TYPE-SEQPACKET:CAPS">G_SOCKET_TYPE_SEQPACKET</para></entry>
<entry role="enum_member_description"><para>Reliable connection-based passing of datagrams
    of fixed maximum length (e.g. SCTP).</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="GSocketProtocol" role="enum" condition="since:2.22">
<title>enum GSocketProtocol</title>
<indexterm zone="GSocketProtocol" role="2.22"><primary sortas="SocketProtocol">GSocketProtocol</primary></indexterm>
<para>A protocol identifier is specified when creating a <link linkend="GSocket"><type>GSocket</type></link>, which is a
family/type specific identifier, where 0 means the default protocol for
the particular family/type.</para>
<para>This enum contains a set of commonly available and used protocols. You
can also pass any other identifiers handled by the platform in order to
use protocols not listed here.</para>
<refsect3 id="GSocketProtocol.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-PROTOCOL-UNKNOWN:CAPS">G_SOCKET_PROTOCOL_UNKNOWN</para></entry>
<entry role="enum_member_description"><para>The protocol type is unknown</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-PROTOCOL-DEFAULT:CAPS">G_SOCKET_PROTOCOL_DEFAULT</para></entry>
<entry role="enum_member_description"><para>The default protocol for the family/type</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-PROTOCOL-TCP:CAPS">G_SOCKET_PROTOCOL_TCP</para></entry>
<entry role="enum_member_description"><para>TCP over IP</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-PROTOCOL-UDP:CAPS">G_SOCKET_PROTOCOL_UDP</para></entry>
<entry role="enum_member_description"><para>UDP over IP</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-PROTOCOL-SCTP:CAPS">G_SOCKET_PROTOCOL_SCTP</para></entry>
<entry role="enum_member_description"><para>SCTP over IP</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="GSocketMsgFlags" role="enum" condition="since:2.22">
<title>enum GSocketMsgFlags</title>
<indexterm zone="GSocketMsgFlags" role="2.22"><primary sortas="SocketMsgFlags">GSocketMsgFlags</primary></indexterm>
<para>Flags used in <link linkend="g-socket-receive-message"><function>g_socket_receive_message()</function></link> and <link linkend="g-socket-send-message"><function>g_socket_send_message()</function></link>.
The flags listed in the enum are some commonly available flags, but the
values used for them are the same as on the platform, and any other flags
are passed in/out as is. So to use a platform specific flag, just include
the right system header and pass in the flag.</para>
<refsect3 id="GSocketMsgFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-MSG-NONE:CAPS">G_SOCKET_MSG_NONE</para></entry>
<entry role="enum_member_description"><para>No flags.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-MSG-OOB:CAPS">G_SOCKET_MSG_OOB</para></entry>
<entry role="enum_member_description"><para>Request to send/receive out of band data.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-MSG-PEEK:CAPS">G_SOCKET_MSG_PEEK</para></entry>
<entry role="enum_member_description"><para>Read data from the socket without removing it from
    the queue.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SOCKET-MSG-DONTROUTE:CAPS">G_SOCKET_MSG_DONTROUTE</para></entry>
<entry role="enum_member_description"><para>Don't use a gateway to send out the packet,
    only send to hosts on directly connected networks.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="GInputVector" role="struct" condition="since:2.22">
<title>struct GInputVector</title>
<indexterm zone="GInputVector" role="2.22"><primary sortas="InputVector">GInputVector</primary></indexterm>
<programlisting language="C">struct GInputVector {
  gpointer buffer;
  gsize size;
};
</programlisting>
<para>Structure used for scatter/gather data input.
You generally pass in an array of <link linkend="GInputVectors"><type>GInputVectors</type></link>
and the operation will store the read data starting in the
first buffer, switching to the next as needed.</para>
<refsect3 id="GInputVector.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="gpointer"><type>gpointer</type></link>&#160;<structfield id="GInputVector.buffer">buffer</structfield>;</para></entry>
<entry role="struct_member_description"><para>Pointer to a buffer where data will be written.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="gsize"><type>gsize</type></link>&#160;<structfield id="GInputVector.size">size</structfield>;</para></entry>
<entry role="struct_member_description"><para>the available size in <parameter>buffer</parameter>
.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
<para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="GInputMessage" role="struct" condition="since:2.48">
<title>struct GInputMessage</title>
<indexterm zone="GInputMessage" role="2.48"><primary sortas="InputMessage">GInputMessage</primary></indexterm>
<programlisting language="C">struct GInputMessage {
  GSocketAddress         **address;

  GInputVector            *vectors;
  guint                    num_vectors;

  gsize                    bytes_received;
  gint                     flags;

  GSocketControlMessage ***control_messages;
  guint                   *num_control_messages;
};
</programlisting>
<para>Structure used for scatter/gather data input when receiving multiple
messages or packets in one go. You generally pass in an array of empty
<link linkend="GInputVectors"><type>GInputVectors</type></link> and the operation will use all the buffers as if they
were one buffer, and will set <parameter>bytes_received</parameter>
 to the total number of bytes
received across all <link linkend="GInputVectors"><type>GInputVectors</type></link>.</para>
<para>This structure closely mirrors <literal>struct mmsghdr</literal> and <literal>struct msghdr</literal> from
the POSIX sockets API (see <literal>man 2 recvmmsg</literal>).</para>
<para>If <parameter>address</parameter>
 is non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> then it is set to the source address the message
was received from, and the caller must free it afterwards.</para>
<para>If <parameter>control_messages</parameter>
 is non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> then it is set to an array of control
messages received with the message (if any), and the caller must free it
afterwards. <parameter>num_control_messages</parameter>
 is set to the number of elements in
this array, which may be zero.</para>
<para>Flags relevant to this message will be returned in <parameter>flags</parameter>
. For example,
<literal>MSG_EOR</literal> or <literal>MSG_TRUNC</literal>.</para>
<refsect3 id="GInputMessage.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="GSocketAddress"><type>GSocketAddress</type></link>&#160;**<structfield id="GInputMessage.address">address</structfield>;</para></entry>
<entry role="struct_member_description"><para>return location
for a <link linkend="GSocketAddress"><type>GSocketAddress</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="struct_member_annotations"><emphasis role="annotation">[<acronym>optional</acronym>][<acronym>out</acronym>][<acronym>transfer full</acronym>]</emphasis></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GInputVector"><type>GInputVector</type></link>&#160;*<structfield id="GInputMessage.vectors">vectors</structfield>;</para></entry>
<entry role="struct_member_description"><para>pointer to an
array of input vectors. </para></entry>
<entry role="struct_member_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=num_vectors][<acronym>out</acronym>]</emphasis></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="guint"><type>guint</type></link>&#160;<structfield id="GInputMessage.num-vectors">num_vectors</structfield>;</para></entry>
<entry role="struct_member_description"><para>the number of input vectors pointed to by <parameter>vectors</parameter>
</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="gsize"><type>gsize</type></link>&#160;<structfield id="GInputMessage.bytes-received">bytes_received</structfield>;</para></entry>
<entry role="struct_member_description"><para>will be set to the number of bytes that have been
received. </para></entry>
<entry role="struct_member_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="gint"><type>gint</type></link>&#160;<structfield id="GInputMessage.flags">flags</structfield>;</para></entry>
<entry role="struct_member_description"><para>collection of <link linkend="GSocketMsgFlags"><type>GSocketMsgFlags</type></link> for the received message,
outputted by the call. </para></entry>
<entry role="struct_member_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GSocketControlMessage"><type>GSocketControlMessage</type></link>&#160;***<structfield id="GInputMessage.control-messages">control_messages</structfield>;</para></entry>
<entry role="struct_member_description"><para>(array length=num_control_messages) (optional)
(out) (transfer full): return location for a
caller-allocated array of <link linkend="GSocketControlMessages"><type>GSocketControlMessages</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="guint"><type>guint</type></link>&#160;*<structfield id="GInputMessage.num-control-messages">num_control_messages</structfield>;</para></entry>
<entry role="struct_member_description"><para>return location for the number of
elements in <parameter>control_messages</parameter>
. </para></entry>
<entry role="struct_member_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>optional</acronym>]</emphasis></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
<para role="since">Since: <link linkend="api-index-2.48">2.48</link></para></refsect2>
<refsect2 id="GOutputVector" role="struct" condition="since:2.22">
<title>struct GOutputVector</title>
<indexterm zone="GOutputVector" role="2.22"><primary sortas="OutputVector">GOutputVector</primary></indexterm>
<programlisting language="C">struct GOutputVector {
  gconstpointer buffer;
  gsize size;
};
</programlisting>
<para>Structure used for scatter/gather data output.
You generally pass in an array of <link linkend="GOutputVectors"><type>GOutputVectors</type></link>
and the operation will use all the buffers as if they were
one buffer.</para>
<refsect3 id="GOutputVector.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="gconstpointer"><type>gconstpointer</type></link>&#160;<structfield id="GOutputVector.buffer">buffer</structfield>;</para></entry>
<entry role="struct_member_description"><para>Pointer to a buffer of data to read.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="gsize"><type>gsize</type></link>&#160;<structfield id="GOutputVector.size">size</structfield>;</para></entry>
<entry role="struct_member_description"><para>the size of <parameter>buffer</parameter>
.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
<para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="GOutputMessage" role="struct" condition="since:2.44">
<title>struct GOutputMessage</title>
<indexterm zone="GOutputMessage" role="2.44"><primary sortas="OutputMessage">GOutputMessage</primary></indexterm>
<programlisting language="C">struct GOutputMessage {
  GSocketAddress         *address;

  GOutputVector          *vectors;
  guint                   num_vectors;

  guint                   bytes_sent;

  GSocketControlMessage **control_messages;
  guint                   num_control_messages;
};
</programlisting>
<para>Structure used for scatter/gather data output when sending multiple
messages or packets in one go. You generally pass in an array of
<link linkend="GOutputVectors"><type>GOutputVectors</type></link> and the operation will use all the buffers as if they
were one buffer.</para>
<para>If <parameter>address</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then the message is sent to the default receiver
(as previously set by <link linkend="g-socket-connect"><function>g_socket_connect()</function></link>).</para>
<refsect3 id="GOutputMessage.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="GSocketAddress"><type>GSocketAddress</type></link>&#160;*<structfield id="GOutputMessage.address">address</structfield>;</para></entry>
<entry role="struct_member_description"><para>a <link linkend="GSocketAddress"><type>GSocketAddress</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="struct_member_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GOutputVector"><type>GOutputVector</type></link>&#160;*<structfield id="GOutputMessage.vectors">vectors</structfield>;</para></entry>
<entry role="struct_member_description"><para>pointer to an array of output vectors</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="guint"><type>guint</type></link>&#160;<structfield id="GOutputMessage.num-vectors">num_vectors</structfield>;</para></entry>
<entry role="struct_member_description"><para>the number of output vectors pointed to by <parameter>vectors</parameter>
.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="guint"><type>guint</type></link>&#160;<structfield id="GOutputMessage.bytes-sent">bytes_sent</structfield>;</para></entry>
<entry role="struct_member_description"><para>initialize to 0. Will be set to the number of bytes
that have been sent</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GSocketControlMessage"><type>GSocketControlMessage</type></link>&#160;**<structfield id="GOutputMessage.control-messages">control_messages</structfield>;</para></entry>
<entry role="struct_member_description"><para>a pointer
to an array of <link linkend="GSocketControlMessages"><type>GSocketControlMessages</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="struct_member_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=num_control_messages][<acronym>nullable</acronym>]</emphasis></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="guint"><type>guint</type></link>&#160;<structfield id="GOutputMessage.num-control-messages">num_control_messages</structfield>;</para></entry>
<entry role="struct_member_description"><para>number of elements in <parameter>control_messages</parameter>
.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
<para role="since">Since: <link linkend="api-index-2.44">2.44</link></para></refsect2>

</refsect1>
<refsect1 id="GSocket.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GSocket--blocking" role="property"><title>The <literal>“blocking”</literal> property</title>
<indexterm zone="GSocket--blocking"><primary sortas="Socket:blocking">GSocket:blocking</primary></indexterm>
<programlisting>  “blocking”                 <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>Whether or not I/O on this socket is blocking.</para><para>Flags: Read / Write</para>
<para>Default value: TRUE</para>
</refsect2>
<refsect2 id="GSocket--broadcast" role="property"><title>The <literal>“broadcast”</literal> property</title>
<indexterm zone="GSocket--broadcast" role="2.32"><primary sortas="Socket:broadcast">GSocket:broadcast</primary></indexterm>
<programlisting>  “broadcast”                <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>Whether the socket should allow sending to broadcast addresses.</para>
<para>Flags: Read / Write</para>
<para>Default value: FALSE</para>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="GSocket--family" role="property"><title>The <literal>“family”</literal> property</title>
<indexterm zone="GSocket--family"><primary sortas="Socket:family">GSocket:family</primary></indexterm>
<programlisting>  “family”                   <link linkend="GSocketFamily"><type>GSocketFamily</type></link></programlisting>
<para>The sockets address family.</para><para>Flags: Read / Write / Construct Only</para>
<para>Default value: G_SOCKET_FAMILY_INVALID</para>
</refsect2>
<refsect2 id="GSocket--fd" role="property"><title>The <literal>“fd”</literal> property</title>
<indexterm zone="GSocket--fd"><primary sortas="Socket:fd">GSocket:fd</primary></indexterm>
<programlisting>  “fd”                       <link linkend="gint"><type>gint</type></link></programlisting>
<para>The sockets file descriptor.</para><para>Flags: Read / Write / Construct Only</para>
<para>Default value: -1</para>
</refsect2>
<refsect2 id="GSocket--keepalive" role="property"><title>The <literal>“keepalive”</literal> property</title>
<indexterm zone="GSocket--keepalive"><primary sortas="Socket:keepalive">GSocket:keepalive</primary></indexterm>
<programlisting>  “keepalive”                <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>Keep connection alive by sending periodic pings.</para><para>Flags: Read / Write</para>
<para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GSocket--listen-backlog" role="property"><title>The <literal>“listen-backlog”</literal> property</title>
<indexterm zone="GSocket--listen-backlog"><primary sortas="Socket:listen-backlog">GSocket:listen-backlog</primary></indexterm>
<programlisting>  “listen-backlog”           <link linkend="gint"><type>gint</type></link></programlisting>
<para>Outstanding connections in the listen queue.</para><para>Flags: Read / Write</para>
<para>Allowed values: [0,128]</para>
<para>Default value: 10</para>
</refsect2>
<refsect2 id="GSocket--local-address" role="property"><title>The <literal>“local-address”</literal> property</title>
<indexterm zone="GSocket--local-address"><primary sortas="Socket:local-address">GSocket:local-address</primary></indexterm>
<programlisting>  “local-address”            <link linkend="GSocketAddress"><type>GSocketAddress</type></link>&#160;*</programlisting>
<para>The local address the socket is bound to.</para><para>Flags: Read</para>
</refsect2>
<refsect2 id="GSocket--multicast-loopback" role="property"><title>The <literal>“multicast-loopback”</literal> property</title>
<indexterm zone="GSocket--multicast-loopback" role="2.32"><primary sortas="Socket:multicast-loopback">GSocket:multicast-loopback</primary></indexterm>
<programlisting>  “multicast-loopback”       <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>Whether outgoing multicast packets loop back to the local host.</para>
<para>Flags: Read / Write</para>
<para>Default value: TRUE</para>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="GSocket--multicast-ttl" role="property"><title>The <literal>“multicast-ttl”</literal> property</title>
<indexterm zone="GSocket--multicast-ttl" role="2.32"><primary sortas="Socket:multicast-ttl">GSocket:multicast-ttl</primary></indexterm>
<programlisting>  “multicast-ttl”            <link linkend="guint"><type>guint</type></link></programlisting>
<para>Time-to-live out outgoing multicast packets</para>
<para>Flags: Read / Write</para>
<para>Default value: 1</para>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="GSocket--protocol" role="property"><title>The <literal>“protocol”</literal> property</title>
<indexterm zone="GSocket--protocol"><primary sortas="Socket:protocol">GSocket:protocol</primary></indexterm>
<programlisting>  “protocol”                 <link linkend="GSocketProtocol"><type>GSocketProtocol</type></link></programlisting>
<para>The id of the protocol to use, or -1 for unknown.</para><para>Flags: Read / Write / Construct Only</para>
<para>Default value: G_SOCKET_PROTOCOL_UNKNOWN</para>
</refsect2>
<refsect2 id="GSocket--remote-address" role="property"><title>The <literal>“remote-address”</literal> property</title>
<indexterm zone="GSocket--remote-address"><primary sortas="Socket:remote-address">GSocket:remote-address</primary></indexterm>
<programlisting>  “remote-address”           <link linkend="GSocketAddress"><type>GSocketAddress</type></link>&#160;*</programlisting>
<para>The remote address the socket is connected to.</para><para>Flags: Read</para>
</refsect2>
<refsect2 id="GSocket--timeout" role="property"><title>The <literal>“timeout”</literal> property</title>
<indexterm zone="GSocket--timeout" role="2.26"><primary sortas="Socket:timeout">GSocket:timeout</primary></indexterm>
<programlisting>  “timeout”                  <link linkend="guint"><type>guint</type></link></programlisting>
<para>The timeout in seconds on socket I/O</para>
<para>Flags: Read / Write</para>
<para>Default value: 0</para>
<para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="GSocket--ttl" role="property"><title>The <literal>“ttl”</literal> property</title>
<indexterm zone="GSocket--ttl" role="2.32"><primary sortas="Socket:ttl">GSocket:ttl</primary></indexterm>
<programlisting>  “ttl”                      <link linkend="guint"><type>guint</type></link></programlisting>
<para>Time-to-live for outgoing unicast packets</para>
<para>Flags: Read / Write</para>
<para>Default value: 0</para>
<para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="GSocket--type" role="property"><title>The <literal>“type”</literal> property</title>
<indexterm zone="GSocket--type"><primary sortas="Socket:type">GSocket:type</primary></indexterm>
<programlisting>  “type”                     <link linkend="GSocketType"><type>GSocketType</type></link></programlisting>
<para>The sockets type.</para><para>Flags: Read / Write / Construct Only</para>
<para>Default value: G_SOCKET_TYPE_STREAM</para>
</refsect2>

</refsect1>
<refsect1 id="GSocket.see-also">
<title>See Also</title>
<para><link linkend="GInitable"><type>GInitable</type></link>, <link linkend="gio-gnetworking.h">&amp;lt;gnetworking.h&gt;</link></para>

</refsect1>

</refentry>
