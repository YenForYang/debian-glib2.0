<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GMount">
<refmeta>
<refentrytitle role="top_of_page" id="GMount.top_of_page">GMount</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GMount</refname>
<refpurpose>Mount management</refpurpose>
</refnamediv>

<refsect1 id="GMount.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-name">g_mount_get_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-uuid">g_mount_get_uuid</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-icon">g_mount_get_icon</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-symbolic-icon">g_mount_get_symbolic_icon</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GDrive"><returnvalue>GDrive</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-drive">g_mount_get_drive</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-root">g_mount_get_root</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GVolume"><returnvalue>GVolume</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-volume">g_mount_get_volume</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-default-location">g_mount_get_default_location</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-can-unmount">g_mount_can_unmount</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-unmount">g_mount_unmount</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-unmount-finish">g_mount_unmount_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-unmount-with-operation">g_mount_unmount_with_operation</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-unmount-with-operation-finish">g_mount_unmount_with_operation_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-remount">g_mount_remount</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-remount-finish">g_mount_remount_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-can-eject">g_mount_can_eject</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-eject">g_mount_eject</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-eject-finish">g_mount_eject_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-eject-with-operation">g_mount_eject_with_operation</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-eject-with-operation-finish">g_mount_eject_with_operation_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-guess-content-type">g_mount_guess_content_type</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-mount-guess-content-type-finish">g_mount_guess_content_type_finish</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-mount-guess-content-type-sync">g_mount_guess_content_type_sync</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-is-shadowed">g_mount_is_shadowed</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-shadow">g_mount_shadow</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-mount-unshadow">g_mount_unshadow</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-mount-get-sort-key">g_mount_get_sort_key</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GMount.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="signals_return" colwidth="150px"/>
<colspec colname="signals_name" colwidth="300px"/>
<colspec colname="signals_flags" colwidth="200px"/>
<tbody>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GMount-changed">changed</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GMount-pre-unmount">pre-unmount</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GMount-unmounted">unmounted</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GMount.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GMount-struct">GMount</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GMountIface">GMountIface</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GMountMountFlags">GMountMountFlags</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GMountUnmountFlags">GMountUnmountFlags</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GMount.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GFlags">GFlags</link>
    <phrase role="lineart">&#9500;&#9472;&#9472;</phrase> GMountMountFlags
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GMountUnmountFlags
    <link linkend="GInterface">GInterface</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GMount
</screen>
</refsect1>
<refsect1 id="GMount.prerequisites" role="prerequisites">
<title role="prerequisites.title">Prerequisites</title>
<para>
GMount requires
 <link linkend="GObject">GObject</link>.</para>

</refsect1>

<refsect1 id="GMount.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GMount.description" role="desc">
<title role="desc.title">Description</title>
<para>The <link linkend="GMount"><type>GMount</type></link> interface represents user-visible mounts. Note, when 
porting from GnomeVFS, <link linkend="GMount"><type>GMount</type></link> is the moral equivalent of <link linkend="GnomeVFSVolume"><type>GnomeVFSVolume</type></link>.</para>
<para><link linkend="GMount"><type>GMount</type></link> is a "mounted" filesystem that you can access. Mounted is in
quotes because it's not the same as a unix mount, it might be a gvfs
mount, but you can still access the files on it if you use GIO. Might or
might not be related to a volume object.</para>
<para>Unmounting a <link linkend="GMount"><type>GMount</type></link> instance is an asynchronous operation. For
more information about asynchronous operations, see <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
and <link linkend="GTask"><type>GTask</type></link>. To unmount a <link linkend="GMount"><type>GMount</type></link> instance, first call
<link linkend="g-mount-unmount-with-operation"><function>g_mount_unmount_with_operation()</function></link> with (at least) the <link linkend="GMount"><type>GMount</type></link> instance and a
<link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>.  The callback will be fired when the
operation has resolved (either with success or failure), and a
<link linkend="GAsyncResult"><type>GAsyncResult</type></link> structure will be passed to the callback.  That
callback should then call <link linkend="g-mount-unmount-with-operation-finish"><function>g_mount_unmount_with_operation_finish()</function></link> with the <link linkend="GMount"><type>GMount</type></link>
and the <link linkend="GAsyncResult"><type>GAsyncResult</type></link> data to see if the operation was completed
successfully.  If an <parameter>error</parameter>
 is present when <link linkend="g-mount-unmount-with-operation-finish"><function>g_mount_unmount_with_operation_finish()</function></link> 
is called, then it will be filled with any error information.</para>

</refsect1>
<refsect1 id="GMount.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-mount-get-name" role="function">
<title>g_mount_get_name&#160;()</title>
<indexterm zone="g-mount-get-name"><primary sortas="mount_get_name">g_mount_get_name</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_mount_get_name (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the name of <parameter>mount</parameter>
.</para>
<refsect3 id="g-mount-get-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-name.returns" role="returns">
<title>Returns</title>
<para> the name for the given <parameter>mount</parameter>
.
The returned string should be freed with <link linkend="g-free"><function>g_free()</function></link>
when no longer needed.</para>
</refsect3></refsect2>
<refsect2 id="g-mount-get-uuid" role="function">
<title>g_mount_get_uuid&#160;()</title>
<indexterm zone="g-mount-get-uuid"><primary sortas="mount_get_uuid">g_mount_get_uuid</primary></indexterm>
<programlisting language="C"><link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
g_mount_get_uuid (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the UUID for the <parameter>mount</parameter>
. The reference is typically based on
the file system UUID for the mount in question and should be
considered an opaque string. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> if there is no UUID
available.</para>
<refsect3 id="g-mount-get-uuid.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-uuid.returns" role="returns">
<title>Returns</title>
<para>the UUID for <parameter>mount</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no UUID
can be computed.
The returned string should be freed with <link linkend="g-free"><function>g_free()</function></link>
when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-mount-get-icon" role="function">
<title>g_mount_get_icon&#160;()</title>
<indexterm zone="g-mount-get-icon"><primary sortas="mount_get_icon">g_mount_get_icon</primary></indexterm>
<programlisting language="C"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
g_mount_get_icon (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the icon for <parameter>mount</parameter>
.</para>
<refsect3 id="g-mount-get-icon.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-icon.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GIcon"><type>GIcon</type></link>.
The returned object should be unreffed with
<link linkend="g-object-unref"><function>g_object_unref()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-mount-get-symbolic-icon" role="function" condition="since:2.34">
<title>g_mount_get_symbolic_icon&#160;()</title>
<indexterm zone="g-mount-get-symbolic-icon" role="2.34"><primary sortas="mount_get_symbolic_icon">g_mount_get_symbolic_icon</primary></indexterm>
<programlisting language="C"><link linkend="GIcon"><returnvalue>GIcon</returnvalue></link>&#160;*
g_mount_get_symbolic_icon (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the symbolic icon for <parameter>mount</parameter>
.</para>
<refsect3 id="g-mount-get-symbolic-icon.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-symbolic-icon.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GIcon"><type>GIcon</type></link>.
The returned object should be unreffed with
<link linkend="g-object-unref"><function>g_object_unref()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.34">2.34</link></para></refsect2>
<refsect2 id="g-mount-get-drive" role="function">
<title>g_mount_get_drive&#160;()</title>
<indexterm zone="g-mount-get-drive"><primary sortas="mount_get_drive">g_mount_get_drive</primary></indexterm>
<programlisting language="C"><link linkend="GDrive"><returnvalue>GDrive</returnvalue></link>&#160;*
g_mount_get_drive (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the drive for the <parameter>mount</parameter>
.</para>
<para>This is a convenience method for getting the <link linkend="GVolume"><type>GVolume</type></link> and then
using that object to get the <link linkend="GDrive"><type>GDrive</type></link>.</para>
<refsect3 id="g-mount-get-drive.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-drive.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GDrive"><type>GDrive</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>mount</parameter>
is not
associated with a volume or a drive.
The returned object should be unreffed with
<link linkend="g-object-unref"><function>g_object_unref()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-mount-get-root" role="function">
<title>g_mount_get_root&#160;()</title>
<indexterm zone="g-mount-get-root"><primary sortas="mount_get_root">g_mount_get_root</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_mount_get_root (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the root directory on <parameter>mount</parameter>
.</para>
<refsect3 id="g-mount-get-root.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-root.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFile"><type>GFile</type></link>.
The returned object should be unreffed with
<link linkend="g-object-unref"><function>g_object_unref()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-mount-get-volume" role="function">
<title>g_mount_get_volume&#160;()</title>
<indexterm zone="g-mount-get-volume"><primary sortas="mount_get_volume">g_mount_get_volume</primary></indexterm>
<programlisting language="C"><link linkend="GVolume"><returnvalue>GVolume</returnvalue></link>&#160;*
g_mount_get_volume (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the volume for the <parameter>mount</parameter>
.</para>
<refsect3 id="g-mount-get-volume.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-volume.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GVolume"><type>GVolume</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>mount</parameter>
is not
associated with a volume.
The returned object should be unreffed with
<link linkend="g-object-unref"><function>g_object_unref()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-mount-get-default-location" role="function">
<title>g_mount_get_default_location&#160;()</title>
<indexterm zone="g-mount-get-default-location"><primary sortas="mount_get_default_location">g_mount_get_default_location</primary></indexterm>
<programlisting language="C"><link linkend="GFile"><returnvalue>GFile</returnvalue></link>&#160;*
g_mount_get_default_location (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the default location of <parameter>mount</parameter>
. The default location of the given
<parameter>mount</parameter>
 is a path that reflects the main entry point for the user (e.g.
the home directory, or the root of the volume).</para>
<refsect3 id="g-mount-get-default-location.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-default-location.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="GFile"><type>GFile</type></link>.
The returned object should be unreffed with
<link linkend="g-object-unref"><function>g_object_unref()</function></link> when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-mount-can-unmount" role="function">
<title>g_mount_can_unmount&#160;()</title>
<indexterm zone="g-mount-can-unmount"><primary sortas="mount_can_unmount">g_mount_can_unmount</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_mount_can_unmount (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Checks if <parameter>mount</parameter>
 can be unmounted.</para>
<refsect3 id="g-mount-can-unmount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-can-unmount.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>mount</parameter>
can be unmounted.</para>
</refsect3></refsect2>
<refsect2 id="g-mount-unmount" role="function" condition="deprecated:2.22: Use g_mount_unmount_with_operation() instead.">
<title>g_mount_unmount&#160;()</title>
<indexterm zone="g-mount-unmount" role="deprecated"><primary sortas="mount_unmount">g_mount_unmount</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_mount_unmount (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                 <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                 <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                 <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                 <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<warning><para><literal>g_mount_unmount</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-mount-unmount-with-operation"><function>g_mount_unmount_with_operation()</function></link> instead.</para>
</warning>
<para>Unmounts a mount. This is an asynchronous operation, and is 
finished by calling <link linkend="g-mount-unmount-finish"><function>g_mount_unmount_finish()</function></link> with the <parameter>mount</parameter>
 
and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> data returned in the <parameter>callback</parameter>
.</para>
<refsect3 id="g-mount-unmount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-mount-unmount-finish" role="function" condition="deprecated:2.22: Use g_mount_unmount_with_operation_finish() instead.">
<title>g_mount_unmount_finish&#160;()</title>
<indexterm zone="g-mount-unmount-finish" role="deprecated"><primary sortas="mount_unmount_finish">g_mount_unmount_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_mount_unmount_finish (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                        <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                        <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<warning><para><literal>g_mount_unmount_finish</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-mount-unmount-with-operation-finish"><function>g_mount_unmount_with_operation_finish()</function></link> instead.</para>
</warning>
<para>Finishes unmounting a mount. If any errors occurred during the operation, 
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<refsect3 id="g-mount-unmount-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-unmount-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the mount was successfully unmounted. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-mount-unmount-with-operation" role="function" condition="since:2.22">
<title>g_mount_unmount_with_operation&#160;()</title>
<indexterm zone="g-mount-unmount-with-operation" role="2.22"><primary sortas="mount_unmount_with_operation">g_mount_unmount_with_operation</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_mount_unmount_with_operation (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                                <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                                <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                                <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                                <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Unmounts a mount. This is an asynchronous operation, and is
finished by calling <link linkend="g-mount-unmount-with-operation-finish"><function>g_mount_unmount_with_operation_finish()</function></link> with the <parameter>mount</parameter>
 
and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> data returned in the <parameter>callback</parameter>
.</para>
<refsect3 id="g-mount-unmount-with-operation.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid
user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-mount-unmount-with-operation-finish" role="function" condition="since:2.22">
<title>g_mount_unmount_with_operation_finish&#160;()</title>
<indexterm zone="g-mount-unmount-with-operation-finish" role="2.22"><primary sortas="mount_unmount_with_operation_finish">g_mount_unmount_with_operation_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_mount_unmount_with_operation_finish (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                                       <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                       <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes unmounting a mount. If any errors occurred during the operation,
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<refsect3 id="g-mount-unmount-with-operation-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-unmount-with-operation-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the mount was successfully unmounted. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-mount-remount" role="function">
<title>g_mount_remount&#160;()</title>
<indexterm zone="g-mount-remount"><primary sortas="mount_remount">g_mount_remount</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_mount_remount (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                 <parameter><link linkend="GMountMountFlags"><type>GMountMountFlags</type></link> flags</parameter>,
                 <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                 <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                 <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                 <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Remounts a mount. This is an asynchronous operation, and is 
finished by calling <link linkend="g-mount-remount-finish"><function>g_mount_remount_finish()</function></link> with the <parameter>mount</parameter>
 
and <link linkend="GAsyncResults"><type>GAsyncResults</type></link> data returned in the <parameter>callback</parameter>
.</para>
<para>Remounting is useful when some setting affecting the operation
of the volume has been changed, as these may need a remount to
take affect. While this is semantically equivalent with unmounting
and then remounting not all backends might need to actually be
unmounted.</para>
<refsect3 id="g-mount-remount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the operation</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid
user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-mount-remount-finish" role="function">
<title>g_mount_remount_finish&#160;()</title>
<indexterm zone="g-mount-remount-finish"><primary sortas="mount_remount_finish">g_mount_remount_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_mount_remount_finish (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                        <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                        <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes remounting a mount. If any errors occurred during the operation, 
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<refsect3 id="g-mount-remount-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-remount-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the mount was successfully remounted. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-mount-can-eject" role="function">
<title>g_mount_can_eject&#160;()</title>
<indexterm zone="g-mount-can-eject"><primary sortas="mount_can_eject">g_mount_can_eject</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_mount_can_eject (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Checks if <parameter>mount</parameter>
 can be ejected.</para>
<refsect3 id="g-mount-can-eject.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-can-eject.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <parameter>mount</parameter>
can be ejected.</para>
</refsect3></refsect2>
<refsect2 id="g-mount-eject" role="function" condition="deprecated:2.22: Use g_mount_eject_with_operation() instead.">
<title>g_mount_eject&#160;()</title>
<indexterm zone="g-mount-eject" role="deprecated"><primary sortas="mount_eject">g_mount_eject</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_mount_eject (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
               <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
               <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
               <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
               <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<warning><para><literal>g_mount_eject</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-mount-eject-with-operation"><function>g_mount_eject_with_operation()</function></link> instead.</para>
</warning>
<para>Ejects a mount. This is an asynchronous operation, and is 
finished by calling <link linkend="g-mount-eject-finish"><function>g_mount_eject_finish()</function></link> with the <parameter>mount</parameter>
 
and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> data returned in the <parameter>callback</parameter>
.</para>
<refsect3 id="g-mount-eject.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the unmount if required for eject</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-mount-eject-finish" role="function" condition="deprecated:2.22: Use g_mount_eject_with_operation_finish() instead.">
<title>g_mount_eject_finish&#160;()</title>
<indexterm zone="g-mount-eject-finish" role="deprecated"><primary sortas="mount_eject_finish">g_mount_eject_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_mount_eject_finish (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                      <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                      <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<warning><para><literal>g_mount_eject_finish</literal> has been deprecated since version 2.22 and should not be used in newly-written code.</para> <para>Use <link linkend="g-mount-eject-with-operation-finish"><function>g_mount_eject_with_operation_finish()</function></link> instead.</para>
</warning>
<para>Finishes ejecting a mount. If any errors occurred during the operation, 
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<refsect3 id="g-mount-eject-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-eject-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the mount was successfully ejected. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3></refsect2>
<refsect2 id="g-mount-eject-with-operation" role="function" condition="since:2.22">
<title>g_mount_eject_with_operation&#160;()</title>
<indexterm zone="g-mount-eject-with-operation" role="2.22"><primary sortas="mount_eject_with_operation">g_mount_eject_with_operation</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_mount_eject_with_operation (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                              <parameter><link linkend="GMountUnmountFlags"><type>GMountUnmountFlags</type></link> flags</parameter>,
                              <parameter><link linkend="GMountOperation"><type>GMountOperation</type></link> *mount_operation</parameter>,
                              <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                              <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                              <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Ejects a mount. This is an asynchronous operation, and is
finished by calling <link linkend="g-mount-eject-with-operation-finish"><function>g_mount_eject_with_operation_finish()</function></link> with the <parameter>mount</parameter>

and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> data returned in the <parameter>callback</parameter>
.</para>
<refsect3 id="g-mount-eject-with-operation.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags affecting the unmount if required for eject</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mount_operation</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMountOperation"><type>GMountOperation</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to avoid
user interaction. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-mount-eject-with-operation-finish" role="function" condition="since:2.22">
<title>g_mount_eject_with_operation_finish&#160;()</title>
<indexterm zone="g-mount-eject-with-operation-finish" role="2.22"><primary sortas="mount_eject_with_operation_finish">g_mount_eject_with_operation_finish</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_mount_eject_with_operation_finish (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                                     <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                     <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes ejecting a mount. If any errors occurred during the operation,
<parameter>error</parameter>
 will be set to contain the errors and <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned.</para>
<refsect3 id="g-mount-eject-with-operation-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
ignore.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-eject-with-operation-finish.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the mount was successfully ejected. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2>
<refsect2 id="g-mount-guess-content-type" role="function" condition="since:2.18">
<title>g_mount_guess_content_type&#160;()</title>
<indexterm zone="g-mount-guess-content-type" role="2.18"><primary sortas="mount_guess_content_type">g_mount_guess_content_type</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_mount_guess_content_type (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                            <parameter><link linkend="gboolean"><type>gboolean</type></link> force_rescan</parameter>,
                            <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                            <parameter><link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> callback</parameter>,
                            <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Tries to guess the type of content stored on <parameter>mount</parameter>
. Returns one or
more textual identifiers of well-known content types (typically
prefixed with "x-content/"), e.g. x-content/image-dcf for camera 
memory cards. See the 
<ulink url="http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec">shared-mime-info</ulink>
specification for more on x-content types.</para>
<para>This is an asynchronous operation (see
<link linkend="g-mount-guess-content-type-sync"><function>g_mount_guess_content_type_sync()</function></link> for the synchronous version), and
is finished by calling <link linkend="g-mount-guess-content-type-finish"><function>g_mount_guess_content_type_finish()</function></link> with the
<parameter>mount</parameter>
 and <link linkend="GAsyncResult"><type>GAsyncResult</type></link> data returned in the <parameter>callback</parameter>
.</para>
<refsect3 id="g-mount-guess-content-type.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>force_rescan</para></entry>
<entry role="parameter_description"><para>Whether to force a rescan of the content.
Otherwise a cached result will be used if available</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data passed to <parameter>callback</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.18">2.18</link></para></refsect2>
<refsect2 id="g-mount-guess-content-type-finish" role="function" condition="since:2.18">
<title>g_mount_guess_content_type_finish&#160;()</title>
<indexterm zone="g-mount-guess-content-type-finish" role="2.18"><primary sortas="mount_guess_content_type_finish">g_mount_guess_content_type_finish</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
g_mount_guess_content_type_finish (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                                   <parameter><link linkend="GAsyncResult"><type>GAsyncResult</type></link> *result</parameter>,
                                   <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Finishes guessing content types of <parameter>mount</parameter>
. If any errors occurred
during the operation, <parameter>error</parameter>
 will be set to contain the errors and
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> will be returned. In particular, you may get an 
<link linkend="G-IO-ERROR-NOT-SUPPORTED:CAPS"><literal>G_IO_ERROR_NOT_SUPPORTED</literal></link> if the mount does not support content 
guessing.</para>
<refsect3 id="g-mount-guess-content-type-finish.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>a <link linkend="GAsyncResult"><type>GAsyncResult</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-guess-content-type-finish.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated array of content types or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Caller should free this array with <link linkend="g-strfreev"><function>g_strfreev()</function></link> when done with it. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>element-type</acronym> utf8]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.18">2.18</link></para></refsect2>
<refsect2 id="g-mount-guess-content-type-sync" role="function" condition="since:2.18">
<title>g_mount_guess_content_type_sync&#160;()</title>
<indexterm zone="g-mount-guess-content-type-sync" role="2.18"><primary sortas="mount_guess_content_type_sync">g_mount_guess_content_type_sync</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
g_mount_guess_content_type_sync (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>,
                                 <parameter><link linkend="gboolean"><type>gboolean</type></link> force_rescan</parameter>,
                                 <parameter><link linkend="GCancellable"><type>GCancellable</type></link> *cancellable</parameter>,
                                 <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>Tries to guess the type of content stored on <parameter>mount</parameter>
. Returns one or
more textual identifiers of well-known content types (typically
prefixed with "x-content/"), e.g. x-content/image-dcf for camera 
memory cards. See the 
<ulink url="http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec">shared-mime-info</ulink>
specification for more on x-content types.</para>
<para>This is an synchronous operation and as such may block doing IO;
see <link linkend="g-mount-guess-content-type"><function>g_mount_guess_content_type()</function></link> for the asynchronous version.</para>
<refsect3 id="g-mount-guess-content-type-sync.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>a <link linkend="GMount"><type>GMount</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>force_rescan</para></entry>
<entry role="parameter_description"><para>Whether to force a rescan of the content.
Otherwise a cached result will be used if available</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cancellable</para></entry>
<entry role="parameter_description"><para>optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL:CAPS"><literal>NULL</literal></link> to ignore. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>a <link linkend="GError"><type>GError</type></link> location to store the error occurring, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to
ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-guess-content-type-sync.returns" role="returns">
<title>Returns</title>
<para>a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated array of content types or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
Caller should free this array with <link linkend="g-strfreev"><function>g_strfreev()</function></link> when done with it. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>element-type</acronym> utf8]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.18">2.18</link></para></refsect2>
<refsect2 id="g-mount-is-shadowed" role="function" condition="since:2.20">
<title>g_mount_is_shadowed&#160;()</title>
<indexterm zone="g-mount-is-shadowed" role="2.20"><primary sortas="mount_is_shadowed">g_mount_is_shadowed</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_mount_is_shadowed (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Determines if <parameter>mount</parameter>
 is shadowed. Applications or libraries should
avoid displaying <parameter>mount</parameter>
 in the user interface if it is shadowed.</para>
<para>A mount is said to be shadowed if there exists one or more user
visible objects (currently <link linkend="GMount"><type>GMount</type></link> objects) with a root that is
inside the root of <parameter>mount</parameter>
.</para>
<para>One application of shadow mounts is when exposing a single file
system that is used to address several logical volumes. In this
situation, a <link linkend="GVolumeMonitor"><type>GVolumeMonitor</type></link> implementation would create two
<link linkend="GVolume"><type>GVolume</type></link> objects (for example, one for the camera functionality of
the device and one for a SD card reader on the device) with
activation URIs <literal>gphoto2://[usb:001,002]/store1/</literal>
and <literal>gphoto2://[usb:001,002]/store2/</literal>. When the
underlying mount (with root
<literal>gphoto2://[usb:001,002]/</literal>) is mounted, said
<link linkend="GVolumeMonitor"><type>GVolumeMonitor</type></link> implementation would create two <link linkend="GMount"><type>GMount</type></link> objects
(each with their root matching the corresponding volume activation
root) that would shadow the original mount.</para>
<para>The proxy monitor in GVfs 2.26 and later, automatically creates and
manage shadow mounts (and shadows the underlying mount) if the
activation root on a <link linkend="GVolume"><type>GVolume</type></link> is set.</para>
<refsect3 id="g-mount-is-shadowed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>A <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-is-shadowed.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>mount</parameter>
is shadowed.</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.20">2.20</link></para></refsect2>
<refsect2 id="g-mount-shadow" role="function" condition="since:2.20">
<title>g_mount_shadow&#160;()</title>
<indexterm zone="g-mount-shadow" role="2.20"><primary sortas="mount_shadow">g_mount_shadow</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_mount_shadow (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Increments the shadow count on <parameter>mount</parameter>
. Usually used by
<link linkend="GVolumeMonitor"><type>GVolumeMonitor</type></link> implementations when creating a shadow mount for
<parameter>mount</parameter>
, see <link linkend="g-mount-is-shadowed"><function>g_mount_is_shadowed()</function></link> for more information. The caller
will need to emit the <link linkend="GMount-changed"><type>“changed”</type></link> signal on <parameter>mount</parameter>
 manually.</para>
<refsect3 id="g-mount-shadow.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>A <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.20">2.20</link></para></refsect2>
<refsect2 id="g-mount-unshadow" role="function" condition="since:2.20">
<title>g_mount_unshadow&#160;()</title>
<indexterm zone="g-mount-unshadow" role="2.20"><primary sortas="mount_unshadow">g_mount_unshadow</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_mount_unshadow (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Decrements the shadow count on <parameter>mount</parameter>
. Usually used by
<link linkend="GVolumeMonitor"><type>GVolumeMonitor</type></link> implementations when destroying a shadow mount for
<parameter>mount</parameter>
, see <link linkend="g-mount-is-shadowed"><function>g_mount_is_shadowed()</function></link> for more information. The caller
will need to emit the <link linkend="GMount-changed"><type>“changed”</type></link> signal on <parameter>mount</parameter>
 manually.</para>
<refsect3 id="g-mount-unshadow.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>A <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.20">2.20</link></para></refsect2>
<refsect2 id="g-mount-get-sort-key" role="function" condition="since:2.32">
<title>g_mount_get_sort_key&#160;()</title>
<indexterm zone="g-mount-get-sort-key" role="2.32"><primary sortas="mount_get_sort_key">g_mount_get_sort_key</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
g_mount_get_sort_key (<parameter><link linkend="GMount"><type>GMount</type></link> *mount</parameter>);</programlisting>
<para>Gets the sort key for <parameter>mount</parameter>
, if any.</para>
<refsect3 id="g-mount-get-sort-key.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>A <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-mount-get-sort-key.returns" role="returns">
<title>Returns</title>
<para>Sorting key for <parameter>mount</parameter>
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such key is available. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>

</refsect1>
<refsect1 id="GMount.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GMount-struct" role="struct">
<title>GMount</title>
<indexterm zone="GMount-struct"><primary sortas="Mount">GMount</primary></indexterm>
<programlisting language="C">typedef struct _GMount GMount;</programlisting>
<para>A handle to an object implementing the <link linkend="GMountIface"><type>GMountIface</type></link> interface.</para>
</refsect2>
<refsect2 id="GMountIface" role="struct">
<title>struct GMountIface</title>
<indexterm zone="GMountIface"><primary sortas="MountIface">GMountIface</primary></indexterm>
<programlisting language="C">struct GMountIface {
  GTypeInterface g_iface;

  /* signals */

  void        (* changed)                   (GMount              *mount);
  void        (* unmounted)                 (GMount              *mount);

  /* Virtual Table */

  GFile     * (* get_root)                  (GMount              *mount);
  char      * (* get_name)                  (GMount              *mount);
  GIcon     * (* get_icon)                  (GMount              *mount);
  char      * (* get_uuid)                  (GMount              *mount);
  GVolume   * (* get_volume)                (GMount              *mount);
  GDrive    * (* get_drive)                 (GMount              *mount);
  gboolean    (* can_unmount)               (GMount              *mount);
  gboolean    (* can_eject)                 (GMount              *mount);

  void        (* unmount)                   (GMount              *mount,
                                             GMountUnmountFlags   flags,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* unmount_finish)            (GMount              *mount,
                                             GAsyncResult        *result,
                                             GError             **error);

  void        (* eject)                     (GMount              *mount,
                                             GMountUnmountFlags   flags,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* eject_finish)              (GMount              *mount,
                                             GAsyncResult        *result,
                                             GError             **error);

  void        (* remount)                   (GMount              *mount,
                                             GMountMountFlags     flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* remount_finish)            (GMount              *mount,
                                             GAsyncResult        *result,
                                             GError             **error);

  void        (* guess_content_type)        (GMount              *mount,
                                             gboolean             force_rescan,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gchar    ** (* guess_content_type_finish) (GMount              *mount,
                                             GAsyncResult        *result,
                                             GError             **error);
  gchar    ** (* guess_content_type_sync)   (GMount              *mount,
                                             gboolean             force_rescan,
                                             GCancellable        *cancellable,
                                             GError             **error);

  /* Signal, not VFunc */
  void        (* pre_unmount)               (GMount              *mount);

  void        (* unmount_with_operation)    (GMount              *mount,
                                             GMountUnmountFlags   flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* unmount_with_operation_finish) (GMount          *mount,
                                             GAsyncResult        *result,
                                             GError             **error);

  void        (* eject_with_operation)      (GMount              *mount,
                                             GMountUnmountFlags   flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* eject_with_operation_finish) (GMount            *mount,
                                             GAsyncResult        *result,
                                             GError             **error);
  GFile     * (* get_default_location)      (GMount              *mount);

  const gchar * (* get_sort_key)            (GMount              *mount);
  GIcon       * (* get_symbolic_icon)       (GMount              *mount);
};
</programlisting>
<para>Interface for implementing operations for mounts.</para>
<refsect3 id="GMountIface.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.changed">changed</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Changed signal that is emitted when the mount's state has changed.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.unmounted">unmounted</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>The unmounted signal that is emitted when the <link linkend="GMount"><type>GMount</type></link> have been unmounted. If the recipient is holding references to the object they should release them so the object can be finalized.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-root">get_root</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GFile"><type>GFile</type></link> to the root directory of the <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-name">get_name</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a string containing the name of the <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-icon">get_icon</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GIcon"><type>GIcon</type></link> for the <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-uuid">get_uuid</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets the UUID for the <link linkend="GMount"><type>GMount</type></link>. The reference is typically based on the file system UUID for the mount in question and should be considered an opaque string. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> if there is no UUID available.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-volume">get_volume</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GVolume"><type>GVolume</type></link> the mount is located on. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the <link linkend="GMount"><type>GMount</type></link> is not associated with a <link linkend="GVolume"><type>GVolume</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-drive">get_drive</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GDrive"><type>GDrive</type></link> the volume of the mount is located on. Returns <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the <link linkend="GMount"><type>GMount</type></link> is not associated with a <link linkend="GDrive"><type>GDrive</type></link> or a <link linkend="GVolume"><type>GVolume</type></link>. This is convenience method for getting the <link linkend="GVolume"><type>GVolume</type></link> and using that to get the <link linkend="GDrive"><type>GDrive</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.can-unmount">can_unmount</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Checks if a <link linkend="GMount"><type>GMount</type></link> can be unmounted.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.can-eject">can_eject</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Checks if a <link linkend="GMount"><type>GMount</type></link> can be ejected.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.unmount">unmount</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts unmounting a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.unmount-finish">unmount_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an unmounting operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.eject">eject</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts ejecting a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.eject-finish">eject_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an eject operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.remount">remount</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts remounting a <link linkend="GMount"><type>GMount</type></link>.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.remount-finish">remount_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes a remounting operation.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.guess-content-type">guess_content_type</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts guessing the type of the content of a <link linkend="GMount"><type>GMount</type></link>.
See <link linkend="g-mount-guess-content-type"><function>g_mount_guess_content_type()</function></link> for more information on content
type guessing. This operation was added in 2.18.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.guess-content-type-finish">guess_content_type_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes a content type guessing operation. Added in 2.18.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.guess-content-type-sync">guess_content_type_sync</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Synchronous variant of <parameter>guess_content_type</parameter>
. Added in 2.18</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.pre-unmount">pre_unmount</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>The ::pre-unmount signal that is emitted when the <link linkend="GMount"><type>GMount</type></link> will soon be emitted. If the recipient is somehow holding the mount open by keeping an open file on it it should close the file.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.unmount-with-operation">unmount_with_operation</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts unmounting a <link linkend="GMount"><type>GMount</type></link> using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.unmount-with-operation-finish">unmount_with_operation_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an unmounting operation using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.eject-with-operation">eject_with_operation</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Starts ejecting a <link linkend="GMount"><type>GMount</type></link> using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.eject-with-operation-finish">eject_with_operation_finish</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Finishes an eject operation using a <link linkend="GMountOperation"><type>GMountOperation</type></link>. Since 2.22.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-default-location">get_default_location</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a <link linkend="GFile"><type>GFile</type></link> indication a start location that can be use as the entry point for this mount. Since 2.24.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-sort-key">get_sort_key</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a key used for sorting <link linkend="GMount"><type>GMount</type></link> instance or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no such key exists. Since 2.32.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GMountIface.get-symbolic-icon">get_symbolic_icon</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Gets a symbolic <link linkend="GIcon"><type>GIcon</type></link> for the <link linkend="GMount"><type>GMount</type></link>. Since 2.34.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="GMountMountFlags" role="enum">
<title>enum GMountMountFlags</title>
<indexterm zone="GMountMountFlags"><primary sortas="MountMountFlags">GMountMountFlags</primary></indexterm>
<para>Flags used when mounting a mount.</para>
<refsect3 id="GMountMountFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-MOUNT-MOUNT-NONE:CAPS">G_MOUNT_MOUNT_NONE</para></entry>
<entry role="enum_member_description"><para>No flags set.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GMountUnmountFlags" role="enum">
<title>enum GMountUnmountFlags</title>
<indexterm zone="GMountUnmountFlags"><primary sortas="MountUnmountFlags">GMountUnmountFlags</primary></indexterm>
<para>Flags used when an unmounting a mount.</para>
<refsect3 id="GMountUnmountFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-MOUNT-UNMOUNT-NONE:CAPS">G_MOUNT_UNMOUNT_NONE</para></entry>
<entry role="enum_member_description"><para>No flags set.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-MOUNT-UNMOUNT-FORCE:CAPS">G_MOUNT_UNMOUNT_FORCE</para></entry>
<entry role="enum_member_description"><para>Unmount even if there are outstanding
 file operations on the mount.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>
<refsect1 id="GMount.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GMount-changed" role="signal"><title>The <literal>“changed”</literal> signal</title>
<indexterm zone="GMount-changed"><primary sortas="Mount::changed">GMount::changed</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GMount"><type>GMount</type></link>  *mount,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>Emitted when the mount has been changed.</para>
<refsect3 id="GMount-changed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>the object on which the signal is emitted</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2><refsect2 id="GMount-pre-unmount" role="signal"><title>The <literal>“pre-unmount”</literal> signal</title>
<indexterm zone="GMount-pre-unmount" role="2.22"><primary sortas="Mount::pre-unmount">GMount::pre-unmount</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GMount"><type>GMount</type></link>  *mount,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>This signal may be emitted when the <link linkend="GMount"><type>GMount</type></link> is about to be
unmounted.</para>
<para>This signal depends on the backend and is only emitted if
GIO was used to unmount.</para>
<refsect3 id="GMount-pre-unmount.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>the object on which the signal is emitted</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
<para role="since">Since: <link linkend="api-index-2.22">2.22</link></para></refsect2><refsect2 id="GMount-unmounted" role="signal"><title>The <literal>“unmounted”</literal> signal</title>
<indexterm zone="GMount-unmounted"><primary sortas="Mount::unmounted">GMount::unmounted</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GMount"><type>GMount</type></link>  *mount,
               <link linkend="gpointer"><type>gpointer</type></link> user_data)</programlisting>
<para>This signal is emitted when the <link linkend="GMount"><type>GMount</type></link> have been
unmounted. If the recipient is holding references to the
object they should release them so the object can be
finalized.</para>
<refsect3 id="GMount-unmounted.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mount</para></entry>
<entry role="parameter_description"><para>the object on which the signal is emitted</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2>
</refsect1>
<refsect1 id="GMount.see-also">
<title>See Also</title>
<para>GVolume, GUnixMountEntry, GUnixMountPoint</para>

</refsect1>

</refentry>
