<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GSettings">
<refmeta>
<refentrytitle role="top_of_page" id="GSettings.top_of_page">GSettings</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GSettings</refname>
<refpurpose>High-level API for application settings</refpurpose>
</refnamediv>

<refsect1 id="GSettings.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-new">g_settings_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-new-with-path">g_settings_new_with_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-new-with-backend">g_settings_new_with_backend</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-new-with-backend-and-path">g_settings_new_with_backend_and_path</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-new-full">g_settings_new_full</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-sync">g_settings_sync</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-get-value">g_settings_get_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-value">g_settings_set_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-is-writable">g_settings_is_writable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-delay">g_settings_delay</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-apply">g_settings_apply</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-revert">g_settings_revert</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-has-unapplied">g_settings_get_has_unapplied</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-get-child">g_settings_get_child</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-reset">g_settings_reset</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-get-user-value">g_settings_get_user_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-get-default-value">g_settings_get_default_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;* const *
</entry><entry role="function_name"><link linkend="g-settings-list-schemas">g_settings_list_schemas</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;* const *
</entry><entry role="function_name"><link linkend="g-settings-list-relocatable-schemas">g_settings_list_relocatable_schemas</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-settings-list-keys">g_settings_list_keys</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-settings-list-children">g_settings_list_children</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-get-range">g_settings_get_range</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-range-check">g_settings_range_check</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get">g_settings_get</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set">g_settings_set</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-boolean">g_settings_get_boolean</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-boolean">g_settings_set_boolean</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gint"><returnvalue>gint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-int">g_settings_get_int</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-int">g_settings_set_int</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gint64"><returnvalue>gint64</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-int64">g_settings_get_int64</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-int64">g_settings_set_int64</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint"><returnvalue>guint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-uint">g_settings_get_uint</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-uint">g_settings_set_uint</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint64"><returnvalue>guint64</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-uint64">g_settings_get_uint64</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-uint64">g_settings_set_uint64</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gdouble"><returnvalue>gdouble</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-double">g_settings_get_double</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-double">g_settings_set_double</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-get-string">g_settings_get_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-string">g_settings_set_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
</entry><entry role="function_name"><link linkend="g-settings-get-strv">g_settings_get_strv</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-strv">g_settings_set_strv</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gint"><returnvalue>gint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-enum">g_settings_get_enum</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-enum">g_settings_set_enum</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint"><returnvalue>guint</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-flags">g_settings_get_flags</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-set-flags">g_settings_set_flags</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GSettingsGetMapping">*GSettingsGetMapping</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gpointer"><returnvalue>gpointer</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-get-mapped">g_settings_get_mapped</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-bind">g_settings_bind</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-bind-with-mapping">g_settings_bind_with_mapping</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-bind-writable">g_settings_bind_writable</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="g-settings-unbind">g_settings_unbind</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GSettingsBindSetMapping">*GSettingsBindSetMapping</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GSettingsBindGetMapping">*GSettingsBindGetMapping</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

<row><entry role="function_type"><link linkend="GAction"><returnvalue>GAction</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="g-settings-create-action">g_settings_create_action</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSettings.properties" role="properties">
<title role="properties.title">Properties</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="properties_type" colwidth="150px"/>
<colspec colname="properties_name" colwidth="300px"/>
<colspec colname="properties_flags" colwidth="200px"/>
<tbody>
<row><entry role="property_type"><link linkend="GSettingsBackend"><type>GSettingsBackend</type></link>&#160;*</entry><entry role="property_name"><link linkend="GSettings--backend">backend</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GSettings--delay-apply">delay-apply</link></entry><entry role="property_flags">Read</entry></row>
<row><entry role="property_type"><link linkend="gboolean"><type>gboolean</type></link></entry><entry role="property_name"><link linkend="GSettings--has-unapplied">has-unapplied</link></entry><entry role="property_flags">Read</entry></row>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="GSettings--path">path</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="GSettings--schema">schema</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="GSettings--schema-id">schema-id</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>
<row><entry role="property_type"><link linkend="GSettingsSchema"><type>GSettingsSchema</type></link>&#160;*</entry><entry role="property_name"><link linkend="GSettings--settings-schema">settings-schema</link></entry><entry role="property_flags">Read / Write / Construct Only</entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSettings.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="signals_return" colwidth="150px"/>
<colspec colname="signals_name" colwidth="300px"/>
<colspec colname="signals_flags" colwidth="200px"/>
<tbody>
<row><entry role="signal_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link></entry><entry role="signal_name"><link linkend="GSettings-change-event">change-event</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GSettings-changed">changed</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-DETAILED:CAPS">Has Details</link></entry></row>
<row><entry role="signal_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link></entry><entry role="signal_name"><link linkend="GSettings-writable-change-event">writable-change-event</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></entry></row>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="GSettings-writable-changed">writable-changed</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-DETAILED:CAPS">Has Details</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSettings.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GSettings-struct">GSettings</link></entry></row>




<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GSettingsBindFlags">GSettingsBindFlags</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GSettings.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GFlags">GFlags</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GSettingsBindFlags
    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GSettings
</screen>
</refsect1>

<refsect1 id="GSettings.includes"><title>Includes</title><synopsis>#include &lt;gio/gio.h&gt;
</synopsis></refsect1>

<refsect1 id="GSettings.description" role="desc">
<title role="desc.title">Description</title>
<para>The <link linkend="GSettings"><type>GSettings</type></link> class provides a convenient API for storing and retrieving
application settings.</para>
<para>Reads and writes can be considered to be non-blocking.  Reading
settings with <link linkend="GSettings"><type>GSettings</type></link> is typically extremely fast: on
approximately the same order of magnitude (but slower than) a
<link linkend="GHashTable"><type>GHashTable</type></link> lookup.  Writing settings is also extremely fast in terms
of time to return to your application, but can be extremely expensive
for other threads and other processes.  Many settings backends
(including dconf) have lazy initialisation which means in the common
case of the user using their computer without modifying any settings
a lot of work can be avoided.  For dconf, the D-Bus service doesn't
even need to be started in this case.  For this reason, you should
only ever modify <link linkend="GSettings"><type>GSettings</type></link> keys in response to explicit user action.
Particular care should be paid to ensure that modifications are not
made during startup -- for example, when setting the initial value
of preferences widgets.  The built-in <link linkend="g-settings-bind"><function>g_settings_bind()</function></link> functionality
is careful not to write settings in response to notify signals as a
result of modifications that it makes to widgets.</para>
<para>When creating a GSettings instance, you have to specify a schema
that describes the keys in your settings and their types and default
values, as well as some other information.</para>
<para>Normally, a schema has a fixed path that determines where the settings
are stored in the conceptual global tree of settings. However, schemas
can also be '<link linkend="gsettings-relocatable">relocatable</link>', i.e. not equipped with
a fixed path. This is
useful e.g. when the schema describes an 'account', and you want to be
able to store a arbitrary number of accounts.</para>
<para>Paths must start with and end with a forward slash character ('/')
and must not contain two sequential slash characters.  Paths should
be chosen based on a domain name associated with the program or
library to which the settings belong.  Examples of paths are
"/org/gtk/settings/file-chooser/" and "/ca/desrt/dconf-editor/".
Paths should not start with "/apps/", "/desktop/" or "/system/" as
they often did in GConf.</para>
<para>Unlike other configuration systems (like GConf), GSettings does not
restrict keys to basic types like strings and numbers. GSettings stores
values as <link linkend="GVariant"><type>GVariant</type></link>, and allows any <link linkend="GVariantType"><type>GVariantType</type></link> for keys. Key names
are restricted to lowercase characters, numbers and '-'. Furthermore,
the names must begin with a lowercase character, must not end
with a '-', and must not contain consecutive dashes.</para>
<para>Similar to GConf, the default values in GSettings schemas can be
localized, but the localized values are stored in gettext catalogs
and looked up with the domain that is specified in the
<literal>gettext-domain</literal> attribute of the &lt;schemalist> or &lt;schema>
elements and the category that is specified in the <literal>l10n</literal> attribute of
the &lt;default> element. The string which is translated includes all text in
the &lt;default> element, including any surrounding quotation marks.</para>
<para>The <literal>l10n</literal> attribute must be set to <literal>messages</literal> or <literal>time</literal>, and sets the
<ulink url="https://www.gnu.org/software/gettext/manual/html_node/Aspects.html#index-locale-categories-1">locale category for
translation</ulink>.
The <literal>messages</literal> category should be used by default; use <literal>time</literal> for
translatable date or time formats. A translation comment can be added as an
XML comment immediately above the &lt;default> element — it is recommended to
add these comments to aid translators understand the meaning and
implications of the default value. An optional translation <literal>context</literal>
attribute can be set on the &lt;default> element to disambiguate multiple
defaults which use the same string.</para>
<para>For example:</para>
<informalexample><programlisting role="example"><![CDATA[
 <!-- Translators: A list of words which are not allowed to be typed, in
      GVariant serialization syntax.
      See: https://developer.gnome.org/glib/stable/gvariant-text.html -->
 <default l10n='messages' context='Banned words'>['bad', 'words']</default>
]]></programlisting></informalexample>
<para></para>
<para>Translations of default values must remain syntactically valid serialized
<link linkend="GVariants"><type>GVariants</type></link> (e.g. retaining any surrounding quotation marks) or runtime
errors will occur.</para>
<para>GSettings uses schemas in a compact binary form that is created
by the <link linkend="glib-compile-schemas">glib-compile-schemas</link>
utility. The input is a schema description in an XML format.</para>
<para>A DTD for the gschema XML format can be found here:
<ulink url="https://git.gnome.org/browse/glib/tree/gio/gschema.dtd">gschema.dtd</ulink></para>
<para>The <link linkend="glib-compile-schemas">glib-compile-schemas</link> tool expects schema
files to have the extension <literal>.gschema.xml</literal>.</para>
<para>At runtime, schemas are identified by their id (as specified in the
id attribute of the &lt;schema> element). The convention for schema
ids is to use a dotted name, similar in style to a D-Bus bus name,
e.g. "org.gnome.SessionManager". In particular, if the settings are
for a specific service that owns a D-Bus bus name, the D-Bus bus name
and schema id should match. For schemas which deal with settings not
associated with one named application, the id should not use
StudlyCaps, e.g. "org.gnome.font-rendering".</para>
<para>In addition to <link linkend="GVariant"><type>GVariant</type></link> types, keys can have types that have
enumerated types. These can be described by a &lt;choice>,
&lt;enum> or &lt;flags> element, as seen in the
<link linkend="schema-enumerated">example</link>. The underlying type of such a key
is string, but you can use <link linkend="g-settings-get-enum"><function>g_settings_get_enum()</function></link>, <link linkend="g-settings-set-enum"><function>g_settings_set_enum()</function></link>,
<link linkend="g-settings-get-flags"><function>g_settings_get_flags()</function></link>, <link linkend="g-settings-set-flags"><function>g_settings_set_flags()</function></link> access the numeric values
corresponding to the string value of enum and flags keys.</para>
<para>An example for default value:</para>
<informalexample><programlisting role="example"><![CDATA[
<schemalist>
  <schema id="org.gtk.Test" path="/org/gtk/Test/" gettext-domain="test">

    <key name="greeting" type="s">
      <default l10n="messages">"Hello, earthlings"</default>
      <summary>A greeting</summary>
      <description>
        Greeting of the invading martians
      </description>
    </key>

    <key name="box" type="(ii)">
      <default>(20,30)</default>
    </key>

  </schema>
</schemalist>
]]></programlisting></informalexample>
<para></para>
<para>An example for ranges, choices and enumerated types:</para>
<informalexample><programlisting role="example"><![CDATA[
<schemalist>

  <enum id="org.gtk.Test.myenum">
    <value nick="first" value="1"/>
    <value nick="second" value="2"/>
  </enum>

  <flags id="org.gtk.Test.myflags">
    <value nick="flag1" value="1"/>
    <value nick="flag2" value="2"/>
    <value nick="flag3" value="4"/>
  </flags>

  <schema id="org.gtk.Test">

    <key name="key-with-range" type="i">
      <range min="1" max="100"/>
      <default>10</default>
    </key>

    <key name="key-with-choices" type="s">
      <choices>
        <choice value='Elisabeth'/>
        <choice value='Annabeth'/>
        <choice value='Joe'/>
      </choices>
      <aliases>
        <alias value='Anna' target='Annabeth'/>
        <alias value='Beth' target='Elisabeth'/>
      </aliases>
      <default>'Joe'</default>
    </key>

    <key name='enumerated-key' enum='org.gtk.Test.myenum'>
      <default>'first'</default>
    </key>

    <key name='flags-key' flags='org.gtk.Test.myflags'>
      <default>["flag1","flag2"]</default>
    </key>
  </schema>
</schemalist>
]]></programlisting></informalexample>
<para></para>
<refsect3><title>Vendor overrides</title><para>Default values are defined in the schemas that get installed by
an application. Sometimes, it is necessary for a vendor or distributor
to adjust these defaults. Since patching the XML source for the schema
is inconvenient and error-prone,
<link linkend="glib-compile-schemas">glib-compile-schemas</link> reads so-called vendor
override' files. These are keyfiles in the same directory as the XML
schema sources which can override default values. The schema id serves
as the group name in the key file, and the values are expected in
serialized GVariant form, as in the following example:</para>
<informalexample><programlisting role="example"><![CDATA[
    [org.gtk.Example]
    key1='string'
    key2=1.5
]]></programlisting></informalexample>
<para></para>
<para>glib-compile-schemas expects schema files to have the extension
<literal>.gschema.override</literal>.</para>
</refsect3>
<refsect3><title>Binding</title><para>A very convenient feature of GSettings lets you bind <link linkend="GObject"><type>GObject</type></link> properties
directly to settings, using <link linkend="g-settings-bind"><function>g_settings_bind()</function></link>. Once a GObject property
has been bound to a setting, changes on either side are automatically
propagated to the other side. GSettings handles details like mapping
between GObject and GVariant types, and preventing infinite cycles.</para>
<para>This makes it very easy to hook up a preferences dialog to the
underlying settings. To make this even more convenient, GSettings
looks for a boolean property with the name "sensitivity" and
automatically binds it to the writability of the bound setting.
If this 'magic' gets in the way, it can be suppressed with the
<link linkend="G-SETTINGS-BIND-NO-SENSITIVITY:CAPS"><type>G_SETTINGS_BIND_NO_SENSITIVITY</type></link> flag.</para>
</refsect3>
<refsect3 id="gsettings-relocatable"><title>Relocatable schemas</title><para>A relocatable schema is one with no <literal>path</literal> attribute specified on its
&lt;schema> element. By using <link linkend="g-settings-new-with-path"><function>g_settings_new_with_path()</function></link>, a <link linkend="GSettings"><type>GSettings</type></link> object
can be instantiated for a relocatable schema, assigning a path to the
instance. Paths passed to <link linkend="g-settings-new-with-path"><function>g_settings_new_with_path()</function></link> will typically be
constructed dynamically from a constant prefix plus some form of instance
identifier; but they must still be valid GSettings paths. Paths could also
be constant and used with a globally installed schema originating from a
dependency library.</para>
<para>For example, a relocatable schema could be used to store geometry information
for different windows in an application. If the schema ID was
<literal>org.foo.MyApp.Window</literal>, it could be instantiated for paths
<literal>/org/foo/MyApp/main/</literal>, <literal>/org/foo/MyApp/document-1/</literal>,
<literal>/org/foo/MyApp/document-2/</literal>, etc. If any of the paths are well-known
they can be specified as &lt;child> elements in the parent schema, e.g.:</para>
<informalexample><programlisting role="example"><![CDATA[
<schema id="org.foo.MyApp" path="/org/foo/MyApp/">
  <child name="main" schema="org.foo.MyApp.Window"/>
</schema>
]]></programlisting></informalexample>
<para></para>
</refsect3>
<refsect3 id="gsettings-build-system"><title>Build system integration</title><para>GSettings comes with autotools integration to simplify compiling and
installing schemas. To add GSettings support to an application, add the
following to your <literal>configure.ac</literal>:</para>
<informalexample><programlisting role="example"><![CDATA[
GLIB_GSETTINGS
]]></programlisting></informalexample>
<para></para>
<para>In the appropriate <literal>Makefile.am</literal>, use the following snippet to compile and
install the named schema:</para>
<informalexample><programlisting role="example"><![CDATA[
gsettings_SCHEMAS = org.foo.MyApp.gschema.xml
EXTRA_DIST = $(gsettings_SCHEMAS)

@GSETTINGS_RULES@
]]></programlisting></informalexample>
<para></para>
<para>No changes are needed to the build system to mark a schema XML file for
translation. Assuming it sets the <literal>gettext-domain</literal> attribute, a schema may
be marked for translation by adding it to <literal>POTFILES.in</literal>, assuming gettext
0.19 is in use (the preferred method for translation):</para>
<informalexample><programlisting role="example"><![CDATA[
data/org.foo.MyApp.gschema.xml
]]></programlisting></informalexample>
<para></para>
<para>Alternatively, if intltool 0.50.1 is in use:</para>
<informalexample><programlisting role="example"><![CDATA[
[type: gettext/gsettings]data/org.foo.MyApp.gschema.xml
]]></programlisting></informalexample>
<para></para>
<para>GSettings will use gettext to look up translations for the &lt;summary> and
&lt;description> elements, and also any &lt;default> elements which have a <literal>l10n</literal>
attribute set. Translations must not be included in the <literal>.gschema.xml</literal> file
by the build system, for example by using intltool XML rules with a
<literal>.gschema.xml.in</literal> template.</para>
<para>If an enumerated type defined in a C header file is to be used in a GSettings
schema, it can either be defined manually using an &lt;enum> element in the
schema XML, or it can be extracted automatically from the C header. This
approach is preferred, as it ensures the two representations are always
synchronised. To do so, add the following to the relevant <literal>Makefile.am</literal>:</para>
<informalexample><programlisting role="example"><![CDATA[
gsettings_ENUM_NAMESPACE = org.foo.MyApp
gsettings_ENUM_FILES = my-app-enums.h my-app-misc.h
]]></programlisting></informalexample>
<para></para>
<para><literal>gsettings_ENUM_NAMESPACE</literal> specifies the schema namespace for the enum files,
which are specified in <literal>gsettings_ENUM_FILES</literal>. This will generate a
<literal>org.foo.MyApp.enums.xml</literal> file containing the extracted enums, which will be
automatically included in the schema compilation, install and uninstall
rules. It should not be committed to version control or included in
<literal>EXTRA_DIST</literal>.</para>
</refsect3>

</refsect1>
<refsect1 id="GSettings.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="g-settings-new" role="function" condition="since:2.26">
<title>g_settings_new&#160;()</title>
<indexterm zone="g-settings-new" role="2.26"><primary sortas="settings_new">g_settings_new</primary></indexterm>
<programlisting language="C"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
g_settings_new (<parameter>const <link linkend="gchar"><type>gchar</type></link> *schema_id</parameter>);</programlisting>
<para>Creates a new <link linkend="GSettings"><type>GSettings</type></link> object with the schema specified by
<parameter>schema_id</parameter>
.</para>
<para>Signals on the newly created <link linkend="GSettings"><type>GSettings</type></link> object will be dispatched
via the thread-default <link linkend="GMainContext"><type>GMainContext</type></link> in effect at the time of the
call to <link linkend="g-settings-new"><function>g_settings_new()</function></link>.  The new <link linkend="GSettings"><type>GSettings</type></link> will hold a reference
on the context.  See <link linkend="g-main-context-push-thread-default"><function>g_main_context_push_thread_default()</function></link>.</para>
<refsect3 id="g-settings-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>schema_id</para></entry>
<entry role="parameter_description"><para>the id of the schema</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-new.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GSettings"><type>GSettings</type></link> object</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-new-with-path" role="function" condition="since:2.26">
<title>g_settings_new_with_path&#160;()</title>
<indexterm zone="g-settings-new-with-path" role="2.26"><primary sortas="settings_new_with_path">g_settings_new_with_path</primary></indexterm>
<programlisting language="C"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
g_settings_new_with_path (<parameter>const <link linkend="gchar"><type>gchar</type></link> *schema_id</parameter>,
                          <parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);</programlisting>
<para>Creates a new <link linkend="GSettings"><type>GSettings</type></link> object with the relocatable schema specified
by <parameter>schema_id</parameter>
 and a given path.</para>
<para>You only need to do this if you want to directly create a settings
object with a schema that doesn't have a specified path of its own.
That's quite rare.</para>
<para>It is a programmer error to call this function for a schema that
has an explicitly specified path.</para>
<para>It is a programmer error if <parameter>path</parameter>
 is not a valid path.  A valid path
begins and ends with '/' and does not contain two consecutive '/'
characters.</para>
<refsect3 id="g-settings-new-with-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>schema_id</para></entry>
<entry role="parameter_description"><para>the id of the schema</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>the path to use</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-new-with-path.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GSettings"><type>GSettings</type></link> object</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-new-with-backend" role="function" condition="since:2.26">
<title>g_settings_new_with_backend&#160;()</title>
<indexterm zone="g-settings-new-with-backend" role="2.26"><primary sortas="settings_new_with_backend">g_settings_new_with_backend</primary></indexterm>
<programlisting language="C"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
g_settings_new_with_backend (<parameter>const <link linkend="gchar"><type>gchar</type></link> *schema_id</parameter>,
                             <parameter><link linkend="GSettingsBackend"><type>GSettingsBackend</type></link> *backend</parameter>);</programlisting>
<para>Creates a new <link linkend="GSettings"><type>GSettings</type></link> object with the schema specified by
<parameter>schema_id</parameter>
 and a given <link linkend="GSettingsBackend"><type>GSettingsBackend</type></link>.</para>
<para>Creating a <link linkend="GSettings"><type>GSettings</type></link> object with a different backend allows accessing
settings from a database other than the usual one. For example, it may make
sense to pass a backend corresponding to the "defaults" settings database on
the system to get a settings object that modifies the system default
settings instead of the settings for this user.</para>
<refsect3 id="g-settings-new-with-backend.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>schema_id</para></entry>
<entry role="parameter_description"><para>the id of the schema</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>backend</para></entry>
<entry role="parameter_description"><para>the <link linkend="GSettingsBackend"><type>GSettingsBackend</type></link> to use</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-new-with-backend.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GSettings"><type>GSettings</type></link> object</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-new-with-backend-and-path" role="function" condition="since:2.26">
<title>g_settings_new_with_backend_and_path&#160;()</title>
<indexterm zone="g-settings-new-with-backend-and-path" role="2.26"><primary sortas="settings_new_with_backend_and_path">g_settings_new_with_backend_and_path</primary></indexterm>
<programlisting language="C"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
g_settings_new_with_backend_and_path (<parameter>const <link linkend="gchar"><type>gchar</type></link> *schema_id</parameter>,
                                      <parameter><link linkend="GSettingsBackend"><type>GSettingsBackend</type></link> *backend</parameter>,
                                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);</programlisting>
<para>Creates a new <link linkend="GSettings"><type>GSettings</type></link> object with the schema specified by
<parameter>schema_id</parameter>
 and a given <link linkend="GSettingsBackend"><type>GSettingsBackend</type></link> and path.</para>
<para>This is a mix of <link linkend="g-settings-new-with-backend"><function>g_settings_new_with_backend()</function></link> and
<link linkend="g-settings-new-with-path"><function>g_settings_new_with_path()</function></link>.</para>
<refsect3 id="g-settings-new-with-backend-and-path.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>schema_id</para></entry>
<entry role="parameter_description"><para>the id of the schema</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>backend</para></entry>
<entry role="parameter_description"><para>the <link linkend="GSettingsBackend"><type>GSettingsBackend</type></link> to use</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>the path to use</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-new-with-backend-and-path.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GSettings"><type>GSettings</type></link> object</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-new-full" role="function" condition="since:2.32">
<title>g_settings_new_full&#160;()</title>
<indexterm zone="g-settings-new-full" role="2.32"><primary sortas="settings_new_full">g_settings_new_full</primary></indexterm>
<programlisting language="C"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
g_settings_new_full (<parameter><link linkend="GSettingsSchema"><type>GSettingsSchema</type></link> *schema</parameter>,
                     <parameter><link linkend="GSettingsBackend"><type>GSettingsBackend</type></link> *backend</parameter>,
                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);</programlisting>
<para>Creates a new <link linkend="GSettings"><type>GSettings</type></link> object with a given schema, backend and
path.</para>
<para>It should be extremely rare that you ever want to use this function.
It is made available for advanced use-cases (such as plugin systems
that want to provide access to schemas loaded from custom locations,
etc).</para>
<para>At the most basic level, a <link linkend="GSettings"><type>GSettings</type></link> object is a pure composition of
4 things: a <link linkend="GSettingsSchema"><type>GSettingsSchema</type></link>, a <link linkend="GSettingsBackend"><type>GSettingsBackend</type></link>, a path within that
backend, and a <link linkend="GMainContext"><type>GMainContext</type></link> to which signals are dispatched.</para>
<para>This constructor therefore gives you full control over constructing
<link linkend="GSettings"><type>GSettings</type></link> instances.  The first 3 parameters are given directly as
<parameter>schema</parameter>
, <parameter>backend</parameter>
 and <parameter>path</parameter>
, and the main context is taken from the
thread-default (as per <link linkend="g-settings-new"><function>g_settings_new()</function></link>).</para>
<para>If <parameter>backend</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then the default backend is used.</para>
<para>If <parameter>path</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then the path from the schema is used.  It is an
error if <parameter>path</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> and the schema has no path of its own or if
<parameter>path</parameter>
 is non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> and not equal to the path that the schema does
have.</para>
<refsect3 id="g-settings-new-full.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>schema</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettingsSchema"><type>GSettingsSchema</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>backend</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettingsBackend"><type>GSettingsBackend</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>path</para></entry>
<entry role="parameter_description"><para>the path to use. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-new-full.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GSettings"><type>GSettings</type></link> object</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>
<refsect2 id="g-settings-sync" role="function">
<title>g_settings_sync&#160;()</title>
<indexterm zone="g-settings-sync"><primary sortas="settings_sync">g_settings_sync</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_sync (<parameter><type>void</type></parameter>);</programlisting>
<para>Ensures that all pending operations are complete for the default backend.</para>
<para>Writes made to a <link linkend="GSettings"><type>GSettings</type></link> are handled asynchronously.  For this
reason, it is very unlikely that the changes have it to disk by the
time <link linkend="g-settings-set"><function>g_settings_set()</function></link> returns.</para>
<para>This call will block until all of the writes have made it to the
backend.  Since the mainloop is not running, no change notifications
will be dispatched during this call (but some may be queued by the
time the call is done).</para>
</refsect2>
<refsect2 id="g-settings-get-value" role="function" condition="since:2.26">
<title>g_settings_get_value&#160;()</title>
<indexterm zone="g-settings-get-value" role="2.26"><primary sortas="settings_get_value">g_settings_get_value</primary></indexterm>
<programlisting language="C"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
g_settings_get_value (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored in <parameter>settings</parameter>
 for <parameter>key</parameter>
.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-value.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GVariant"><type>GVariant</type></link></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set-value" role="function" condition="since:2.26">
<title>g_settings_set_value&#160;()</title>
<indexterm zone="g-settings-set-value" role="2.26"><primary sortas="settings_set_value">g_settings_set_value</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_value (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                      <parameter><link linkend="GVariant"><type>GVariant</type></link> *value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
 or for <parameter>value</parameter>
 to have the incorrect type, per
the schema.</para>
<para>If <parameter>value</parameter>
 is floating then this function consumes the reference.</para>
<refsect3 id="g-settings-set-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVariant"><type>GVariant</type></link> of the correct type</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-value.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-is-writable" role="function" condition="since:2.26">
<title>g_settings_is_writable&#160;()</title>
<indexterm zone="g-settings-is-writable" role="2.26"><primary sortas="settings_is_writable">g_settings_is_writable</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_is_writable (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                        <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);</programlisting>
<para>Finds out if a key can be written or not</para>
<refsect3 id="g-settings-is-writable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name of a key</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-is-writable.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the key <parameter>name</parameter>
is writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-delay" role="function" condition="since:2.26">
<title>g_settings_delay&#160;()</title>
<indexterm zone="g-settings-delay" role="2.26"><primary sortas="settings_delay">g_settings_delay</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_delay (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>);</programlisting>
<para>Changes the <link linkend="GSettings"><type>GSettings</type></link> object into 'delay-apply' mode. In this
mode, changes to <parameter>settings</parameter>
 are not immediately propagated to the
backend, but kept locally until <link linkend="g-settings-apply"><function>g_settings_apply()</function></link> is called.</para>
<refsect3 id="g-settings-delay.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-apply" role="function">
<title>g_settings_apply&#160;()</title>
<indexterm zone="g-settings-apply"><primary sortas="settings_apply">g_settings_apply</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_apply (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>);</programlisting>
<para>Applies any changes that have been made to the settings.  This
function does nothing unless <parameter>settings</parameter>
 is in 'delay-apply' mode;
see <link linkend="g-settings-delay"><function>g_settings_delay()</function></link>.  In the normal case settings are always
applied immediately.</para>
<refsect3 id="g-settings-apply.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> instance</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-settings-revert" role="function">
<title>g_settings_revert&#160;()</title>
<indexterm zone="g-settings-revert"><primary sortas="settings_revert">g_settings_revert</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_revert (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>);</programlisting>
<para>Reverts all non-applied changes to the settings.  This function
does nothing unless <parameter>settings</parameter>
 is in 'delay-apply' mode; see
<link linkend="g-settings-delay"><function>g_settings_delay()</function></link>.  In the normal case settings are always applied
immediately.</para>
<para>Change notifications will be emitted for affected keys.</para>
<refsect3 id="g-settings-revert.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> instance</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-settings-get-has-unapplied" role="function" condition="since:2.26">
<title>g_settings_get_has_unapplied&#160;()</title>
<indexterm zone="g-settings-get-has-unapplied" role="2.26"><primary sortas="settings_get_has_unapplied">g_settings_get_has_unapplied</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_get_has_unapplied (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>);</programlisting>
<para>Returns whether the <link linkend="GSettings"><type>GSettings</type></link> object has any unapplied
changes.  This can only be the case if it is in 'delayed-apply' mode.</para>
<refsect3 id="g-settings-get-has-unapplied.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-has-unapplied.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>settings</parameter>
has unapplied changes</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-get-child" role="function" condition="since:2.26">
<title>g_settings_get_child&#160;()</title>
<indexterm zone="g-settings-get-child" role="2.26"><primary sortas="settings_get_child">g_settings_get_child</primary></indexterm>
<programlisting language="C"><link linkend="GSettings"><returnvalue>GSettings</returnvalue></link>&#160;*
g_settings_get_child (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);</programlisting>
<para>Creates a child settings object which has a base path of
<literal>base-path/@name</literal>, where <literal>base-path</literal> is the base path of
<parameter>settings</parameter>
.</para>
<para>The schema for the child settings object must have been declared
in the schema of <parameter>settings</parameter>
 using a &lt;child> element.</para>
<refsect3 id="g-settings-get-child.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name of the child schema</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-child.returns" role="returns">
<title>Returns</title>
<para>a 'child' settings object. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-reset" role="function">
<title>g_settings_reset&#160;()</title>
<indexterm zone="g-settings-reset"><primary sortas="settings_reset">g_settings_reset</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_reset (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                  <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Resets <parameter>key</parameter>
 to its default value.</para>
<para>This call resets the key, as much as possible, to its default value.
That might the value specified in the schema or the one set by the
administrator.</para>
<refsect3 id="g-settings-reset.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of a key</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="g-settings-get-user-value" role="function" condition="since:2.40">
<title>g_settings_get_user_value&#160;()</title>
<indexterm zone="g-settings-get-user-value" role="2.40"><primary sortas="settings_get_user_value">g_settings_get_user_value</primary></indexterm>
<programlisting language="C"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
g_settings_get_user_value (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                           <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Checks the "user value" of a key, if there is one.</para>
<para>The user value of a key is the last value that was set by the user.</para>
<para>After calling <link linkend="g-settings-reset"><function>g_settings_reset()</function></link> this function should always return
<link linkend="NULL:CAPS"><literal>NULL</literal></link> (assuming something is not wrong with the system
configuration).</para>
<para>It is possible that <link linkend="g-settings-get-value"><function>g_settings_get_value()</function></link> will return a different
value than this function.  This can happen in the case that the user
set a value for a key that was subsequently locked down by the system
administrator -- this function will return the user's old value.</para>
<para>This function may be useful for adding a "reset" option to a UI or
for providing indication that a particular value has been changed.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-user-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the user value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-user-value.returns" role="returns">
<title>Returns</title>
<para>the user's value, if set. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-settings-get-default-value" role="function" condition="since:2.40">
<title>g_settings_get_default_value&#160;()</title>
<indexterm zone="g-settings-get-default-value" role="2.40"><primary sortas="settings_get_default_value">g_settings_get_default_value</primary></indexterm>
<programlisting language="C"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
g_settings_get_default_value (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the "default value" of a key.</para>
<para>This is the value that would be read if <link linkend="g-settings-reset"><function>g_settings_reset()</function></link> were to be
called on the key.</para>
<para>Note that this may be a different value than returned by
<link linkend="g-settings-schema-key-get-default-value"><function>g_settings_schema_key_get_default_value()</function></link> if the system administrator
has provided a default value.</para>
<para>Comparing the return values of <link linkend="g-settings-get-default-value"><function>g_settings_get_default_value()</function></link> and
<link linkend="g-settings-get-value"><function>g_settings_get_value()</function></link> is not sufficient for determining if a value
has been set because the user may have explicitly set the value to
something that happens to be equal to the default.  The difference
here is that if the default changes in the future, the user's key
will still be set.</para>
<para>This function may be useful for adding an indication to a UI of what
the default value was before the user set it.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-default-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the default value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-default-value.returns" role="returns">
<title>Returns</title>
<para>the default value. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.40">2.40</link></para></refsect2>
<refsect2 id="g-settings-list-schemas" role="function" condition="deprecated|since:2.26">
<title>g_settings_list_schemas&#160;()</title>
<indexterm zone="g-settings-list-schemas" role="deprecated"><primary sortas="settings_list_schemas">g_settings_list_schemas</primary></indexterm><indexterm zone="g-settings-list-schemas" role="2.26"><primary sortas="settings_list_schemas">g_settings_list_schemas</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;* const *
g_settings_list_schemas (<parameter><type>void</type></parameter>);</programlisting>
<warning><para><literal>g_settings_list_schemas</literal> has been deprecated since version 2.40 and should not be used in newly-written code.</para> <para>Use <link linkend="g-settings-schema-source-list-schemas"><function>g_settings_schema_source_list_schemas()</function></link> instead.
If you used <link linkend="g-settings-list-schemas"><function>g_settings_list_schemas()</function></link> to check for the presence of
a particular schema, use <link linkend="g-settings-schema-source-lookup"><function>g_settings_schema_source_lookup()</function></link> instead
of your whole loop.</para>
</warning>
<para>Deprecated.</para>
<refsect3 id="g-settings-list-schemas.returns" role="returns">
<title>Returns</title>
<para>a list of <link linkend="GSettings"><type>GSettings</type></link>
schemas that are available.  The list must not be modified or
freed. </para>
<para><emphasis role="annotation">[<acronym>element-type</acronym> utf8][<acronym>transfer none</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-list-relocatable-schemas" role="function" condition="deprecated:2.40: Use g_settings_schema_source_list_schemas() instead|since:2.28">
<title>g_settings_list_relocatable_schemas&#160;()</title>
<indexterm zone="g-settings-list-relocatable-schemas" role="deprecated"><primary sortas="settings_list_relocatable_schemas">g_settings_list_relocatable_schemas</primary></indexterm><indexterm zone="g-settings-list-relocatable-schemas" role="2.28"><primary sortas="settings_list_relocatable_schemas">g_settings_list_relocatable_schemas</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;* const *
g_settings_list_relocatable_schemas (<parameter><type>void</type></parameter>);</programlisting>
<warning><para><literal>g_settings_list_relocatable_schemas</literal> has been deprecated since version 2.40 and should not be used in newly-written code.</para> <para>Use <link linkend="g-settings-schema-source-list-schemas"><function>g_settings_schema_source_list_schemas()</function></link> instead</para>
</warning>
<para>Deprecated.</para>
<refsect3 id="g-settings-list-relocatable-schemas.returns" role="returns">
<title>Returns</title>
<para>a list of relocatable
<link linkend="GSettings"><type>GSettings</type></link> schemas that are available.  The list must not be
modified or freed. </para>
<para><emphasis role="annotation">[<acronym>element-type</acronym> utf8][<acronym>transfer none</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-settings-list-keys" role="function" condition="deprecated:">
<title>g_settings_list_keys&#160;()</title>
<indexterm zone="g-settings-list-keys" role="deprecated"><primary sortas="settings_list_keys">g_settings_list_keys</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
g_settings_list_keys (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>);</programlisting>
<warning><para><literal>g_settings_list_keys</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>Introspects the list of keys on <parameter>settings</parameter>
.</para>
<para>You should probably not be calling this function from "normal" code
(since you should already know what keys are in your schema).  This
function is intended for introspection reasons.</para>
<para>You should free the return value with <link linkend="g-strfreev"><function>g_strfreev()</function></link> when you are done
with it.</para>
<refsect3 id="g-settings-list-keys.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-list-keys.returns" role="returns">
<title>Returns</title>
<para>a list of the keys on <parameter>settings</parameter>
. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>element-type</acronym> utf8]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-settings-list-children" role="function">
<title>g_settings_list_children&#160;()</title>
<indexterm zone="g-settings-list-children"><primary sortas="settings_list_children">g_settings_list_children</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
g_settings_list_children (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>);</programlisting>
<para>Gets the list of children on <parameter>settings</parameter>
.</para>
<para>The list is exactly the list of strings for which it is not an error
to call <link linkend="g-settings-get-child"><function>g_settings_get_child()</function></link>.</para>
<para>For GSettings objects that are lists, this value can change at any
time. Note that there is a race condition here: you may
request a child after listing it only for it to have been destroyed
in the meantime.  For this reason, <link linkend="g-settings-get-child"><function>g_settings_get_child()</function></link> may return
<link linkend="NULL:CAPS"><literal>NULL</literal></link> even for a child that was listed by this function.</para>
<para>For GSettings objects that are not lists, you should probably not be
calling this function from "normal" code (since you should already
know what children are in your schema).  This function may still be
useful there for introspection reasons, however.</para>
<para>You should free the return value with <link linkend="g-strfreev"><function>g_strfreev()</function></link> when you are done
with it.</para>
<refsect3 id="g-settings-list-children.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-list-children.returns" role="returns">
<title>Returns</title>
<para>a list of the children on <parameter>settings</parameter>
. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>element-type</acronym> utf8]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-settings-get-range" role="function" condition="deprecated:2.40:Use g_settings_schema_key_get_range() instead.|since:2.28">
<title>g_settings_get_range&#160;()</title>
<indexterm zone="g-settings-get-range" role="deprecated"><primary sortas="settings_get_range">g_settings_get_range</primary></indexterm><indexterm zone="g-settings-get-range" role="2.28"><primary sortas="settings_get_range">g_settings_get_range</primary></indexterm>
<programlisting language="C"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
g_settings_get_range (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<warning><para><literal>g_settings_get_range</literal> has been deprecated since version 2.40 and should not be used in newly-written code.</para> <para>Use <link linkend="g-settings-schema-key-get-range"><function>g_settings_schema_key_get_range()</function></link> instead.</para>
</warning>
<para>Queries the range of a key.</para>
<refsect3 id="g-settings-get-range.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to query the range of</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-settings-range-check" role="function" condition="deprecated:2.40:Use g_settings_schema_key_range_check() instead.|since:2.28">
<title>g_settings_range_check&#160;()</title>
<indexterm zone="g-settings-range-check" role="deprecated"><primary sortas="settings_range_check">g_settings_range_check</primary></indexterm><indexterm zone="g-settings-range-check" role="2.28"><primary sortas="settings_range_check">g_settings_range_check</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_range_check (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                        <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                        <parameter><link linkend="GVariant"><type>GVariant</type></link> *value</parameter>);</programlisting>
<warning><para><literal>g_settings_range_check</literal> has been deprecated since version 2.40 and should not be used in newly-written code.</para> <para>Use <link linkend="g-settings-schema-key-range-check"><function>g_settings_schema_key_range_check()</function></link> instead.</para>
</warning>
<para>Checks if the given <parameter>value</parameter>
 is of the correct type and within the
permitted range for <parameter>key</parameter>
.</para>
<refsect3 id="g-settings-range-check.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to check</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to check</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-range-check.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>value</parameter>
is valid for <parameter>key</parameter>
</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="g-settings-get" role="function" condition="since:2.26">
<title>g_settings_get&#160;()</title>
<indexterm zone="g-settings-get" role="2.26"><primary sortas="settings_get">g_settings_get</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_get (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                <parameter>const <link linkend="gchar"><type>gchar</type></link> *format</parameter>,
                <parameter>...</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
.</para>
<para>A convenience function that combines <link linkend="g-settings-get-value"><function>g_settings_get_value()</function></link> with
<link linkend="g-variant-get"><function>g_variant_get()</function></link>.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
 or for the <link linkend="GVariantType"><type>GVariantType</type></link> of <parameter>format</parameter>
 to mismatch
the type given in the schema.</para>
<refsect3 id="g-settings-get.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>format</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVariant"><type>GVariant</type></link> format string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>arguments as per <parameter>format</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set" role="function" condition="since:2.26">
<title>g_settings_set&#160;()</title>
<indexterm zone="g-settings-set" role="2.26"><primary sortas="settings_set">g_settings_set</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                <parameter>const <link linkend="gchar"><type>gchar</type></link> *format</parameter>,
                <parameter>...</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience function that combines <link linkend="g-settings-set-value"><function>g_settings_set_value()</function></link> with
<link linkend="g-variant-new"><function>g_variant_new()</function></link>.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
 or for the <link linkend="GVariantType"><type>GVariantType</type></link> of <parameter>format</parameter>
 to mismatch
the type given in the schema.</para>
<refsect3 id="g-settings-set.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>format</para></entry>
<entry role="parameter_description"><para>a <link linkend="GVariant"><type>GVariant</type></link> format string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>arguments as per <parameter>format</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-get-boolean" role="function" condition="since:2.26">
<title>g_settings_get_boolean&#160;()</title>
<indexterm zone="g-settings-get-boolean" role="2.26"><primary sortas="settings_get_boolean">g_settings_get_boolean</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_get_boolean (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                        <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-get"><function>g_settings_get()</function></link> for booleans.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a boolean type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-boolean.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-boolean.returns" role="returns">
<title>Returns</title>
<para> a boolean</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set-boolean" role="function" condition="since:2.26">
<title>g_settings_set_boolean&#160;()</title>
<indexterm zone="g-settings-set-boolean" role="2.26"><primary sortas="settings_set_boolean">g_settings_set_boolean</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_boolean (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                        <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                        <parameter><link linkend="gboolean"><type>gboolean</type></link> value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-set"><function>g_settings_set()</function></link> for booleans.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a boolean type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-set-boolean.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set it to</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-boolean.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-get-int" role="function" condition="since:2.26">
<title>g_settings_get_int&#160;()</title>
<indexterm zone="g-settings-get-int" role="2.26"><primary sortas="settings_get_int">g_settings_get_int</primary></indexterm>
<programlisting language="C"><link linkend="gint"><returnvalue>gint</returnvalue></link>
g_settings_get_int (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                    <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-get"><function>g_settings_get()</function></link> for 32-bit integers.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a int32 type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-int.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-int.returns" role="returns">
<title>Returns</title>
<para> an integer</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set-int" role="function" condition="since:2.26">
<title>g_settings_set_int&#160;()</title>
<indexterm zone="g-settings-set-int" role="2.26"><primary sortas="settings_set_int">g_settings_set_int</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_int (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                    <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                    <parameter><link linkend="gint"><type>gint</type></link> value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-set"><function>g_settings_set()</function></link> for 32-bit integers.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a int32 type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-set-int.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set it to</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-int.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-get-int64" role="function" condition="since:2.50">
<title>g_settings_get_int64&#160;()</title>
<indexterm zone="g-settings-get-int64" role="2.50"><primary sortas="settings_get_int64">g_settings_get_int64</primary></indexterm>
<programlisting language="C"><link linkend="gint64"><returnvalue>gint64</returnvalue></link>
g_settings_get_int64 (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-get"><function>g_settings_get()</function></link> for 64-bit integers.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a int64 type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-int64.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-int64.returns" role="returns">
<title>Returns</title>
<para> a 64-bit integer</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.50">2.50</link></para></refsect2>
<refsect2 id="g-settings-set-int64" role="function" condition="since:2.50">
<title>g_settings_set_int64&#160;()</title>
<indexterm zone="g-settings-set-int64" role="2.50"><primary sortas="settings_set_int64">g_settings_set_int64</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_int64 (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                      <parameter><link linkend="gint64"><type>gint64</type></link> value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-set"><function>g_settings_set()</function></link> for 64-bit integers.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a int64 type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-set-int64.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set it to</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-int64.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.50">2.50</link></para></refsect2>
<refsect2 id="g-settings-get-uint" role="function" condition="since:2.30">
<title>g_settings_get_uint&#160;()</title>
<indexterm zone="g-settings-get-uint" role="2.30"><primary sortas="settings_get_uint">g_settings_get_uint</primary></indexterm>
<programlisting language="C"><link linkend="guint"><returnvalue>guint</returnvalue></link>
g_settings_get_uint (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-get"><function>g_settings_get()</function></link> for 32-bit unsigned
integers.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a uint32 type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-uint.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-uint.returns" role="returns">
<title>Returns</title>
<para> an unsigned integer</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="g-settings-set-uint" role="function" condition="since:2.30">
<title>g_settings_set_uint&#160;()</title>
<indexterm zone="g-settings-set-uint" role="2.30"><primary sortas="settings_set_uint">g_settings_set_uint</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_uint (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                     <parameter><link linkend="guint"><type>guint</type></link> value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-set"><function>g_settings_set()</function></link> for 32-bit unsigned
integers.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a uint32 type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-set-uint.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set it to</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-uint.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.30">2.30</link></para></refsect2>
<refsect2 id="g-settings-get-uint64" role="function" condition="since:2.50">
<title>g_settings_get_uint64&#160;()</title>
<indexterm zone="g-settings-get-uint64" role="2.50"><primary sortas="settings_get_uint64">g_settings_get_uint64</primary></indexterm>
<programlisting language="C"><link linkend="guint64"><returnvalue>guint64</returnvalue></link>
g_settings_get_uint64 (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-get"><function>g_settings_get()</function></link> for 64-bit unsigned
integers.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a uint64 type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-uint64.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-uint64.returns" role="returns">
<title>Returns</title>
<para> a 64-bit unsigned integer</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.50">2.50</link></para></refsect2>
<refsect2 id="g-settings-set-uint64" role="function" condition="since:2.50">
<title>g_settings_set_uint64&#160;()</title>
<indexterm zone="g-settings-set-uint64" role="2.50"><primary sortas="settings_set_uint64">g_settings_set_uint64</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_uint64 (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                       <parameter><link linkend="guint64"><type>guint64</type></link> value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-set"><function>g_settings_set()</function></link> for 64-bit unsigned
integers.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a uint64 type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-set-uint64.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set it to</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-uint64.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.50">2.50</link></para></refsect2>
<refsect2 id="g-settings-get-double" role="function" condition="since:2.26">
<title>g_settings_get_double&#160;()</title>
<indexterm zone="g-settings-get-double" role="2.26"><primary sortas="settings_get_double">g_settings_get_double</primary></indexterm>
<programlisting language="C"><link linkend="gdouble"><returnvalue>gdouble</returnvalue></link>
g_settings_get_double (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-get"><function>g_settings_get()</function></link> for doubles.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a 'double' type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-double.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-double.returns" role="returns">
<title>Returns</title>
<para> a double</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set-double" role="function" condition="since:2.26">
<title>g_settings_set_double&#160;()</title>
<indexterm zone="g-settings-set-double" role="2.26"><primary sortas="settings_set_double">g_settings_set_double</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_double (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                       <parameter><link linkend="gdouble"><type>gdouble</type></link> value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-set"><function>g_settings_set()</function></link> for doubles.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a 'double' type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-set-double.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set it to</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-double.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-get-string" role="function" condition="since:2.26">
<title>g_settings_get_string&#160;()</title>
<indexterm zone="g-settings-get-string" role="2.26"><primary sortas="settings_get_string">g_settings_get_string</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
g_settings_get_string (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-get"><function>g_settings_get()</function></link> for strings.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a string type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-string.returns" role="returns">
<title>Returns</title>
<para> a newly-allocated string</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set-string" role="function" condition="since:2.26">
<title>g_settings_set_string&#160;()</title>
<indexterm zone="g-settings-set-string" role="2.26"><primary sortas="settings_set_string">g_settings_set_string</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_string (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-set"><function>g_settings_set()</function></link> for strings.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having a string type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-set-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set it to</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-string.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-get-strv" role="function" condition="since:2.26">
<title>g_settings_get_strv&#160;()</title>
<indexterm zone="g-settings-get-strv" role="2.26"><primary sortas="settings_get_strv">g_settings_get_strv</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;**
g_settings_get_strv (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>A convenience variant of <link linkend="g-settings-get"><function>g_settings_get()</function></link> for string arrays.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having an array of strings type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-get-strv.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-strv.returns" role="returns">
<title>Returns</title>
<para>a
newly-allocated, <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated array of strings, the value that
is stored at <parameter>key</parameter>
in <parameter>settings</parameter>
. </para>
<para><emphasis role="annotation">[<acronym>array</acronym> zero-terminated=1][<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set-strv" role="function" condition="since:2.26">
<title>g_settings_set_strv&#160;()</title>
<indexterm zone="g-settings-set-strv" role="2.26"><primary sortas="settings_set_strv">g_settings_set_strv</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_strv (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *const *value</parameter>);</programlisting>
<para>Sets <parameter>key</parameter>
 in <parameter>settings</parameter>
 to <parameter>value</parameter>
.</para>
<para>A convenience variant of <link linkend="g-settings-set"><function>g_settings_set()</function></link> for string arrays.  If
<parameter>value</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then <parameter>key</parameter>
 is set to be the empty array.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't specified as
having an array of strings type in the schema for <parameter>settings</parameter>
.</para>
<refsect3 id="g-settings-set-strv.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key to set</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the value to set it to, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>nullable</acronym>][<acronym>array</acronym> zero-terminated=1]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-strv.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if setting the key succeeded,
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the key was not writable</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-get-enum" role="function" condition="since:2.26">
<title>g_settings_get_enum&#160;()</title>
<indexterm zone="g-settings-get-enum" role="2.26"><primary sortas="settings_get_enum">g_settings_get_enum</primary></indexterm>
<programlisting language="C"><link linkend="gint"><returnvalue>gint</returnvalue></link>
g_settings_get_enum (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored in <parameter>settings</parameter>
 for <parameter>key</parameter>
 and converts it
to the enum value that it represents.</para>
<para>In order to use this function the type of the value must be a string
and it must be marked in the schema file as an enumerated type.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
 or is not marked as an enumerated type.</para>
<para>If the value stored in the configuration database is not a valid
value for the enumerated type then this function will return the
default value.</para>
<refsect3 id="g-settings-get-enum.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-enum.returns" role="returns">
<title>Returns</title>
<para> the enum value</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set-enum" role="function">
<title>g_settings_set_enum&#160;()</title>
<indexterm zone="g-settings-set-enum"><primary sortas="settings_set_enum">g_settings_set_enum</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_enum (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                     <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                     <parameter><link linkend="gint"><type>gint</type></link> value</parameter>);</programlisting>
<para>Looks up the enumerated type nick for <parameter>value</parameter>
 and writes it to <parameter>key</parameter>
,
within <parameter>settings</parameter>
.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
 or is not marked as an enumerated type, or for
<parameter>value</parameter>
 not to be a valid value for the named type.</para>
<para>After performing the write, accessing <parameter>key</parameter>
 directly with
<link linkend="g-settings-get-string"><function>g_settings_get_string()</function></link> will return the 'nick' associated with
<parameter>value</parameter>
.</para>
<refsect3 id="g-settings-set-enum.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>a key, within <parameter>settings</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>an enumerated value</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-enum.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if the set succeeds</para>
</refsect3></refsect2>
<refsect2 id="g-settings-get-flags" role="function" condition="since:2.26">
<title>g_settings_get_flags&#160;()</title>
<indexterm zone="g-settings-get-flags" role="2.26"><primary sortas="settings_get_flags">g_settings_get_flags</primary></indexterm>
<programlisting language="C"><link linkend="guint"><returnvalue>guint</returnvalue></link>
g_settings_get_flags (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Gets the value that is stored in <parameter>settings</parameter>
 for <parameter>key</parameter>
 and converts it
to the flags value that it represents.</para>
<para>In order to use this function the type of the value must be an array
of strings and it must be marked in the schema file as an flags type.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
 or is not marked as a flags type.</para>
<para>If the value stored in the configuration database is not a valid
value for the flags type then this function will return the default
value.</para>
<refsect3 id="g-settings-get-flags.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-flags.returns" role="returns">
<title>Returns</title>
<para> the flags value</para>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-set-flags" role="function">
<title>g_settings_set_flags&#160;()</title>
<indexterm zone="g-settings-set-flags"><primary sortas="settings_set_flags">g_settings_set_flags</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
g_settings_set_flags (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                      <parameter><link linkend="guint"><type>guint</type></link> value</parameter>);</programlisting>
<para>Looks up the flags type nicks for the bits specified by <parameter>value</parameter>
, puts
them in an array of strings and writes the array to <parameter>key</parameter>
, within
<parameter>settings</parameter>
.</para>
<para>It is a programmer error to give a <parameter>key</parameter>
 that isn't contained in the
schema for <parameter>settings</parameter>
 or is not marked as a flags type, or for <parameter>value</parameter>

to contain any bits that are not value for the named type.</para>
<para>After performing the write, accessing <parameter>key</parameter>
 directly with
<link linkend="g-settings-get-strv"><function>g_settings_get_strv()</function></link> will return an array of 'nicks'; one for each
bit in <parameter>value</parameter>
.</para>
<refsect3 id="g-settings-set-flags.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>a key, within <parameter>settings</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a flags value</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-set-flags.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if the set succeeds</para>
</refsect3></refsect2>
<refsect2 id="GSettingsGetMapping" role="function">
<title>GSettingsGetMapping&#160;()</title>
<indexterm zone="GSettingsGetMapping"><primary sortas="SettingsGetMapping">GSettingsGetMapping</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GSettingsGetMapping<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="GVariant"><type>GVariant</type></link> *value</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> *result</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>The type of the function that is used to convert from a value stored
in a <link linkend="GSettings"><type>GSettings</type></link> to a value that is useful to the application.</para>
<para>If the value is successfully mapped, the result should be stored at
<parameter>result</parameter>
 and <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> returned.  If mapping fails (for example, if <parameter>value</parameter>

is not in the right format) then <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> should be returned.</para>
<para>If <parameter>value</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link> then it means that the mapping function is being
given a "last chance" to successfully return a valid value.  <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
must be returned in this case.</para>
<refsect3 id="GSettingsGetMapping.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>the <link linkend="GVariant"><type>GVariant</type></link> to map, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>result</para></entry>
<entry role="parameter_description"><para>the result of the mapping. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the user data that was passed to
<link linkend="g-settings-get-mapped"><function>g_settings_get_mapped()</function></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="GSettingsGetMapping.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the conversion succeeded, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> in case of an error</para>
</refsect3></refsect2>
<refsect2 id="g-settings-get-mapped" role="function">
<title>g_settings_get_mapped&#160;()</title>
<indexterm zone="g-settings-get-mapped"><primary sortas="settings_get_mapped">g_settings_get_mapped</primary></indexterm>
<programlisting language="C"><link linkend="gpointer"><returnvalue>gpointer</returnvalue></link>
g_settings_get_mapped (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                       <parameter><link linkend="GSettingsGetMapping"><type>GSettingsGetMapping</type></link> mapping</parameter>,
                       <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Gets the value that is stored at <parameter>key</parameter>
 in <parameter>settings</parameter>
, subject to
application-level validation/mapping.</para>
<para>You should use this function when the application needs to perform
some processing on the value of the key (for example, parsing).  The
<parameter>mapping</parameter>
 function performs that processing.  If the function
indicates that the processing was unsuccessful (due to a parse error,
for example) then the mapping is tried again with another value.</para>
<para>This allows a robust 'fall back to defaults' behaviour to be
implemented somewhat automatically.</para>
<para>The first value that is tried is the user's setting for the key.  If
the mapping function fails to map this value, other values may be
tried in an unspecified order (system or site defaults, translated
schema default values, untranslated schema default values, etc).</para>
<para>If the mapping function fails for all possible values, one additional
attempt is made: the mapping function is called with a <link linkend="NULL:CAPS"><literal>NULL</literal></link> value.
If the mapping function still indicates failure at this point then
the application will be aborted.</para>
<para>The result parameter for the <parameter>mapping</parameter>
 function is pointed to a
<link linkend="gpointer"><type>gpointer</type></link> which is initially set to <link linkend="NULL:CAPS"><literal>NULL</literal></link>.  The same pointer is given
to each invocation of <parameter>mapping</parameter>
.  The final value of that <link linkend="gpointer"><type>gpointer</type></link> is
what is returned by this function.  <link linkend="NULL:CAPS"><literal>NULL</literal></link> is valid; it is returned
just as any other value would be.</para>
<refsect3 id="g-settings-get-mapped.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to get the value for</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mapping</para></entry>
<entry role="parameter_description"><para>the function to map the value in the
settings database to the value used by the application. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope call</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data for <parameter>mapping</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-get-mapped.returns" role="returns">
<title>Returns</title>
<para>the result, which may be <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="g-settings-bind" role="function" condition="since:2.26">
<title>g_settings_bind&#160;()</title>
<indexterm zone="g-settings-bind" role="2.26"><primary sortas="settings_bind">g_settings_bind</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_bind (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                 <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                 <parameter><link linkend="gpointer"><type>gpointer</type></link> object</parameter>,
                 <parameter>const <link linkend="gchar"><type>gchar</type></link> *property</parameter>,
                 <parameter><link linkend="GSettingsBindFlags"><type>GSettingsBindFlags</type></link> flags</parameter>);</programlisting>
<para>Create a binding between the <parameter>key</parameter>
 in the <parameter>settings</parameter>
 object
and the property <parameter>property</parameter>
 of <parameter>object</parameter>
.</para>
<para>The binding uses the default GIO mapping functions to map
between the settings and property values. These functions
handle booleans, numeric types and string types in a
straightforward way. Use <link linkend="g-settings-bind-with-mapping"><function>g_settings_bind_with_mapping()</function></link> if
you need a custom mapping, or map between types that are not
supported by the default mapping functions.</para>
<para>Unless the <parameter>flags</parameter>
 include <link linkend="G-SETTINGS-BIND-NO-SENSITIVITY:CAPS"><literal>G_SETTINGS_BIND_NO_SENSITIVITY</literal></link>, this
function also establishes a binding between the writability of
<parameter>key</parameter>
 and the "sensitive" property of <parameter>object</parameter>
 (if <parameter>object</parameter>
 has
a boolean property by that name). See <link linkend="g-settings-bind-writable"><function>g_settings_bind_writable()</function></link>
for more details about writable bindings.</para>
<para>Note that the lifecycle of the binding is tied to <parameter>object</parameter>
,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.</para>
<refsect3 id="g-settings-bind.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to bind</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> GObject.Object]</emphasis></entry></row>
<row><entry role="parameter_name"><para>property</para></entry>
<entry role="parameter_description"><para>the name of the property to bind</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags for the binding</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-bind-with-mapping" role="function" condition="since:2.26">
<title>g_settings_bind_with_mapping&#160;()</title>
<indexterm zone="g-settings-bind-with-mapping" role="2.26"><primary sortas="settings_bind_with_mapping">g_settings_bind_with_mapping</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_bind_with_mapping (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                              <parameter><link linkend="gpointer"><type>gpointer</type></link> object</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *property</parameter>,
                              <parameter><link linkend="GSettingsBindFlags"><type>GSettingsBindFlags</type></link> flags</parameter>,
                              <parameter><link linkend="GSettingsBindGetMapping"><type>GSettingsBindGetMapping</type></link> get_mapping</parameter>,
                              <parameter><link linkend="GSettingsBindSetMapping"><type>GSettingsBindSetMapping</type></link> set_mapping</parameter>,
                              <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                              <parameter><link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> destroy</parameter>);</programlisting>
<para>Create a binding between the <parameter>key</parameter>
 in the <parameter>settings</parameter>
 object
and the property <parameter>property</parameter>
 of <parameter>object</parameter>
.</para>
<para>The binding uses the provided mapping functions to map between
settings and property values.</para>
<para>Note that the lifecycle of the binding is tied to <parameter>object</parameter>
,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.</para>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para><refsect3 id="g-settings-bind-with-mapping.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to bind</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> GObject.Object]</emphasis></entry></row>
<row><entry role="parameter_name"><para>property</para></entry>
<entry role="parameter_description"><para>the name of the property to bind</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags for the binding</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>get_mapping</para></entry>
<entry role="parameter_description"><para>a function that gets called to convert values
from <parameter>settings</parameter>
to <parameter>object</parameter>
, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to use the default GIO mapping</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>set_mapping</para></entry>
<entry role="parameter_description"><para>a function that gets called to convert values
from <parameter>object</parameter>
to <parameter>settings</parameter>
, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to use the default GIO mapping</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>data that gets passed to <parameter>get_mapping</parameter>
and <parameter>set_mapping</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>destroy</para></entry>
<entry role="parameter_description"><para><link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-bind-writable" role="function" condition="since:2.26">
<title>g_settings_bind_writable&#160;()</title>
<indexterm zone="g-settings-bind-writable" role="2.26"><primary sortas="settings_bind_writable">g_settings_bind_writable</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_bind_writable (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                          <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                          <parameter><link linkend="gpointer"><type>gpointer</type></link> object</parameter>,
                          <parameter>const <link linkend="gchar"><type>gchar</type></link> *property</parameter>,
                          <parameter><link linkend="gboolean"><type>gboolean</type></link> inverted</parameter>);</programlisting>
<para>Create a binding between the writability of <parameter>key</parameter>
 in the
<parameter>settings</parameter>
 object and the property <parameter>property</parameter>
 of <parameter>object</parameter>
.
The property must be boolean; "sensitive" or "visible"
properties of widgets are the most likely candidates.</para>
<para>Writable bindings are always uni-directional; changes of the
writability of the setting will be propagated to the object
property, not the other way.</para>
<para>When the <parameter>inverted</parameter>
 argument is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, the binding inverts the
value as it passes from the setting to the object, i.e. <parameter>property</parameter>

will be set to <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the key is not writable.</para>
<para>Note that the lifecycle of the binding is tied to <parameter>object</parameter>
,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.</para>
<refsect3 id="g-settings-bind-writable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key to bind</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>object</para></entry>
<entry role="parameter_description"><para>a <link linkend="GObject"><type>GObject</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> GObject.Object]</emphasis></entry></row>
<row><entry role="parameter_name"><para>property</para></entry>
<entry role="parameter_description"><para>the name of a boolean property to bind</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>inverted</para></entry>
<entry role="parameter_description"><para>whether to 'invert' the value</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="g-settings-unbind" role="function" condition="since:2.26">
<title>g_settings_unbind&#160;()</title>
<indexterm zone="g-settings-unbind" role="2.26"><primary sortas="settings_unbind">g_settings_unbind</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
g_settings_unbind (<parameter><link linkend="gpointer"><type>gpointer</type></link> object</parameter>,
                   <parameter>const <link linkend="gchar"><type>gchar</type></link> *property</parameter>);</programlisting>
<para>Removes an existing binding for <parameter>property</parameter>
 on <parameter>object</parameter>
.</para>
<para>Note that bindings are automatically removed when the
object is finalized, so it is rarely necessary to call this
function.</para>
<refsect3 id="g-settings-unbind.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>object</para></entry>
<entry role="parameter_description"><para>the object. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>type</acronym> GObject.Object]</emphasis></entry></row>
<row><entry role="parameter_name"><para>property</para></entry>
<entry role="parameter_description"><para>the property whose binding is removed</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-2.26">2.26</link></para></refsect2>
<refsect2 id="GSettingsBindSetMapping" role="function">
<title>GSettingsBindSetMapping&#160;()</title>
<indexterm zone="GSettingsBindSetMapping"><primary sortas="SettingsBindSetMapping">GSettingsBindSetMapping</primary></indexterm>
<programlisting language="C"><link linkend="GVariant"><returnvalue>GVariant</returnvalue></link>&#160;*
<phrase role="c_punctuation">(</phrase>*GSettingsBindSetMapping<phrase role="c_punctuation">)</phrase> (<parameter>const <link linkend="GValue"><type>GValue</type></link> *value</parameter>,
                            <parameter>const <link linkend="GVariantType"><type>GVariantType</type></link> *expected_type</parameter>,
                            <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>The type for the function that is used to convert an object property
value to a <link linkend="GVariant"><type>GVariant</type></link> for storing it in <link linkend="GSettings"><type>GSettings</type></link>.</para>
<refsect3 id="GSettingsBindSetMapping.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>a <link linkend="GValue"><type>GValue</type></link> containing the property value to map</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>expected_type</para></entry>
<entry role="parameter_description"><para>the <link linkend="GVariantType"><type>GVariantType</type></link> to create</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data that was specified when the binding was created</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="GSettingsBindSetMapping.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GVariant"><type>GVariant</type></link> holding the data from <parameter>value</parameter>
,
or <link linkend="NULL:CAPS"><literal>NULL</literal></link> in case of an error</para>
</refsect3></refsect2>
<refsect2 id="GSettingsBindGetMapping" role="function">
<title>GSettingsBindGetMapping&#160;()</title>
<indexterm zone="GSettingsBindGetMapping"><primary sortas="SettingsBindGetMapping">GSettingsBindGetMapping</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GSettingsBindGetMapping<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="GValue"><type>GValue</type></link> *value</parameter>,
                            <parameter><link linkend="GVariant"><type>GVariant</type></link> *variant</parameter>,
                            <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>The type for the function that is used to convert from <link linkend="GSettings"><type>GSettings</type></link> to
an object property. The <parameter>value</parameter>
 is already initialized to hold values
of the appropriate type.</para>
<refsect3 id="GSettingsBindGetMapping.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>return location for the property value</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>variant</para></entry>
<entry role="parameter_description"><para>the <link linkend="GVariant"><type>GVariant</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data that was specified when the binding was created</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="GSettingsBindGetMapping.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the conversion succeeded, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> in case of an error</para>
</refsect3></refsect2>
<refsect2 id="g-settings-create-action" role="function" condition="since:2.32">
<title>g_settings_create_action&#160;()</title>
<indexterm zone="g-settings-create-action" role="2.32"><primary sortas="settings_create_action">g_settings_create_action</primary></indexterm>
<programlisting language="C"><link linkend="GAction"><returnvalue>GAction</returnvalue></link>&#160;*
g_settings_create_action (<parameter><link linkend="GSettings"><type>GSettings</type></link> *settings</parameter>,
                          <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>Creates a <link linkend="GAction"><type>GAction</type></link> corresponding to a given <link linkend="GSettings"><type>GSettings</type></link> key.</para>
<para>The action has the same name as the key.</para>
<para>The value of the key becomes the state of the action and the action
is enabled when the key is writable.  Changing the state of the
action results in the key being written to.  Changes to the value or
writability of the key cause appropriate change notifications to be
emitted for the action.</para>
<para>For boolean-valued keys, action activations take no parameter and
result in the toggling of the value.  For all other types,
activations take the new value for the key (which must have the
correct type).</para>
<refsect3 id="g-settings-create-action.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>a <link linkend="GSettings"><type>GSettings</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of a key in <parameter>settings</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="g-settings-create-action.returns" role="returns">
<title>Returns</title>
<para>a new <link linkend="GAction"><type>GAction</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3><para role="since">Since: <link linkend="api-index-2.32">2.32</link></para></refsect2>

</refsect1>
<refsect1 id="GSettings.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GSettings-struct" role="struct">
<title>GSettings</title>
<indexterm zone="GSettings-struct"><primary sortas="Settings">GSettings</primary></indexterm>
<programlisting language="C">typedef struct _GSettings GSettings;</programlisting>
<para><link linkend="GSettings"><type>GSettings</type></link> is an opaque data structure and can only be accessed
using the following functions.</para>
</refsect2>
<refsect2 id="GSettingsBindFlags" role="enum">
<title>enum GSettingsBindFlags</title>
<indexterm zone="GSettingsBindFlags"><primary sortas="SettingsBindFlags">GSettingsBindFlags</primary></indexterm>
<para>Flags used when creating a binding. These flags determine in which
direction the binding works. The default is to synchronize in both
directions.</para>
<refsect3 id="GSettingsBindFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="G-SETTINGS-BIND-DEFAULT:CAPS">G_SETTINGS_BIND_DEFAULT</para></entry>
<entry role="enum_member_description"><para>Equivalent to <literal>G_SETTINGS_BIND_GET|G_SETTINGS_BIND_SET</literal></para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SETTINGS-BIND-GET:CAPS">G_SETTINGS_BIND_GET</para></entry>
<entry role="enum_member_description"><para>Update the <link linkend="GObject"><type>GObject</type></link> property when the setting changes.
    It is an error to use this flag if the property is not writable.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SETTINGS-BIND-SET:CAPS">G_SETTINGS_BIND_SET</para></entry>
<entry role="enum_member_description"><para>Update the setting when the <link linkend="GObject"><type>GObject</type></link> property changes.
    It is an error to use this flag if the property is not readable.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SETTINGS-BIND-NO-SENSITIVITY:CAPS">G_SETTINGS_BIND_NO_SENSITIVITY</para></entry>
<entry role="enum_member_description"><para>Do not try to bind a "sensitivity" property to the writability of the setting</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SETTINGS-BIND-GET-NO-CHANGES:CAPS">G_SETTINGS_BIND_GET_NO_CHANGES</para></entry>
<entry role="enum_member_description"><para>When set in addition to <link linkend="G-SETTINGS-BIND-GET:CAPS"><type>G_SETTINGS_BIND_GET</type></link>, set the <link linkend="GObject"><type>GObject</type></link> property
    value initially from the setting, but do not listen for changes of the setting</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="G-SETTINGS-BIND-INVERT-BOOLEAN:CAPS">G_SETTINGS_BIND_INVERT_BOOLEAN</para></entry>
<entry role="enum_member_description"><para>When passed to <link linkend="g-settings-bind"><function>g_settings_bind()</function></link>, uses a pair of mapping functions that invert
    the boolean value when mapping between the setting and the property.  The setting and property must both
    be booleans.  You cannot pass this flag to <link linkend="g-settings-bind-with-mapping"><function>g_settings_bind_with_mapping()</function></link>.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>
<refsect1 id="GSettings.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GSettings--backend" role="property"><title>The <literal>“backend”</literal> property</title>
<indexterm zone="GSettings--backend"><primary sortas="Settings:backend">GSettings:backend</primary></indexterm>
<programlisting>  “backend”                  <link linkend="GSettingsBackend"><type>GSettingsBackend</type></link>&#160;*</programlisting>
<para>The name of the context that the settings are stored in.</para>
<para>Flags: Read / Write / Construct Only</para>
</refsect2>
<refsect2 id="GSettings--delay-apply" role="property"><title>The <literal>“delay-apply”</literal> property</title>
<indexterm zone="GSettings--delay-apply" role="2.28"><primary sortas="Settings:delay-apply">GSettings:delay-apply</primary></indexterm>
<programlisting>  “delay-apply”              <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>Whether the <link linkend="GSettings"><type>GSettings</type></link> object is in 'delay-apply' mode. See
<link linkend="g-settings-delay"><function>g_settings_delay()</function></link> for details.</para>
<para>Flags: Read</para>
<para>Default value: FALSE</para>
<para role="since">Since: <link linkend="api-index-2.28">2.28</link></para></refsect2>
<refsect2 id="GSettings--has-unapplied" role="property"><title>The <literal>“has-unapplied”</literal> property</title>
<indexterm zone="GSettings--has-unapplied"><primary sortas="Settings:has-unapplied">GSettings:has-unapplied</primary></indexterm>
<programlisting>  “has-unapplied”            <link linkend="gboolean"><type>gboolean</type></link></programlisting>
<para>If this property is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, the <link linkend="GSettings"><type>GSettings</type></link> object has outstanding
changes that will be applied when <link linkend="g-settings-apply"><function>g_settings_apply()</function></link> is called.</para>
<para>Flags: Read</para>
<para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GSettings--path" role="property"><title>The <literal>“path”</literal> property</title>
<indexterm zone="GSettings--path"><primary sortas="Settings:path">GSettings:path</primary></indexterm>
<programlisting>  “path”                     <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>The path within the backend where the settings are stored.</para>
<para>Flags: Read / Write / Construct Only</para>
<para>Default value: NULL</para>
</refsect2>
<refsect2 id="GSettings--schema" role="property"><title>The <literal>“schema”</literal> property</title>
<indexterm zone="GSettings--schema" role="deprecated"><primary sortas="Settings:schema">GSettings:schema</primary></indexterm>
<programlisting>  “schema”                   <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>The name of the schema that describes the types of keys
for this <link linkend="GSettings"><type>GSettings</type></link> object.</para>
<para>The type of this property is *not* <link linkend="GSettingsSchema"><type>GSettingsSchema</type></link>.
<link linkend="GSettingsSchema"><type>GSettingsSchema</type></link> has only existed since version 2.32 and
unfortunately this name was used in previous versions to refer to
the schema ID rather than the schema itself.  Take care to use the
'settings-schema' property if you wish to pass in a
<link linkend="GSettingsSchema"><type>GSettingsSchema</type></link>.</para>
<warning><para><literal>GSettings:schema</literal> has been deprecated since version 2.32 and should not be used in newly-written code.</para> <para>Use the 'schema-id' property instead.  In a future
version, this property may instead refer to a <link linkend="GSettingsSchema"><type>GSettingsSchema</type></link>.</para>
</warning>
<para>Flags: Read / Write / Construct Only</para>
<para>Default value: NULL</para>
</refsect2>
<refsect2 id="GSettings--schema-id" role="property"><title>The <literal>“schema-id”</literal> property</title>
<indexterm zone="GSettings--schema-id"><primary sortas="Settings:schema-id">GSettings:schema-id</primary></indexterm>
<programlisting>  “schema-id”                <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>The name of the schema that describes the types of keys
for this <link linkend="GSettings"><type>GSettings</type></link> object.</para>
<para>Flags: Read / Write / Construct Only</para>
<para>Default value: NULL</para>
</refsect2>
<refsect2 id="GSettings--settings-schema" role="property"><title>The <literal>“settings-schema”</literal> property</title>
<indexterm zone="GSettings--settings-schema"><primary sortas="Settings:settings-schema">GSettings:settings-schema</primary></indexterm>
<programlisting>  “settings-schema”          <link linkend="GSettingsSchema"><type>GSettingsSchema</type></link>&#160;*</programlisting>
<para>The <link linkend="GSettingsSchema"><type>GSettingsSchema</type></link> describing the types of keys for this
<link linkend="GSettings"><type>GSettings</type></link> object.</para>
<para>Ideally, this property would be called 'schema'.  <link linkend="GSettingsSchema"><type>GSettingsSchema</type></link>
has only existed since version 2.32, however, and before then the
'schema' property was used to refer to the ID of the schema rather
than the schema itself.  Take care.</para>
<para>Flags: Read / Write / Construct Only</para>
</refsect2>

</refsect1>
<refsect1 id="GSettings.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GSettings-change-event" role="signal"><title>The <literal>“change-event”</literal> signal</title>
<indexterm zone="GSettings-change-event"><primary sortas="Settings::change-event">GSettings::change-event</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
user_function (<link linkend="GSettings"><type>GSettings</type></link> *settings,
               <link linkend="gpointer"><type>gpointer</type></link>   keys,
               <link linkend="gint"><type>gint</type></link>       n_keys,
               <link linkend="gpointer"><type>gpointer</type></link>   user_data)</programlisting>
<para>The "change-event" signal is emitted once per change event that
affects this settings object.  You should connect to this signal
only if you are interested in viewing groups of changes before they
are split out into multiple emissions of the "changed" signal.
For most use cases it is more appropriate to use the "changed" signal.</para>
<para>In the event that the change event applies to one or more specified
keys, <parameter>keys</parameter>
 will be an array of <link linkend="GQuark"><type>GQuark</type></link> of length <parameter>n_keys</parameter>
.  In the
event that the change event applies to the <link linkend="GSettings"><type>GSettings</type></link> object as a
whole (ie: potentially every key has been changed) then <parameter>keys</parameter>
 will
be <link linkend="NULL:CAPS"><literal>NULL</literal></link> and <parameter>n_keys</parameter>
 will be 0.</para>
<para>The default handler for this signal invokes the "changed" signal
for each affected key.  If any other connected handler returns
<link linkend="TRUE:CAPS"><literal>TRUE</literal></link> then this default functionality will be suppressed.</para>
<refsect3 id="GSettings-change-event.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>the object on which the signal was emitted</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keys</para></entry>
<entry role="parameter_description"><para>an array of <link linkend="GQuarks"><type>GQuarks</type></link> for the changed keys, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=n_keys][<acronym>element-type</acronym> GQuark][<acronym>nullable</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>n_keys</para></entry>
<entry role="parameter_description"><para>the length of the <parameter>keys</parameter>
array, or 0</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="GSettings-change-event.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the
event. FALSE to propagate the event further.</para>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2><refsect2 id="GSettings-changed" role="signal"><title>The <literal>“changed”</literal> signal</title>
<indexterm zone="GSettings-changed"><primary sortas="Settings::changed">GSettings::changed</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GSettings"><type>GSettings</type></link> *settings,
               <link linkend="gchar"><type>gchar</type></link>     *key,
               <link linkend="gpointer"><type>gpointer</type></link>   user_data)</programlisting>
<para>The "changed" signal is emitted when a key has potentially changed.
You should call one of the <link linkend="g-settings-get"><function>g_settings_get()</function></link> calls to check the new
value.</para>
<para>This signal supports detailed connections.  You can connect to the
detailed signal "changed::x" in order to only receive callbacks
when key "x" changes.</para>
<para>Note that <parameter>settings</parameter>
 only emits this signal if you have read <parameter>key</parameter>
 at
least once while a signal handler was already connected for <parameter>key</parameter>
.</para>
<refsect3 id="GSettings-changed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>the object on which the signal was emitted</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the name of the key that changed</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-DETAILED:CAPS">Has Details</link></para>
</refsect2><refsect2 id="GSettings-writable-change-event" role="signal"><title>The <literal>“writable-change-event”</literal> signal</title>
<indexterm zone="GSettings-writable-change-event"><primary sortas="Settings::writable-change-event">GSettings::writable-change-event</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
user_function (<link linkend="GSettings"><type>GSettings</type></link> *settings,
               <link linkend="guint"><type>guint</type></link>      key,
               <link linkend="gpointer"><type>gpointer</type></link>   user_data)</programlisting>
<para>The "writable-change-event" signal is emitted once per writability
change event that affects this settings object.  You should connect
to this signal if you are interested in viewing groups of changes
before they are split out into multiple emissions of the
"writable-changed" signal.  For most use cases it is more
appropriate to use the "writable-changed" signal.</para>
<para>In the event that the writability change applies only to a single
key, <parameter>key</parameter>
 will be set to the <link linkend="GQuark"><type>GQuark</type></link> for that key.  In the event
that the writability change affects the entire settings object,
<parameter>key</parameter>
 will be 0.</para>
<para>The default handler for this signal invokes the "writable-changed"
and "changed" signals for each affected key.  This is done because
changes in writability might also imply changes in value (if for
example, a new mandatory setting is introduced).  If any other
connected handler returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> then this default functionality
will be suppressed.</para>
<refsect3 id="GSettings-writable-change-event.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>the object on which the signal was emitted</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the quark of the key, or 0</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="GSettings-writable-change-event.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the
event. FALSE to propagate the event further.</para>
</refsect3><para>Flags: <link linkend="G-SIGNAL-RUN-LAST:CAPS">Run Last</link></para>
</refsect2><refsect2 id="GSettings-writable-changed" role="signal"><title>The <literal>“writable-changed”</literal> signal</title>
<indexterm zone="GSettings-writable-changed"><primary sortas="Settings::writable-changed">GSettings::writable-changed</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="GSettings"><type>GSettings</type></link> *settings,
               <link linkend="gchar"><type>gchar</type></link>     *key,
               <link linkend="gpointer"><type>gpointer</type></link>   user_data)</programlisting>
<para>The "writable-changed" signal is emitted when the writability of a
key has potentially changed.  You should call
<link linkend="g-settings-is-writable"><function>g_settings_is_writable()</function></link> in order to determine the new status.</para>
<para>This signal supports detailed connections.  You can connect to the
detailed signal "writable-changed::x" in order to only receive
callbacks when the writability of "x" changes.</para>
<refsect3 id="GSettings-writable-changed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>settings</para></entry>
<entry role="parameter_description"><para>the object on which the signal was emitted</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-DETAILED:CAPS">Has Details</link></para>
</refsect2>
</refsect1>

</refentry>
