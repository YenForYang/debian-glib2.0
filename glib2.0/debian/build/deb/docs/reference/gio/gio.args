<ARG>
<NAME>GAction::enabled</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Enabled</NICK>
<BLURB>If the action can be activated.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GAction::name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Action Name</NICK>
<BLURB>The name used to invoke the action.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GAction::parameter-type</NAME>
<TYPE>GVariantType*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Parameter Type</NICK>
<BLURB>The type of GVariant passed to activate().</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GAction::state</NAME>
<TYPE>GVariant*</TYPE>
<RANGE>GVariant<*></RANGE>
<FLAGS>r</FLAGS>
<NICK>State</NICK>
<BLURB>The state the action is in.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GAction::state-type</NAME>
<TYPE>GVariantType*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>State Type</NICK>
<BLURB>The type of the state kept by the action.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GApplicationCommandLine::arguments</NAME>
<TYPE>GVariant*</TYPE>
<RANGE>GVariant<aay></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Commandline arguments</NICK>
<BLURB>The commandline that caused this ::command-line signal emission.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GApplicationCommandLine::is-remote</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is remote</NICK>
<BLURB>TRUE if this is a remote commandline.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GApplicationCommandLine::options</NAME>
<TYPE>GVariant*</TYPE>
<RANGE>GVariant<a{sv}></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Options</NICK>
<BLURB>The options sent along with the commandline.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GApplicationCommandLine::platform-data</NAME>
<TYPE>GVariant*</TYPE>
<RANGE>GVariant<a{sv}></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Platform data</NICK>
<BLURB>Platform-specific data for the commandline.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GApplication::action-group</NAME>
<TYPE>GActionGroup*</TYPE>
<RANGE></RANGE>
<FLAGS>w</FLAGS>
<NICK>Action group</NICK>
<BLURB>The group of actions that the application exports.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GApplication::application-id</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Application identifier</NICK>
<BLURB>The unique identifier for the application.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GApplication::flags</NAME>
<TYPE>GApplicationFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Application flags</NICK>
<BLURB>Flags specifying the behaviour of the application.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GApplication::inactivity-timeout</NAME>
<TYPE>guint</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Inactivity timeout</NICK>
<BLURB>Time (ms) to stay alive after becoming idle.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GApplication::is-busy</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is busy</NICK>
<BLURB>If this application is currently marked busy.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GApplication::is-registered</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is registered</NICK>
<BLURB>If g_application_register() has been called.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GApplication::is-remote</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is remote</NICK>
<BLURB>If this application instance is remote.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GApplication::resource-base-path</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Resource base path</NICK>
<BLURB>The base resource path for the application.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GBufferedInputStream::buffer-size</NAME>
<TYPE>guint</TYPE>
<RANGE>>= 1</RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Buffer Size</NICK>
<BLURB>The size of the backend buffer.</BLURB>
<DEFAULT>4096</DEFAULT>
</ARG>

<ARG>
<NAME>GBufferedOutputStream::auto-grow</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Auto-grow</NICK>
<BLURB>Whether the buffer should automatically grow.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GBufferedOutputStream::buffer-size</NAME>
<TYPE>guint</TYPE>
<RANGE>>= 1</RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Buffer Size</NICK>
<BLURB>The size of the backend buffer.</BLURB>
<DEFAULT>4096</DEFAULT>
</ARG>

<ARG>
<NAME>GBytesIcon::bytes</NAME>
<TYPE>GBytes*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>bytes</NICK>
<BLURB>The bytes containing the icon.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GCharsetConverter::from-charset</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>From Charset</NICK>
<BLURB>The character encoding to convert from.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GCharsetConverter::to-charset</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>To Charset</NICK>
<BLURB>The character encoding to convert to.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GCharsetConverter::use-fallback</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Fallback enabled</NICK>
<BLURB>Use fallback (of form \<hexval>) for invalid bytes.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GConverterInputStream::converter</NAME>
<TYPE>GConverter*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Converter</NICK>
<BLURB>The converter object.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GConverterOutputStream::converter</NAME>
<TYPE>GConverter*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Converter</NICK>
<BLURB>The converter object.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDataInputStream::byte-order</NAME>
<TYPE>GDataStreamByteOrder</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Byte order</NICK>
<BLURB>The byte order.</BLURB>
<DEFAULT>G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN</DEFAULT>
</ARG>

<ARG>
<NAME>GDataInputStream::newline-type</NAME>
<TYPE>GDataStreamNewlineType</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Newline type</NICK>
<BLURB>The accepted types of line ending.</BLURB>
<DEFAULT>G_DATA_STREAM_NEWLINE_TYPE_LF</DEFAULT>
</ARG>

<ARG>
<NAME>GDataOutputStream::byte-order</NAME>
<TYPE>GDataStreamByteOrder</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Byte order</NICK>
<BLURB>The byte order.</BLURB>
<DEFAULT>G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::address</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Address</NICK>
<BLURB>D-Bus address specifying potential socket endpoints.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::authentication-observer</NAME>
<TYPE>GDBusAuthObserver*</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Authentication Observer</NICK>
<BLURB>Object used to assist in the authentication process.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::capabilities</NAME>
<TYPE>GDBusCapabilityFlags</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Capabilities</NICK>
<BLURB>Capabilities.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::closed</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Closed</NICK>
<BLURB>Whether the connection is closed.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::exit-on-close</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Exit on close</NICK>
<BLURB>Whether the process is terminated when the connection is closed.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::flags</NAME>
<TYPE>GDBusConnectionFlags</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Flags</NICK>
<BLURB>Flags.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::guid</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>GUID</NICK>
<BLURB>GUID of the server peer.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::stream</NAME>
<TYPE>GIOStream*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>IO Stream</NICK>
<BLURB>The underlying streams used for I/O.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusConnection::unique-name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>unique-name</NICK>
<BLURB>Unique name of bus connection.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusInterfaceSkeleton::g-flags</NAME>
<TYPE>GDBusInterfaceSkeletonFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>g-flags</NICK>
<BLURB>Flags for the interface skeleton.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusMessage::locked</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Locked</NICK>
<BLURB>Whether the message is locked.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::bus-type</NAME>
<TYPE>GBusType</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Bus Type</NICK>
<BLURB>The bus to connect to, if any.</BLURB>
<DEFAULT>G_BUS_TYPE_NONE</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::connection</NAME>
<TYPE>GDBusConnection*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Connection</NICK>
<BLURB>The connection to use.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::flags</NAME>
<TYPE>GDBusObjectManagerClientFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Flags</NICK>
<BLURB>Flags for the proxy manager.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::get-proxy-type-destroy-notify</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>GDBusProxyTypeFunc user data free function</NICK>
<BLURB>The GDBusProxyTypeFunc user data free function.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::get-proxy-type-func</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>GDBusProxyTypeFunc Function Pointer</NICK>
<BLURB>The GDBusProxyTypeFunc pointer to use.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::get-proxy-type-user-data</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>GDBusProxyTypeFunc User Data</NICK>
<BLURB>The GDBusProxyTypeFunc user_data.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Name</NICK>
<BLURB>Name that the manager is for.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::name-owner</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Name Owner</NICK>
<BLURB>The owner of the name we are watching.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerClient::object-path</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Object Path</NICK>
<BLURB>The object path of the control object.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerServer::connection</NAME>
<TYPE>GDBusConnection*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Connection</NICK>
<BLURB>The connection to export objects on.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectManagerServer::object-path</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Object Path</NICK>
<BLURB>The object path to register the manager object at.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectProxy::g-connection</NAME>
<TYPE>GDBusConnection*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Connection</NICK>
<BLURB>The connection of the proxy.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectProxy::g-object-path</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Object Path</NICK>
<BLURB>The object path of the proxy.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusObjectSkeleton::g-object-path</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Object Path</NICK>
<BLURB>The object path where the object is exported.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-bus-type</NAME>
<TYPE>GBusType</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Bus Type</NICK>
<BLURB>The bus to connect to, if any.</BLURB>
<DEFAULT>G_BUS_TYPE_NONE</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-connection</NAME>
<TYPE>GDBusConnection*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>g-connection</NICK>
<BLURB>The connection the proxy is for.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-default-timeout</NAME>
<TYPE>gint</TYPE>
<RANGE>>= -1</RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Default Timeout</NICK>
<BLURB>Timeout for remote method invocation.</BLURB>
<DEFAULT>-1</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-flags</NAME>
<TYPE>GDBusProxyFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>g-flags</NICK>
<BLURB>Flags for the proxy.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-interface-info</NAME>
<TYPE>GDBusInterfaceInfo*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Interface Information</NICK>
<BLURB>Interface Information.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-interface-name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>g-interface-name</NICK>
<BLURB>The D-Bus interface name the proxy is for.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>g-name</NICK>
<BLURB>The well-known or unique name that the proxy is for.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-name-owner</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>g-name-owner</NICK>
<BLURB>The unique name for the owner.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusProxy::g-object-path</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>g-object-path</NICK>
<BLURB>The object path the proxy is for.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusServer::active</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Active</NICK>
<BLURB>Whether the server is currently active.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusServer::address</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Address</NICK>
<BLURB>The address to listen on.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusServer::authentication-observer</NAME>
<TYPE>GDBusAuthObserver*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Authentication Observer</NICK>
<BLURB>Object used to assist in the authentication process.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusServer::client-address</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Client Address</NICK>
<BLURB>The address clients can use.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDBusServer::flags</NAME>
<TYPE>GDBusServerFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Flags</NICK>
<BLURB>Flags for the server.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDBusServer::guid</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>GUID</NICK>
<BLURB>The guid of the server.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDesktopAppInfo::filename</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Filename</NICK>
<BLURB></BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsClientConnection::accepted-cas</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Accepted CAs</NICK>
<BLURB>Distinguished names of the CAs the server accepts certificates from.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsClientConnection::server-identity</NAME>
<TYPE>GSocketConnectable*</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Server identity</NICK>
<BLURB>GSocketConnectable identifying the server.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsClientConnection::validation-flags</NAME>
<TYPE>GTlsCertificateFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Validation flags</NICK>
<BLURB>What certificate validation to perform.</BLURB>
<DEFAULT>G_TLS_CERTIFICATE_UNKNOWN_CA | G_TLS_CERTIFICATE_BAD_IDENTITY | G_TLS_CERTIFICATE_NOT_ACTIVATED | G_TLS_CERTIFICATE_EXPIRED | G_TLS_CERTIFICATE_REVOKED | G_TLS_CERTIFICATE_INSECURE | G_TLS_CERTIFICATE_GENERIC_ERROR</DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsConnection::base-socket</NAME>
<TYPE>GDatagramBased*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Base Socket</NICK>
<BLURB>The GDatagramBased that the connection wraps.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsConnection::certificate</NAME>
<TYPE>GTlsCertificate*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Certificate</NICK>
<BLURB>The connection’s certificate.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsConnection::database</NAME>
<TYPE>GTlsDatabase*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Database</NICK>
<BLURB>Certificate database to use for looking up or verifying certificates.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsConnection::interaction</NAME>
<TYPE>GTlsInteraction*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Interaction</NICK>
<BLURB>Optional object for user interaction.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsConnection::peer-certificate</NAME>
<TYPE>GTlsCertificate*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Peer Certificate</NICK>
<BLURB>The connection’s peer’s certificate.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsConnection::peer-certificate-errors</NAME>
<TYPE>GTlsCertificateFlags</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Peer Certificate Errors</NICK>
<BLURB>Errors found with the peer’s certificate.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsConnection::rehandshake-mode</NAME>
<TYPE>GTlsRehandshakeMode</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Rehandshake mode</NICK>
<BLURB>When to allow rehandshaking.</BLURB>
<DEFAULT>G_TLS_REHANDSHAKE_NEVER</DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsConnection::require-close-notify</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Require close notify</NICK>
<BLURB>Whether to require proper TLS close notification.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GDtlsServerConnection::authentication-mode</NAME>
<TYPE>GTlsAuthenticationMode</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Authentication Mode</NICK>
<BLURB>The client authentication mode.</BLURB>
<DEFAULT>G_TLS_AUTHENTICATION_NONE</DEFAULT>
</ARG>

<ARG>
<NAME>GEmblem::icon</NAME>
<TYPE>GObject*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>The icon of the emblem</NICK>
<BLURB>The actual icon of the emblem.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GEmblem::origin</NAME>
<TYPE>GEmblemOrigin</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>GEmblem’s origin</NICK>
<BLURB>Tells which origin the emblem is derived from.</BLURB>
<DEFAULT>G_EMBLEM_ORIGIN_UNKNOWN</DEFAULT>
</ARG>

<ARG>
<NAME>GEmblemedIcon::gicon</NAME>
<TYPE>GIcon*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>The base GIcon</NICK>
<BLURB>The GIcon to attach emblems to.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GFileEnumerator::container</NAME>
<TYPE>GFile*</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Container</NICK>
<BLURB>The container that is being enumerated.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GFileIcon::file</NAME>
<TYPE>GFile*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>file</NICK>
<BLURB>The file containing the icon.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GFileMonitor::cancelled</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Cancelled</NICK>
<BLURB>Whether the monitor has been cancelled.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GFileMonitor::rate-limit</NAME>
<TYPE>gint</TYPE>
<RANGE>>= 0</RANGE>
<FLAGS>rw</FLAGS>
<NICK>Rate limit</NICK>
<BLURB>The limit of the monitor to watch for changes, in milliseconds.</BLURB>
<DEFAULT>800</DEFAULT>
</ARG>

<ARG>
<NAME>GFilterInputStream::base-stream</NAME>
<TYPE>GInputStream*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>The Filter Base Stream</NICK>
<BLURB>The underlying base stream on which the io ops will be done.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GFilterInputStream::close-base-stream</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Close Base Stream</NICK>
<BLURB>If the base stream should be closed when the filter stream is closed.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GFilterOutputStream::base-stream</NAME>
<TYPE>GOutputStream*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>The Filter Base Stream</NICK>
<BLURB>The underlying base stream on which the io ops will be done.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GFilterOutputStream::close-base-stream</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Close Base Stream</NICK>
<BLURB>If the base stream should be closed when the filter stream is closed.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::bytes</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Bytes</NICK>
<BLURB>The raw address data.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::family</NAME>
<TYPE>GSocketFamily</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Address family</NICK>
<BLURB>The address family (IPv4 or IPv6).</BLURB>
<DEFAULT>G_SOCKET_FAMILY_INVALID</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-any</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is any</NICK>
<BLURB>Whether this is the "any" address for its family.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-link-local</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is link-local</NICK>
<BLURB>Whether this is a link-local address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-loopback</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is loopback</NICK>
<BLURB>Whether this is the loopback address for its family.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-mc-global</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is multicast global</NICK>
<BLURB>Whether this is a global multicast address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-mc-link-local</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is multicast link-local</NICK>
<BLURB>Whether this is a link-local multicast address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-mc-node-local</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is multicast node-local</NICK>
<BLURB>Whether this is a node-local multicast address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-mc-org-local</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is multicast org-local</NICK>
<BLURB>Whether this is an organization-local multicast address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-mc-site-local</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is multicast site-local</NICK>
<BLURB>Whether this is a site-local multicast address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-multicast</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is multicast</NICK>
<BLURB>Whether this is a multicast address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddress::is-site-local</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is site-local</NICK>
<BLURB>Whether this is a site-local address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddressMask::address</NAME>
<TYPE>GInetAddress*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Address</NICK>
<BLURB>The base address.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddressMask::family</NAME>
<TYPE>GSocketFamily</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Address family</NICK>
<BLURB>The address family (IPv4 or IPv6).</BLURB>
<DEFAULT>G_SOCKET_FAMILY_INVALID</DEFAULT>
</ARG>

<ARG>
<NAME>GInetAddressMask::length</NAME>
<TYPE>guint</TYPE>
<RANGE><= 128</RANGE>
<FLAGS>rw</FLAGS>
<NICK>Length</NICK>
<BLURB>The prefix length.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GInetSocketAddress::address</NAME>
<TYPE>GInetAddress*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Address</NICK>
<BLURB>The address.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GInetSocketAddress::flowinfo</NAME>
<TYPE>guint</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Flow info</NICK>
<BLURB>IPv6 flow info.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GInetSocketAddress::port</NAME>
<TYPE>guint</TYPE>
<RANGE><= 65535</RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Port</NICK>
<BLURB>The port.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GInetSocketAddress::scope-id</NAME>
<TYPE>guint</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Scope ID</NICK>
<BLURB>IPv6 scope ID.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GIOStream::closed</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Closed</NICK>
<BLURB>Is the stream closed.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GIOStream::input-stream</NAME>
<TYPE>GInputStream*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Input stream</NICK>
<BLURB>The GInputStream to read from.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GIOStream::output-stream</NAME>
<TYPE>GOutputStream*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Output stream</NICK>
<BLURB>The GOutputStream to write to.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GListStore::item-type</NAME>
<TYPE>GType*</TYPE>
<RANGE>GObject</RANGE>
<FLAGS>rwX</FLAGS>
<NICK></NICK>
<BLURB></BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GMemoryOutputStream::data</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Data Buffer</NICK>
<BLURB>Pointer to buffer where data will be written.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GMemoryOutputStream::data-size</NAME>
<TYPE>gulong</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Data Size</NICK>
<BLURB>Size of data written to the buffer.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GMemoryOutputStream::destroy-function</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Destroy Notification Function</NICK>
<BLURB>Function called with the buffer as argument when the stream is destroyed.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GMemoryOutputStream::realloc-function</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Memory Reallocation Function</NICK>
<BLURB>Function with realloc semantics called to enlarge the buffer.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GMemoryOutputStream::size</NAME>
<TYPE>gulong</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Data Buffer Size</NICK>
<BLURB>Current size of the data buffer.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::anonymous</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Anonymous</NICK>
<BLURB>Whether to use an anonymous user.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::choice</NAME>
<TYPE>gint</TYPE>
<RANGE>>= 0</RANGE>
<FLAGS>rw</FLAGS>
<NICK>Choice</NICK>
<BLURB>The users choice.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::domain</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Domain</NICK>
<BLURB>The domain of the mount operation.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::is-tcrypt-hidden-volume</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>TCRYPT Hidden Volume</NICK>
<BLURB>Whether to unlock a TCRYPT hidden volume. See https://www.veracrypt.fr/en/Hidden%20Volume.html.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::is-tcrypt-system-volume</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>TCRYPT System Volume</NICK>
<BLURB>Whether to unlock a TCRYPT system volume. Only supported for unlocking Windows system volumes. See https://www.veracrypt.fr/en/System%20Encryption.html.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::password</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Password</NICK>
<BLURB>The password.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::password-save</NAME>
<TYPE>GPasswordSave</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Password save</NICK>
<BLURB>How passwords should be saved.</BLURB>
<DEFAULT>G_PASSWORD_SAVE_NEVER</DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::pim</NAME>
<TYPE>guint</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>PIM</NICK>
<BLURB>The VeraCrypt PIM value.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GMountOperation::username</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Username</NICK>
<BLURB>The user name.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkAddress::hostname</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Hostname</NICK>
<BLURB>Hostname to resolve.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkAddress::port</NAME>
<TYPE>guint</TYPE>
<RANGE><= 65535</RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Port</NICK>
<BLURB>Network port.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkAddress::scheme</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Scheme</NICK>
<BLURB>URI Scheme.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkMonitor::connectivity</NAME>
<TYPE>GNetworkConnectivity</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Network connectivity</NICK>
<BLURB>Level of network connectivity.</BLURB>
<DEFAULT>G_NETWORK_CONNECTIVITY_FULL</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkMonitor::network-available</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Network available</NICK>
<BLURB>Whether the network is available.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkMonitor::network-metered</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Network metered</NICK>
<BLURB>Whether the network is metered.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkService::domain</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Domain</NICK>
<BLURB>Network domain, eg, "example.com".</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkService::protocol</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Protocol</NICK>
<BLURB>Network protocol, eg "tcp".</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkService::scheme</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Scheme</NICK>
<BLURB>Network scheme (default is to use service).</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GNetworkService::service</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Service</NICK>
<BLURB>Service name, eg "ldap".</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GPermission::allowed</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Is allowed</NICK>
<BLURB>If the caller is allowed to perform the action.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GPermission::can-acquire</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Can acquire</NICK>
<BLURB>If calling g_permission_acquire() makes sense.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GPermission::can-release</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Can release</NICK>
<BLURB>If calling g_permission_release() makes sense.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GPropertyAction::enabled</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Enabled</NICK>
<BLURB>If the action can be activated.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GPropertyAction::invert-boolean</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Invert boolean</NICK>
<BLURB>Whether to invert the value of a boolean property.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GPropertyAction::name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Action Name</NICK>
<BLURB>The name used to invoke the action.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GPropertyAction::object</NAME>
<TYPE>GObject*</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Object</NICK>
<BLURB>The object with the property to wrap.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GPropertyAction::parameter-type</NAME>
<TYPE>GVariantType*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Parameter Type</NICK>
<BLURB>The type of GVariant passed to activate().</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GPropertyAction::property-name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Property name</NICK>
<BLURB>The name of the property to wrap.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GPropertyAction::state</NAME>
<TYPE>GVariant*</TYPE>
<RANGE>GVariant<*></RANGE>
<FLAGS>r</FLAGS>
<NICK>State</NICK>
<BLURB>The state the action is in.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GPropertyAction::state-type</NAME>
<TYPE>GVariantType*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>State Type</NICK>
<BLURB>The type of the state kept by the action.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddressEnumerator::connectable</NAME>
<TYPE>GSocketConnectable*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Connectable</NICK>
<BLURB>The connectable being enumerated.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddressEnumerator::default-port</NAME>
<TYPE>guint</TYPE>
<RANGE><= 65535</RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Default port</NICK>
<BLURB>The default port to use if uri does not specify one.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddressEnumerator::proxy-resolver</NAME>
<TYPE>GProxyResolver*</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Proxy resolver</NICK>
<BLURB>The proxy resolver to use.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddressEnumerator::uri</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>URI</NICK>
<BLURB>The destination URI, use none:// for generic socket.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddress::destination-hostname</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Destination Hostname</NICK>
<BLURB>The proxy destination hostname.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddress::destination-port</NAME>
<TYPE>guint</TYPE>
<RANGE><= 65535</RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Destination Port</NICK>
<BLURB>The proxy destination port.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddress::destination-protocol</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Destionation Protocol</NICK>
<BLURB>The proxy destination protocol.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddress::password</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Password</NICK>
<BLURB>The proxy password.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddress::protocol</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Protocol</NICK>
<BLURB>The proxy protocol.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddress::uri</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>URI</NICK>
<BLURB>The proxy’s URI.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GProxyAddress::username</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Username</NICK>
<BLURB>The proxy username.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GSettings::backend</NAME>
<TYPE>GSettingsBackend*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>GSettingsBackend</NICK>
<BLURB>The GSettingsBackend for this settings object.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSettings::delay-apply</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Delay-apply mode</NICK>
<BLURB>Whether this settings object is in “delay-apply” mode.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GSettings::has-unapplied</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Has unapplied changes</NICK>
<BLURB>TRUE if there are outstanding changes to apply().</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GSettings::path</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Base path</NICK>
<BLURB>The path within the backend where the settings are.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GSettings::schema</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Schema name</NICK>
<BLURB>The name of the schema for this settings object.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GSettings::schema-id</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Schema name</NICK>
<BLURB>The name of the schema for this settings object.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GSettings::settings-schema</NAME>
<TYPE>GSettingsSchema*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>schema</NICK>
<BLURB>The GSettingsSchema for this settings object.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleAction::enabled</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Enabled</NICK>
<BLURB>If the action can be activated.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleAction::name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Action Name</NICK>
<BLURB>The name used to invoke the action.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleAction::parameter-type</NAME>
<TYPE>GVariantType*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Parameter Type</NICK>
<BLURB>The type of GVariant passed to activate().</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleAction::state</NAME>
<TYPE>GVariant*</TYPE>
<RANGE>GVariant<*></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>State</NICK>
<BLURB>The state the action is in.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleAction::state-type</NAME>
<TYPE>GVariantType*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>State Type</NICK>
<BLURB>The type of the state kept by the action.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleIOStream::input-stream</NAME>
<TYPE>GInputStream*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Input stream</NICK>
<BLURB>The GInputStream to read from.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleIOStream::output-stream</NAME>
<TYPE>GOutputStream*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Output stream</NICK>
<BLURB>The GOutputStream to write to.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleProxyResolver::default-proxy</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Default proxy</NICK>
<BLURB>The default proxy URI.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GSimpleProxyResolver::ignore-hosts</NAME>
<TYPE>GStrv</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Ignore hosts</NICK>
<BLURB>Hosts that will not use the proxy.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSocketAddress::family</NAME>
<TYPE>GSocketFamily</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Address family</NICK>
<BLURB>The family of the socket address.</BLURB>
<DEFAULT>G_SOCKET_FAMILY_INVALID</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::enable-proxy</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Enable proxy</NICK>
<BLURB>Enable proxy support.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::family</NAME>
<TYPE>GSocketFamily</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Socket family</NICK>
<BLURB>The sockets address family to use for socket construction.</BLURB>
<DEFAULT>G_SOCKET_FAMILY_INVALID</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::local-address</NAME>
<TYPE>GSocketAddress*</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Local address</NICK>
<BLURB>The local address constructed sockets will be bound to.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::protocol</NAME>
<TYPE>GSocketProtocol</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Socket protocol</NICK>
<BLURB>The protocol to use for socket construction, or 0 for default.</BLURB>
<DEFAULT>G_SOCKET_PROTOCOL_DEFAULT</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::proxy-resolver</NAME>
<TYPE>GProxyResolver*</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Proxy resolver</NICK>
<BLURB>The proxy resolver to use.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::timeout</NAME>
<TYPE>guint</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Socket timeout</NICK>
<BLURB>The I/O timeout for sockets, or 0 for none.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::tls</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>TLS</NICK>
<BLURB>Whether to create TLS connections.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::tls-validation-flags</NAME>
<TYPE>GTlsCertificateFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>TLS validation flags</NICK>
<BLURB>TLS validation flags to use.</BLURB>
<DEFAULT>G_TLS_CERTIFICATE_UNKNOWN_CA | G_TLS_CERTIFICATE_BAD_IDENTITY | G_TLS_CERTIFICATE_NOT_ACTIVATED | G_TLS_CERTIFICATE_EXPIRED | G_TLS_CERTIFICATE_REVOKED | G_TLS_CERTIFICATE_INSECURE | G_TLS_CERTIFICATE_GENERIC_ERROR</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketClient::type</NAME>
<TYPE>GSocketType</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Socket type</NICK>
<BLURB>The sockets type to use for socket construction.</BLURB>
<DEFAULT>G_SOCKET_TYPE_STREAM</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketConnection::socket</NAME>
<TYPE>GSocket*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Socket</NICK>
<BLURB>The underlying GSocket.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::blocking</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>blocking</NICK>
<BLURB>Whether or not I/O on this socket is blocking.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::broadcast</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Broadcast</NICK>
<BLURB>Whether to allow sending to broadcast addresses.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::family</NAME>
<TYPE>GSocketFamily</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Socket family</NICK>
<BLURB>The sockets address family.</BLURB>
<DEFAULT>G_SOCKET_FAMILY_INVALID</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::fd</NAME>
<TYPE>gint</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>File descriptor</NICK>
<BLURB>The sockets file descriptor.</BLURB>
<DEFAULT>-1</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::keepalive</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Keep connection alive</NICK>
<BLURB>Keep connection alive by sending periodic pings.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::listen-backlog</NAME>
<TYPE>gint</TYPE>
<RANGE>[0,128]</RANGE>
<FLAGS>rw</FLAGS>
<NICK>Listen backlog</NICK>
<BLURB>Outstanding connections in the listen queue.</BLURB>
<DEFAULT>10</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::local-address</NAME>
<TYPE>GSocketAddress*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Local address</NICK>
<BLURB>The local address the socket is bound to.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::multicast-loopback</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Multicast loopback</NICK>
<BLURB>Whether outgoing multicast packets loop back to the local host.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::multicast-ttl</NAME>
<TYPE>guint</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Multicast TTL</NICK>
<BLURB>Time-to-live of outgoing multicast packets.</BLURB>
<DEFAULT>1</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::protocol</NAME>
<TYPE>GSocketProtocol</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Socket protocol</NICK>
<BLURB>The id of the protocol to use, or -1 for unknown.</BLURB>
<DEFAULT>G_SOCKET_PROTOCOL_UNKNOWN</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::remote-address</NAME>
<TYPE>GSocketAddress*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Remote address</NICK>
<BLURB>The remote address the socket is connected to.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::timeout</NAME>
<TYPE>guint</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Timeout</NICK>
<BLURB>The timeout in seconds on socket I/O.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::ttl</NAME>
<TYPE>guint</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>TTL</NICK>
<BLURB>Time-to-live of outgoing unicast packets.</BLURB>
<DEFAULT>0</DEFAULT>
</ARG>

<ARG>
<NAME>GSocket::type</NAME>
<TYPE>GSocketType</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Socket type</NICK>
<BLURB>The sockets type.</BLURB>
<DEFAULT>G_SOCKET_TYPE_STREAM</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketListener::listen-backlog</NAME>
<TYPE>gint</TYPE>
<RANGE>[0,2000]</RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Listen backlog</NICK>
<BLURB>outstanding connections in the listen queue.</BLURB>
<DEFAULT>10</DEFAULT>
</ARG>

<ARG>
<NAME>GSocketService::active</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Active</NICK>
<BLURB>Whether the service is currently accepting connections.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GSubprocess::argv</NAME>
<TYPE>GStrv</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Arguments</NICK>
<BLURB>Argument vector.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSubprocess::flags</NAME>
<TYPE>GSubprocessFlags</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Flags</NICK>
<BLURB>Subprocess flags.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GSubprocessLauncher::flags</NAME>
<TYPE>GSubprocessFlags</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Flags</NICK>
<BLURB>GSubprocessFlags for launched processes.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTask::completed</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Task completed</NICK>
<BLURB>Whether the task has completed yet.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GTcpConnection::graceful-disconnect</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Graceful Disconnect</NICK>
<BLURB>Whether or not close does a graceful disconnect.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GTcpWrapperConnection::base-io-stream</NAME>
<TYPE>GIOStream*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Base IO Stream</NICK>
<BLURB>The wrapped GIOStream.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTestDBus::flags</NAME>
<TYPE>GTestDBusFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>D-Bus session flags</NICK>
<BLURB>Flags specifying the behaviour of the D-Bus session.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GThemedIcon::name</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>name</NICK>
<BLURB>The name of the icon.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GThemedIcon::names</NAME>
<TYPE>GStrv</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>names</NICK>
<BLURB>An array containing the icon names.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GThemedIcon::use-default-fallbacks</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>use default fallbacks</NICK>
<BLURB>Whether to use default fallbacks found by shortening the name at “-” characters. Ignores names after the first if multiple names are given.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GThreadedSocketService::max-threads</NAME>
<TYPE>gint</TYPE>
<RANGE>>= -1</RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Max threads</NICK>
<BLURB>The max number of threads handling clients for this service.</BLURB>
<DEFAULT>10</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsCertificate::certificate</NAME>
<TYPE>GByteArray*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Certificate</NICK>
<BLURB>The DER representation of the certificate.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsCertificate::certificate-pem</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Certificate (PEM)</NICK>
<BLURB>The PEM representation of the certificate.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsCertificate::issuer</NAME>
<TYPE>GTlsCertificate*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Issuer</NICK>
<BLURB>The certificate for the issuing entity.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsCertificate::private-key</NAME>
<TYPE>GByteArray*</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Private key</NICK>
<BLURB>The DER representation of the certificate’s private key.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsCertificate::private-key-pem</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>wX</FLAGS>
<NICK>Private key (PEM)</NICK>
<BLURB>The PEM representation of the certificate’s private key.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsClientConnection::accepted-cas</NAME>
<TYPE>gpointer</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Accepted CAs</NICK>
<BLURB>Distinguished names of the CAs the server accepts certificates from.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsClientConnection::server-identity</NAME>
<TYPE>GSocketConnectable*</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Server identity</NICK>
<BLURB>GSocketConnectable identifying the server.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsClientConnection::use-ssl3</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Use fallback</NICK>
<BLURB>Use fallback version of SSL/TLS rather than most recent version.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsClientConnection::validation-flags</NAME>
<TYPE>GTlsCertificateFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Validation flags</NICK>
<BLURB>What certificate validation to perform.</BLURB>
<DEFAULT>G_TLS_CERTIFICATE_UNKNOWN_CA | G_TLS_CERTIFICATE_BAD_IDENTITY | G_TLS_CERTIFICATE_NOT_ACTIVATED | G_TLS_CERTIFICATE_EXPIRED | G_TLS_CERTIFICATE_REVOKED | G_TLS_CERTIFICATE_INSECURE | G_TLS_CERTIFICATE_GENERIC_ERROR</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::base-io-stream</NAME>
<TYPE>GIOStream*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Base IOStream</NICK>
<BLURB>The GIOStream that the connection wraps.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::certificate</NAME>
<TYPE>GTlsCertificate*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Certificate</NICK>
<BLURB>The connection’s certificate.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::database</NAME>
<TYPE>GTlsDatabase*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Database</NICK>
<BLURB>Certificate database to use for looking up or verifying certificates.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::interaction</NAME>
<TYPE>GTlsInteraction*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Interaction</NICK>
<BLURB>Optional object for user interaction.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::peer-certificate</NAME>
<TYPE>GTlsCertificate*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Peer Certificate</NICK>
<BLURB>The connection’s peer’s certificate.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::peer-certificate-errors</NAME>
<TYPE>GTlsCertificateFlags</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>Peer Certificate Errors</NICK>
<BLURB>Errors found with the peer’s certificate.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::rehandshake-mode</NAME>
<TYPE>GTlsRehandshakeMode</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Rehandshake mode</NICK>
<BLURB>When to allow rehandshaking.</BLURB>
<DEFAULT>G_TLS_REHANDSHAKE_SAFELY</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::require-close-notify</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Require close notify</NICK>
<BLURB>Whether to require proper TLS close notification.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsConnection::use-system-certdb</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Use system certificate database</NICK>
<BLURB>Whether to verify peer certificates against the system certificate database.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsFileDatabase::anchors</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwx</FLAGS>
<NICK>Anchors</NICK>
<BLURB>The certificate authority anchor file.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsPassword::description</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Description</NICK>
<BLURB>Description of what the password is for.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsPassword::flags</NAME>
<TYPE>GTlsPasswordFlags</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Flags</NICK>
<BLURB>Flags about the password.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GTlsPassword::warning</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Warning</NICK>
<BLURB>Warning about the password.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GTlsServerConnection::authentication-mode</NAME>
<TYPE>GTlsAuthenticationMode</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Authentication Mode</NICK>
<BLURB>The client authentication mode.</BLURB>
<DEFAULT>G_TLS_AUTHENTICATION_NONE</DEFAULT>
</ARG>

<ARG>
<NAME>GUnixCredentialsMessage::credentials</NAME>
<TYPE>GCredentials*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Credentials</NICK>
<BLURB>The credentials stored in the message.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GUnixFDMessage::fd-list</NAME>
<TYPE>GUnixFDList*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>file descriptor list</NICK>
<BLURB>The GUnixFDList object to send with the message.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GUnixInputStream::close-fd</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Close file descriptor</NICK>
<BLURB>Whether to close the file descriptor when the stream is closed.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GUnixInputStream::fd</NAME>
<TYPE>gint</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>File descriptor</NICK>
<BLURB>The file descriptor to read from.</BLURB>
<DEFAULT>-1</DEFAULT>
</ARG>

<ARG>
<NAME>GUnixOutputStream::close-fd</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>Close file descriptor</NICK>
<BLURB>Whether to close the file descriptor when the stream is closed.</BLURB>
<DEFAULT>TRUE</DEFAULT>
</ARG>

<ARG>
<NAME>GUnixOutputStream::fd</NAME>
<TYPE>gint</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>File descriptor</NICK>
<BLURB>The file descriptor to write to.</BLURB>
<DEFAULT>-1</DEFAULT>
</ARG>

<ARG>
<NAME>GUnixSocketAddress::abstract</NAME>
<TYPE>gboolean</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Abstract</NICK>
<BLURB>Whether or not this is an abstract address.</BLURB>
<DEFAULT>FALSE</DEFAULT>
</ARG>

<ARG>
<NAME>GUnixSocketAddress::address-type</NAME>
<TYPE>GUnixSocketAddressType</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Address type</NICK>
<BLURB>The type of UNIX socket address.</BLURB>
<DEFAULT>G_UNIX_SOCKET_ADDRESS_PATH</DEFAULT>
</ARG>

<ARG>
<NAME>GUnixSocketAddress::path</NAME>
<TYPE>gchar*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Path</NICK>
<BLURB>UNIX socket path.</BLURB>
<DEFAULT>NULL</DEFAULT>
</ARG>

<ARG>
<NAME>GUnixSocketAddress::path-as-array</NAME>
<TYPE>GByteArray*</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>Path array</NICK>
<BLURB>UNIX socket path, as byte array.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GZlibCompressor::file-info</NAME>
<TYPE>GFileInfo*</TYPE>
<RANGE></RANGE>
<FLAGS>rw</FLAGS>
<NICK>file info</NICK>
<BLURB>File info.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GZlibCompressor::format</NAME>
<TYPE>GZlibCompressorFormat</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>compression format</NICK>
<BLURB>The format of the compressed data.</BLURB>
<DEFAULT>G_ZLIB_COMPRESSOR_FORMAT_ZLIB</DEFAULT>
</ARG>

<ARG>
<NAME>GZlibCompressor::level</NAME>
<TYPE>gint</TYPE>
<RANGE>[-1,9]</RANGE>
<FLAGS>rwX</FLAGS>
<NICK>compression level</NICK>
<BLURB>The level of compression from 0 (no compression) to 9 (most compression), -1 for the default level.</BLURB>
<DEFAULT>-1</DEFAULT>
</ARG>

<ARG>
<NAME>GZlibDecompressor::file-info</NAME>
<TYPE>GFileInfo*</TYPE>
<RANGE></RANGE>
<FLAGS>r</FLAGS>
<NICK>file info</NICK>
<BLURB>File info.</BLURB>
<DEFAULT></DEFAULT>
</ARG>

<ARG>
<NAME>GZlibDecompressor::format</NAME>
<TYPE>GZlibCompressorFormat</TYPE>
<RANGE></RANGE>
<FLAGS>rwX</FLAGS>
<NICK>compression format</NICK>
<BLURB>The format of the compressed data.</BLURB>
<DEFAULT>G_ZLIB_COMPRESSOR_FORMAT_ZLIB</DEFAULT>
</ARG>

